=== Code Summary Generated at 2025-01-13 23:45:25 ===

=== Project Folder Structure ===

FormatWeb/
    static/
        assets/
            fonts/
                futura-pt.zip
                FuturaCyrillicBook.ttf
                FuturaCyrillicHeavy.ttf
                FuturaCyrillicLight.ttf
                Spacia Heavy.ttf
                futura-pt/
                    FuturaCyrillicBold.ttf
                    FuturaCyrillicBook.ttf
                    FuturaCyrillicDemi.ttf
                    FuturaCyrillicExtraBold.ttf
                    FuturaCyrillicHeavy.ttf
                    FuturaCyrillicLight.ttf
                    FuturaCyrillicMedium.ttf
        css/
            main.css
            base/
                reset.css
                responsive.css
                typography.css
                variables.css
            components/
                autocomplete.css
                buttons.css
                cards.css
                carousel.css
                dropdown.css
                filter.css
                forms.css
                pagination.css
                progress_indicator.css
                search.css
                toggle_view.css
            layout/
                footer.css
                hero.css
                navbar.css
            pages/
                about.css
                catalog.css
                contact.css
                events.css
                movie_details.css
        images/
            backdrop_1.jpg
            backdrop_2.jpg
            backdrop_3.jpg
            backdrop_4.jpg
            dd_bg_years.jpeg
            dd_bg_years.webp
            default_movie.png
            default_person.png
            event1.jpg
            event2.jpg
            event3.jpg
            filmab.jpg
            logo.png
            looking_down.jpg
            looking_down_dark.jpg
            looking_down_dark.png
            looking_down_light.png
            looking_down_small.jpg
            looking_down_small_light.jpg
            movie1.jpg
            movie2.jpg
            team1.jpg
            team2.jpg
        js/
            carousel.js
            catalog.js
            entry.js
            filter.js
            hero.js
            main.js
            movie_details.js
            navbar.js
            pagination.js
            test.js
            theme_toggle.js
    templates/
        catalog.html
        index.html
        movie_details.html
        movie_player.html

=== File Contents ===

--- File: static\css\main.css ---
/* main.css */

/* Import Base Styles */
@import url('./base/reset.css');
@import url('./base/variables.css');
@import url('./base/typography.css');
@import url('./base/responsive.css');

/* Import Layout Styles */
@import url('./layout/navbar.css');
@import url('./layout/footer.css');
@import url('./layout/hero.css');

/* Import Component Styles */
@import url('./components/progress_indicator.css');
@import url('./components/carousel.css');
@import url('./components/cards.css');
@import url('./components/buttons.css');
@import url('./components/forms.css');
@import url('./components/pagination.css');
@import url('./components/search.css');
@import url('./components/dropdown.css');
@import url('./components/autocomplete.css');

/* Import Page-Specific Styles */
@import url('./pages/catalog.css');
@import url('./pages/about.css');
@import url('./pages/contact.css');
@import url('./pages/events.css');



--- File: static\css\base\reset.css ---
/* reset.css */

/* Refined Reset */
*, *::before, *::after {
    margin: 0;
    padding: 0;
    box-sizing: inherit;
}

/* Apply box-sizing globally */
html {
    box-sizing: border-box;
}
html, body {
    /* Remove strict height: 100%; */
    min-height: 100%;
    height: auto;
    margin: 0;
    padding: 0;
    overflow-x: hidden; /* Keep horizontal overflow hidden if you want */
  }
  

/* Normalize link styles but allow color */
a {
    text-decoration: none;
    color: inherit;
}

/* Images should not exceed their container */
img {
    max-width: 100%;
    height: auto;
}

/* Lists should not have default styles */
ul, ol {
    list-style: none;
    margin-left: 0;
}



/* Screen-reader only text */
.sr-only {
    position: absolute;
    width: 1px;
    height: 1px;
    padding: 0;
    margin: -1px;
    overflow: hidden;
    clip: rect(0,0,0,0);
    white-space: nowrap;
    border: 0;
}
/* Scrollbar styles for WebKit browsers */
body::-webkit-scrollbar {
    width: 8px;
}

body::-webkit-scrollbar-track {
    background: var(--background-color);
}

body::-webkit-scrollbar-thumb {
    background-color: var(--background-color);
    border-radius: 4px;
    transition: background-color 0.3s;
}

body::-webkit-scrollbar-thumb:hover {
    background-color: var(--highlight-color); /* Use a darker or contrasting color */
}

/* Scrollbar styles for Firefox */
body {
    scrollbar-width: thin;
    scrollbar-color: var(--secondary-color) var(--background-color);
}

--- File: static\css\base\responsive.css ---
/* Mobile-First Base Styles */

/* Ensure all elements are responsive by default */

/* Extra Small Devices (Mobile Phones, <480px) */
@media (max-width: var(--breakpoint-xs)) {
    /* Navbar */
    header .container {
        flex-direction: column;
        align-items: flex-start;
        height: auto;
        padding: 10px;
    }

    nav ul {
        flex-direction: column;
        width: 100%;
    }

    nav ul li {
        width: 100%;
    }

    nav ul li a {
        padding: 10px 0;
        width: 100%;
        display: block;
    }



    /* Sidebar */
    .sidebar {
        display: none; /* Hide sidebar on mobile */
    }


}

/* Small Devices (Tablet Portrait, 480px - 767px) */
@media (min-width: var(--breakpoint-xs)) and (max-width: var(--breakpoint-sm)) {
    /* Navbar */
    header .container {
        flex-direction: row;
        justify-content: space-between;
    }

    nav ul {
        flex-direction: row;
    }

    nav ul li {
        width: auto;
    }





}

/* Medium Devices (Tablet Landscape, 768px - 1023px) */
@media (min-width: var(--breakpoint-sm)) and (max-width: var(--breakpoint-md)) {
    /* Navbar */
    header .container {
        padding: 15px;
    }






}

/* Large Devices (Desktop, 1024px - 1199px) */
@media (min-width: var(--breakpoint-md)) and (max-width: var(--breakpoint-lg)) {
    /* Navbar */
    header .container {
        padding: 20px;
    }




}

/* Extra Large Devices (Large Desktop, â‰¥1200px) */
@media (min-width: var(--breakpoint-lg)) {
    /* Navbar */
    header .container {
        padding: 25px;
    }

 
}

--- File: static\css\base\typography.css ---
/* typography.css */

/* Import Fonts */
@import url('https://fonts.googleapis.com/css2?family=Playfair+Display:wght@400;700&family=Roboto:wght@400;700&display=swap');

/* Typography Styles */
body {
    font-family: var(--font-body);
    color: var(--text-light);
    background-color: var(--background-dark);
    line-height: 1.6;
}

/* Headings */
h1, h2, h3, h4, h5, h6 {
    font-family: var(--secondary-text-color);
    color: var(--text-light);
    /* margin-bottom: 15px; */
}

/* Paragraphs */
p {
    margin-bottom: 15px;
    color: var(--secondary-text-color);
    font-size: 1.1em;
}

/* Links */
a {
    color: var(--link-color);
    transition: color var(--transition-duration) ease;
}

a:hover {
    color: var(--link-hover-color);
}

/* Buttons inside forms and other components */
button {
    font-family: var(--font-body);
}

--- File: static\css\base\variables.css ---
/* variables.css */

/*accent colors for light theme */
/* Import the font */
@font-face {
    font-family: 'Futura Cyrillic Book';
    src: url('/static/assets/fonts/FuturaCyrillicBook.ttf') format('truetype');
    font-weight: normal;
    font-style: normal;
}

:root {
    --Warm-Terracotta: #D17A22;
    --Muted-Teal: #3A8E8D;
    --Deep-Olive-Green: #6B8F23;
    --Soft-Burgundy: #A23E48;
    --Dusty-Blue: #607780;  
    --Gold: #846c1e;
    /* Color Variables */
    --accent-color: var(--Gold); /* Muted terracotta */
    --overview-color: #f7ba7d; /* Soft off-white */
    --primary-color: #FAF8F6; /* Soft off-white */
    --secondary-color: #3D3D3D; /* Dark charcoal gray */
    --background-color: #FFFDFB; /* Very light beige */
    --text-color: #2C2C2C; /* Dark gray for text */
    --header-background: #EFEDEA; /* Slightly darker than background */
    --footer-background: #EFEDEA; /* Matching header */
    --button-hover: #E0DED9; /* Hover effect */

    /* Additional Color Variables */
    --button-background: #FFFFFF; /* White */
    --background-dark: #DAD7D2; /* Darker background for sections */
    --muted-color: #636262f5; /* Light gray text */
    --secondary-text-color: #FFFFFF; /* White text on dark backgrounds */
    --secondary-secondary-text-color: #B5B2AD; /* Subtle light gray */

    --dropdown-background: #FFFFFF; /* Dropdown background */
    --highlight-color: #846c1e; /* Same as accent */
    --movie-card-background: #FFFFFF; /* Movie card background */
    --movie-card-hover-shadow: rgba(0, 0, 0, 0.1); /* Soft shadow */
    --overlay-background: rgba(56, 56, 56, 0.4); /* Overlay background */
    --tooltip-background: #3D3D3D; /* Dark tooltip background */
    --tooltip-text-color: #FFFFFF; /* Tooltip text color */
    --missing-poster-border: #846c1e; /* Accent color */

    /* Font Variables */
    --font-family: 'Lato', sans-serif; /* Lato as the main font */
    --font-body: 'Lato', sans-serif; /* Body font family */
    --font-heading: 'Futura Cyrillic Book', sans-serif; /* Heading font family */
    --font-cursive: 'Pinyon Script', cursive;

    --font-size-base: 16px; /* Base font size */
    --font-size-lg: 1.25rem; /* Large font size */
    --font-size-sm: 0.875rem; /* Small font size */
    --meta-data-font-size: clamp(0.8rem, 0.8vw, 1.4rem); /* Adaptive font size */
    --meta-data-font-size-medium: clamp(1rem, 1.5vw, 2.2rem); /* Adaptive font size */
    --meta-data-font-size-big: clamp(1.2rem, 2vw, 3rem); /* Adaptive font size */


    /* Layout Variables */
    --header-height: 60px; /* Header height */
    --footer-height: 200px; /* Footer height */
    --sidebar-width: 250px; /* Sidebar width */
    --big-button-height: 40px; /* Height for larger buttons or dropdown headers */

    /* Transition Variables */
    --transition-duration: 0.3s; /* Standard transition duration */

    /* Responsive Breakpoints */
    --breakpoint-xs: 480px; /* Extra Small Devices */
    --breakpoint-sm: 768px; /* Small Devices */
    --breakpoint-md: 1024px; /* Medium Devices */
    --breakpoint-lg: 1200px; /* Large Devices */

    /* Toggle Button Variables */
    --toggle-button-size: 24px;
    --toggle-button-color: var(--secondary-color);
    --toggle-button-active-color: var(--accent-color);

    /* Spacing Variables */
    --spacing-small: 8px;
    --spacing-medium: 16px;
    --spacing-large: 24px;

    /* Border Radius Variables */
    --border-radius-small: 4px;
    --border-radius-medium: 8px;
    --border-radius-large: 10px;

    /* Button-Specific Color Variables */
    --button-border-color: #CCCCCC; /* Light Gray */
    --button-text-color: #2C2C2C; /* Dark Gray */
    --button-hover-background: #E0DED9; /* Very Light Gray */
    --button-active-background: #D3D0CB; /* Light Gray */

    --poster-width: 100%;
    --catalog-width: 2200px;
}
/*accent colors for light theme 
Electric Blue (#4A90E2)
Rich Burgundy (#B53A4B)
Emerald Green (#2ECC71)
Golden Amber (#D4A017)
Burnt Orange (#E87D3E) */

[data-theme="dark"] {
    /* Override Color Variables for Dark Theme */
    --primary-color: #1A1A1A; /* Dark charcoal */
    --accent-color: #2ECC71;
    --secondary-color: #f4f1f1f5; /* Light gray text */
    --muted-color: #636262f5; /* Light gray text */
    --background-color: #121212; /* Near black */
    --text-color: #D6D6D6; /* Light gray */
    --header-background: #151515; /* Slight variation */
    --footer-background: #151515; /* Matching header */
    --button-hover: #2A2A2A; /* Button hover */

    /* Additional Color Variables */
    --button-background: #313131; /* Dark button background */
    --background-dark: #1C1C1C; /* For dark sections */
    --secondary-text-color: #FFFFFF; /* White text */
    --secondary-secondary-text-color: #A0A0A0; /* Light gray */
    --accent-color: #B58B4B; /* Muted gold */
    --dropdown-background: #1A1A1A; /* Dropdown background */
    --highlight-color: #B58B4B; /* Same as accent */
    --movie-card-background: #1F1F1F; /* Movie card background */
    --movie-card-hover-shadow: rgba(255, 255, 255, 0.1); /* Light shadow */
    --overlay-background: rgba(56, 56, 56, 0.4); /* Overlay background */
    --tooltip-background: #EAEAEA; /* Light tooltip background */
    --tooltip-text-color: #1A1A1A; /* Tooltip text color */
    --missing-poster-border: #B58B4B; /* Accent color */

    /* Toggle Button Variables */
    --toggle-button-color: var(--secondary-color);
    --toggle-button-active-color: var(--accent-color);

    /* Button-Specific Color Variables */
    --button-border-color: #444444; /* Dark Gray */
    --button-text-color: #D6D6D6; /* Light Gray */
    --button-hover-background: #2A2A2A; /* Dark Gray */
    --button-active-background: #333333; /* Slightly lighter gray */

    /* Update other variables as needed */
}

--- File: static\css\components\autocomplete.css ---
/* autocomplete.css */

/* Autocomplete Styles */
#autocomplete-list {
    position: absolute;
    top: 100%;
    left: 0;
    right: 0;
    background-color: var(--background-dark);
    /* border: 1px solid #ccc; */
    border-radius: 0 0 5px 5px;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.3);
    max-height: 300px;
    overflow-y: auto;
    scrollbar-width: thin; /* Firefox */
    -ms-overflow-style: none; /* IE and Edge */

    /* Hide scrollbar for Firefox */
    scrollbar-width: none;
    
    /* Hide scrollbar for Internet Explorer and Edge Legacy */
    -ms-overflow-style: none;    
}

#autocomplete-list::-webkit-scrollbar {
    display: none; /* Hide scrollbar in WebKit browsers */
}

/* Rest of your autocomplete styles */

.autocomplete-item {
    padding: 10px;
    color: #f5f5f5;
    cursor: pointer;
    transition: background-color var(--transition-duration), color var(--transition-duration);
}

.autocomplete-item:hover {
    background-color: var(--button-hover-background);
    color: #fff;
}

.autocomplete-item strong {
    font-weight: bold;
    color: var(--accent-color);
}

.autocomplete-item small {
    color: var(--secondary-text-color);
    font-size: 0.9em;
}

--- File: static\css\components\buttons.css ---
/* File: static/css/components/buttons.css */

/* Filter Buttons Container */
.filter-buttons-container {
    display: flex;
    flex-wrap: wrap;
    gap: 15px;
    width: 100%;
    max-height: 500px;
    overflow-y: auto;
    scrollbar-width: none;
    -ms-overflow-style: none;
    position: relative;
    font-family: var(--font-body);
}

.filter-buttons-container::-webkit-scrollbar {
    display: none;
}

/* Filter Buttons */
.filter-button {
    background-color: var(--button-background); /* #ffffff */
    color: var(--button-text-color); /* #333333 */
    border: 1px solid var(--button-border-color); /* #CCCCCC */
    border-radius: 25px;
    cursor: pointer;
    transition: background-color var(--transition-duration), transform var(--transition-duration);
    font-size: clamp(0.9em, 1.5vw, 1.3em); /* Responsive font size */
    flex: 1 0 calc(33.33% - 15px);
    text-align: center;
    box-sizing: border-box;
    font-family: var(--font-body);
    height: 30px; /* Example height */
}

.filter-button.selected,
.filter-button:hover {
    background-color: var(--button-hover-background); /* #f0f0f0 */
    color: var(--button-text-color); /* #333333 */
    border: 1px solid var(--button-border-color); /* #CCCCCC */
}

/* Filters Buttons Row */
.filters-buttons-row {
    padding-top: 10px;
    display: flex;
    justify-content: flex-start;
    align-items: flex-start;
    gap: 10px;
    font-family: var(--font-body);
}

/* Filter Action Button */
.filter-action-button {
    display: flex;
    align-items: center;
    background-color: var(--background-dark); /* #ffffff */
    color: var(--text-color); /* #333333 */
    padding: 10px 20px;
    margin: 5px;
    border: 1px solid var(--button-border-color); /* #CCCCCC */
    border-radius: 3px;
    font-size: 1em;
    cursor: pointer;
    transition: background-color var(--transition-duration), box-shadow var(--transition-duration) ease;
    font-family: var(--font-body);
    line-height: 1;
    min-height: var(--big-button-height);
    align-self: center;
    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.3); /* Subtle shadow for depth */
}

.filter-action-button:hover {
    background-color: var(--button-hover-background); /* #f0f0f0 */
    color: var(--button-text-color); /* #333333 */
    border: 1px solid var(--button-border-color); /* #CCCCCC */
}

.filter-action-button:disabled {
    background-color: #ccc;
    cursor: not-allowed;
    opacity: 0.6;
}

/* Navigation Arrows */
.filter-nav-arrow {
    position: absolute;
    top: 65%;
    transform: translateY(-50%);
    width: var(--arrow-button-size);
    height: var(--arrow-button-size);
    background: transparent;
    border: none;
    color: var(--button-border-color); /* #CCCCCC */
    font-size: 1.5em;
    cursor: pointer;
    z-index: 5000;
    display: flex;
    align-items: center;
    justify-content: center;
    border-radius: 50%;
    transition: background-color 0.3s ease;
}

.filter-nav-arrow:hover {
    background-color: rgba(108, 107, 107, 0.6);
}

.filter-nav-arrow.left {
    left: 0;
}

.filter-nav-arrow.right {
    right: 0;
}

/* Hide arrows when not needed */
.filter-nav-arrow.hidden {
    display: none;
}

--- File: static\css\components\cards.css ---

/* =========================
   MOVIE CARD BASE STYLES
   ========================= */

   .movie-card {
    display: flex;
    flex-direction: column; /* Grid view stacks vertically */
    background-color: var(--movie-card-background);
    color: var(--secondary-text-color);
    border-radius: var(--border-radius-medium);
    overflow: hidden;
    box-shadow: 0 4px 8px var(--movie-card-hover-shadow);
    transition: transform var(--transition-duration) ease, box-shadow var(--transition-duration) ease;
    position: relative;
    background-size: cover;
    background-position: center;
    background-repeat: no-repeat;
    height: 100%;
}

/* LIST VIEW: Horizontal by default on bigger screens */
.movie-listings.list-view .movie-card {
    flex-direction: row;
    align-items: stretch;
    height: 500px; /* Adjust as needed for larger screens */
}


/* Hover Overlay */
.movie-card::before {
    content: '';
    position: absolute;
    top: 0; left: 0;
    width: 100%; height: 100%;
    background: var(--overlay-background);
    opacity: 1;
    transition: opacity var(--transition-duration) ease;
    z-index: 1;
}
.movie-card:hover::before {
    opacity: 0;
}

/* Content Wrapper */
.movie-content-wrapper {
    flex: 1;
    display: flex;
    flex-direction: column;
    justify-content: space-between;
    gap: var(--spacing-small);
    padding: var(--spacing-medium);
    background: rgba(0, 0, 0, 0.7);
    z-index: 2;
    border-radius: var(--border-radius-medium);
    position: relative;
}

.movie-listings.list-view .movie-content-wrapper {
    padding: var(--spacing-small);
    background: rgba(0, 0, 0, 0.8);
    flex-direction: row;
}

/* Info Wrapper */
.info-wrapper {
    display: flex;
    flex-direction: column;
    justify-content: flex-start;
    flex: 1;
}

.movie-listings.list-view .info-wrapper {
    flex-direction: column;
    justify-content: space-between;
    flex: 1;
}

/* Poster/Image Container */
.image-container {
    position: relative;
    width: var(--poster-width);  /* e.g., 300px or 50% */
    aspect-ratio: 2 / 3;
    overflow: hidden;
    border-radius: var(--border-radius-medium);
    transition: transform var(--transition-duration) ease;
}

.movie-listings.list-view .image-container {
    width: auto;
    aspect-ratio: auto;
    flex-shrink: 0;
    height: 100%;
    margin-right: var(--spacing-medium);
}

.image-container img {
    width: 100%;
    height: 100%;
    object-fit: cover;
    border-radius: var(--border-radius-medium);
    transition: transform var(--transition-duration) ease;
}

.movie-card:hover .image-container img {
    transform: scale(1.05);
}

/* Hover Title inside Poster */
.hover-title {
    position: absolute;
    font-size: var(--meta-data-font-size);
    bottom: 0;
    left: 0;
    width: 100%;
    background: var(--overlay-background);
    color: var(--secondary-text-color);
    text-align: center;
    padding: var(--spacing-small);
    opacity: 0;
    transition: opacity var(--transition-duration) ease-in-out;
}
.image-container:hover .hover-title {
    opacity: 1;
}

/* Info Section */
.info-section {
    display: flex;
    flex-direction: column;
    width: 100%;
    z-index: 2;
}

/* Title, Overview, Metadata, etc. */
.title-section.list-view {
    margin: 0;
    font-family: var(--font-heading);
    text-transform: uppercase;
    color: var(--secondary-text-color);
    text-overflow: ellipsis;
    overflow: hidden;
    white-space: nowrap;
}

/* 3) Overlay the main title at the top of the poster in grid view */
.movie-listings:not(.list-view) .movie-card .title-section {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    margin: 0;
    padding: var(--spacing-small);
    text-align: center;
    z-index: 5;

    background: rgba(0, 0, 0, 0.6);
    color: var(--secondary-text-color);
    text-transform: uppercase;
    font-size: var(--meta-data-font-size);
    font-size: var(--font-size-sm);
    white-space: normal;
    opacity: 1;    
}
.overview-section {

    padding-top: 2;
    padding-left: 2px;                        /* Provides spacing inside the section */    
    padding-right: 2px; 
    padding-bottom: 2px;                        /* Provides spacing inside the section */
    background: var(--overlay-background);
    border-radius: var(--border-radius-small); /* Rounded corners */
    color: var(--overview-color);           /* Sets text color to an accent color */
    line-height: 1.4;                     /* Improves readability with a 1.4 line height */
    position: relative;                   /* Allows for positioning relative to parent */
    
    font-size: var(--meta-data-font-size-medium);
    font-style: italic;
}

.movie-listings.list-view .movie-card .overview-section::before {

    background-color: var(--overlay-background);
    border-radius: var(--border-radius-small); /* Match parent border radius */
    color: var(--overview-color);

}


.overview-section p {
    margin: 0;
    color: var(--accent-color);
}
.overview-section a {
    color: var(--secondary-text-color);
    text-decoration: none;
    font-weight: bold;
    text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.9);
}


/* Metadata Section */
.metadata {
    display: flex;
    flex-direction: column;
    gap: var(--spacing-small);
    font-size: var(--meta-data-font-size);
    /* background-color: rgba(0, 0, 0, 0.6); */
    padding: 3px;
    border-radius: var(--border-radius-small);
}

.movie-listings.list-view .metadata {
    padding: var(--spacing-small);
    background-color: var(--overlay-background);
}

.metadata p {
    margin: 5px 0;
    color: var(--secondary-text-color);
    opacity: 1;
}

/* Inline Meta (Runtime, FSK, Rating, Release Date) */
.inline-meta {
    display: flex;
    flex-wrap: wrap;
    gap: var(--spacing-small);
    padding-top: var(--spacing-small);
    opacity: 0.9;
}

.meta-item {
    display: flex;
    align-items: center;
    font-size: var(--meta-data-font-size);
    margin-right: var(--spacing-small);
    opacity: 0.9;
}

.meta-item i {
    margin-right: 5px;
}
.meta-item span {
    font-size: var(--meta-data-font-size);
    color: var(--secondary-text-color);
}

/* Grid View: place .inline-meta inside poster, absolute */
/* .movie-listings:not(.list-view) .movie-card .inline-meta {
    display: flex;
    flex-direction: column;
    position: absolute;
    top: 20%;
    right: 10px;
    transform: translateY(-50%);
    background: rgba(0, 0, 0, 0.6);
    padding: var(--spacing-small);
    border-radius: var(--border-radius-small);
    z-index: 3;
    width: 25%;
} */
.movie-listings:not(.list-view) .movie-card .image-container {
    position: relative;
}

/* In List View, .inline-meta is static within the .info-section */
.movie-listings.list-view .movie-card .inline-meta {
    position: static;
    background: none;
    border: none;
    /* padding-top: 5px;
    padding-bottom: 5px; */
    margin: 0;
    width: 100%;
    border-top: 1px solid var(--button-border-color);
    border-bottom: 1px solid var(--button-border-color);
}

/* Responsive Adjustments: smaller font in meta if needed */
@media (max-width: var(--breakpoint-sm)) {
    .meta-item {
        font-size: 0.9em;
    }
    .metadata {
        padding: 0;
    }
}

/* Some tooltip definitions for .country-tooltip, etc. left out for brevity... */

/* =========================
   RESPONSIVE TWEAKS
   ========================= */

/* On mobile, we want a simpler view for list view. 
   If the user toggles list view at small screens, 
   let's stack the poster above the info. */
@media (max-width: 768px) {
    .movie-listings.list-view .movie-card {
        flex-direction: column; /* Stack vertically again */
        align-items: flex-start; /* Poster + text from the left */
        height: auto; /* Let height expand */
    }

    .movie-listings.list-view .image-container {
        width: 50%; /* Poster takes half width on mobile in list view */
        aspect-ratio: auto;
        height: auto; 
        margin-right: 0;
        margin-bottom: var(--spacing-small);
    }

    .movie-content-wrapper {
        padding: var(--spacing-small);
    }
}

/* Very small screens (max-width: 480px) might reduce poster further. */
@media (max-width: 480px) {
    .movie-listings.list-view .image-container {
        width: 40%; /* reduce further if needed */
    }

    .title-section h2 {
        font-size: 1em;
        max-width: 100%;
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
    }
}

--- File: static\css\components\carousel.css ---
/* Movie Carousel Section */
.movie-carousel-section {
    padding-top: 30px;
    background-color: var(--background-dark);
    text-align: center;
    position: relative;
}

.movie-carousel-section h2 {
    font-size: 1.2em;
    font-weight: 100;
    color: var(--text-light);
    z-index: 1;
    position: relative;
    font-family: var(--font-heading);
}

/* Swiper Container */
.swiper-container {
    width: 100%;
    padding-bottom: 10px;
    scrollbar-width: none;
    -ms-overflow-style: none;
}

.swiper-wrapper {
    display: flex;
    align-items: center;
}

/* Swiper Slides */
.swiper-slide {
    display: flex;
    justify-content: center;
    align-items: center;
    padding: 0 5px;
}
.swiper-button-next, 
.swiper-button-prev {
    --swiper-navigation-color: var(--accent-color); /* Replace with your desired color */
    opacity: 0.7; /* Fully opaque on hover */
    text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.8);
}
.swiper-button-next:hover,
.swiper-button-prev:hover {
    color: var(--secondary-color);
    opacity: 1; /* Fully opaque on hover */
}


/* Featured Movie Card */
.featured-movie-card {
    position: relative;
    width: 150px; /* Default size for larger screens */
    overflow: hidden;
    border-radius: 8px;
    transition: width 0.3s ease-in-out; /* Smooth resizing */
}

.featured-movie-card img {
    width: 100%;
    height: 100%;
    object-fit: cover;
    transition: transform var(--transition-duration);
}

.featured-movie-card:hover img {
    transform: scale(1.05);
}

.featured-movie-overlay {
    position: absolute;
    bottom: 0;
    left: 0;
    width: 100%;
    background: rgba(0, 0, 0, 0.6);
    color: var(--secondary-text-color);
    padding: 10px;
    box-sizing: border-box;
    opacity: 0;
    transition: opacity var(--transition-duration);
}

.featured-movie-card:hover .featured-movie-overlay {
    opacity: 1;
}

.featured-movie-overlay h3 {
    margin: 0;
    font-size: 1em;
}

.featured-movie-overlay .btn-secondary {
    display: inline-block;
    padding: 5px 10px;
    background-color: var(--accent-color);
    color: var(--text-light);
    border-radius: 4px;
    text-decoration: none;
    font-size: 0.8em;
    transition: background-color var(--transition-duration);
}

.featured-movie-overlay .btn-secondary:hover {
    background-color: var(--link-hover-color);
    color: var(--secondary-text-color);
}

/* Swiper Pagination Adjustment */
.swiper-pagination {
    position: absolute;
    bottom: 10px;
    left: 0;
    width: 100%;
    text-align: center;
    z-index: 10;
}

/* Responsive Adjustments */
@media (max-width: 1200px) {
    .featured-movie-card {
        width: 150px; /* Slightly smaller size on medium screens */
    }

    .movie-carousel-section h2 {
        font-size: 1.1em;
    }
}

@media (max-width: 768px) {
    .featured-movie-card {
        width: 120px; /* Smaller size on tablets */
    }

    .movie-carousel-section h2 {
        font-size: 1em;
    }

    .featured-movie-overlay h3 {
        font-size: 0.9em;
    }

    .featured-movie-overlay .btn-secondary {
        font-size: 0.75em;
    }
}

@media (max-width: 480px) {
    .featured-movie-card {
        width: 100px; /* Smallest size for mobile screens */
    }

    .movie-carousel-section h2 {
        font-size: 0.9em;
    }

    .featured-movie-overlay h3 {
        font-size: 0.8em;
    }

    .featured-movie-overlay .btn-secondary {
        font-size: 0.7em;
        padding: 4px 8px; /* Reduce padding for small screens */
    }
}

/* theme-fonts.css */
.theme-action { font-family: 'Impact', sans-serif; font-weight: bold; color: #ff4d4d; }
.theme-comedy { font-family: 'Comic Sans MS', cursive; color: #ffcc00; }
.theme-drama { font-family: 'Times New Roman', Times, serif; font-style: italic; color: #993300; }
.theme-sci-fi { font-family: 'Courier New', Courier, monospace; color: #00ccff; }
.theme-romance { font-family: 'Georgia', serif; color: #cc0066; }
.theme-horror { font-family: 'Creepster', cursive; color: #cc0000; }
.theme-thriller { font-family: 'Arial Black', sans-serif; color: #666666; }
.theme-animated { font-family: 'Chalkduster', cursive; color: #3399ff; }
.theme-family { font-family: 'Verdana', sans-serif; color: #66cc66; }
.theme-adventure { font-family: 'Trebuchet MS', sans-serif; color: #ff6600; }
.theme-crime { font-family: 'Lucida Console', Monaco, monospace; color: #333399; }
.theme-fantasy { font-family: 'Papyrus', sans-serif; color: #663399; }
.theme-mystery { font-family: 'Garamond', serif; color: #9933cc; }
.theme-documentary { font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #999999; }
.theme-biography { font-family: 'Palatino', 'Palatino Linotype', 'Book Antiqua', serif; color: #cc9900; }
.theme-war { font-family: 'Stencil Std', 'Stencil', sans-serif; color: #666600; }
.theme-western { font-family: 'Rockwell', serif; color: #cc6633; }
.theme-musical { font-family: 'Brush Script MT', cursive; color: #ff66cc; }
.theme-sport { font-family: 'Copperplate Gothic Bold', sans-serif; color: #009999; }
.theme-history { font-family: 'Baskerville', serif; color: #660000; }

--- File: static\css\components\dropdown.css ---
/* dropdown.css */

/* Main Filters Container */
.main-filters-container {
    display: flex;
    /* flex-direction: row; */
    justify-content: flex-start;
    align-items: center;
    gap: 10px;
    overflow-x: auto;
    width: 100%;
    /* box-sizing: border-box; */
    font-family: var(--font-body);
    scrollbar-width: none;
    -ms-overflow-style: none;
}

.main-filters-container::-webkit-scrollbar {
    display: none;
}

/* Custom Dropdowns */
.custom-dropdown {
    flex: 1 1 180px;
    min-width: 150px;
    max-width: 800px;
    position: relative;
    font-family: var(--font-body);

    border-radius: 3px;
    /* border: 1px solid var(--button-background); */
}

/* Dropdown Header */
.dropdown-header {
    
    justify-content: flex-start; /* Aligns the clear icon and badge to the left */
    flex-direction: column; /* For two-row layout */
    background-color: var(--background-dark); /* Adjust background color */
    color: var(--secondary-color); /* Use lighter text for better contrast */
    border-radius: 15px;
    cursor: pointer;
    font-size: clamp(1em, 0.9vw, 1.1em); /* Responsive font size */
    
    font-family: var(--font-body);
    position: relative;
    height: var(--big-button-height); /* Let height adjust based on content */
    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.3); /* Subtle shadow for depth */
    white-space: nowrap; /* Prevents wrapping inside the header */
    overflow: hidden; /* Prevents content from overflowing */
    z-index: 4000; /* Ensure this is lower than the autocomplete list */
}


.dropdown-header:hover {
    border: 1px solid var(--accent-color);
}

.dropdown-header.has-selection {
    /* Use your accent color (var(--accent-color)) 
       or some subtle highlight to show it's selected */
    outline: 2px solid var(--accent-color);
    /* Or change the background color, text color, etc. */
    background-color: rgba(255, 192, 0, 0.2); /* just an example */
}


.custom-dropdown.dropdown-open .dropdown-header {
    border-color: var(--accent-color);
}

/* Dropdown Header Icon and Text */
.dropdown-header .header-label {
    display: inline-flex;
    align-items: center;
    margin-bottom: 2px;
    font-size: clamp(0.8em, 1vw, 1.1em);
}

.dropdown-header .header-label i {
    padding: 5px 5px;
    font-size: clamp(1.7em, 2vw, 1.2em); /* Icon size is defined here */
    margin-right: 5px;
}


.dropdown-header .header-label span {
    font-size: clamp(1.2em, 0vw, 1.5em);
    font-weight: 100;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
    max-width: 150px;
}

/* Dropdown Arrow */
.dropdown-header::after {
    visibility: visible;

    font-family: 'Font Awesome 5 Free'; /* Ensure FontAwesome is used */
    font-weight: 900; /* Necessary to display the correct solid version of FontAwesome */
    font-size: clamp(1.1em, 1vw, 1.3em);
    color: var(--secondary-color);
    position: absolute;
    right: 12px;
    transition: transform var(--transition-duration) ease, color var(--transition-duration) ease;
}

.dropdown-header[aria-expanded="true"]::after {
    transform: rotate(180deg);
    color: var(--accent-color);
}

.selection-clear-container {
    display: flex;
    justify-content: space-between;
    align-items: center; /* This ensures the badge aligns with the center */
    width: 100%;
    position: relative; /* Added to contain the absolutely positioned badge */
}

/* Clear Icon */
.clear-icon {
    font-size: 10.4em;
    bottom: -10px; /* Aligns it vertically in the middle of the header */
    cursor: pointer;
    color: var(--accent-color);
    flex-shrink: 0; /* Prevent shrinking */
    position: absolute;
    right: 10px; /* Align to the far right */
    visibility:visible;
    opacity: 0;
    transition: opacity 0.3s ease, visibility 0.3s ease;
}

.clear-icon.visible {
    visibility: visible;
    opacity: 1;
}



/* Show Clear Icon and Badge When Items Are Selected */
.dropdown-header.has-selection .clear-icon,
.dropdown-header.has-selection {
    visibility: visible;
    opacity: 1;
}

/* Dropdown Lists Container */
.dropdown-lists-container {
    position: relative; /* Position absolutely within the container */
    /* top: ; */
    left: 0;
    width: 100%;
    background-color: var(--dropdown-background);
    z-index: 7000; /* Ensure it appears above other elements */
    box-sizing: border-box; /* Ensure consistent box model */
}

/* Dropdown List */
.dropdown-list {
    position: relative; /* Relative to the .dropdown-lists-container */
    width: 100%;
    max-height: 300px;
    overflow-y: auto;
    background-color: var(--dropdown-background);
    border-radius: 5px;
    box-shadow: 0 4px 8px rgba(0,0,0,0.3);
    z-index: 8000; /* Ensure it's above other elements */
    display: none; /* Hidden by default */
    transition: max-height 0.3s ease, opacity 0.3s ease;
    opacity: 0; /* Start with invisible state */
}

/* Show the dropdown list when active */
.dropdown-list.show {
    display: block;
    max-height: 500px; /* Adjust as needed */
    opacity: 1;
}

.dropdown-list::-webkit-scrollbar {
    display: none;
}

.filter-button.selected {
    background-color: var(--accent-color);
    color: #fff;
    border-color: var(--accent-color); 
  }

  .filter-button.used-up {
    opacity: 0.5;
    pointer-events: none;
    background-color: #aaa;
    /* or fully hide: display: none; */
  }
  

--- File: static\css\components\filter.css ---
/* filter.css */

.sidebar {
    width: var(--sidebar-width);
    padding: 20px;
    background-color: #fff;
    border-radius: 8px;
    box-shadow: 0 2px 8px rgba(0,0,0,0.1);
    margin-right: 20px;
}

.filter-section {
    margin-bottom: 30px;
}

.filter-section h4 {
    margin-bottom: 15px;
    font-size: 1.1rem;
    color: var(--secondary-color);
}

.filter-section ul {
    list-style: none;
}

.filter-section ul li {
    margin-bottom: 10px;
}

.filter-section ul li input[type="checkbox"] {
    margin-right: 10px;
    cursor: pointer;
}

.filter-section input[type="range"] {
    width: 100%;
    margin: 10px 0;
}

.filter-section span {
    display: block;
    text-align: right;
    font-size: 0.9rem;
    color: #666;
}

/* Responsive Adjustments handled in responsive.css */

--- File: static\css\components\forms.css ---
/* forms.css */

/* General Form Styles */
input[type="text"],
input[type="email"],
select,
textarea {
    width: 100%;
    padding: 12px 15px;
    border: 1px solid #bdc3c7;
    border-radius: 6px;
    background-color: #fff;
    font-size: 1rem;
    color: var(--text-color);
    transition: border-color 0.3s ease, box-shadow 0.3s ease;
}

input[type="text"]:focus,
input[type="email"]:focus,
select:focus,
textarea:focus {
    outline: none;
    border-color: var(--accent-color);
    box-shadow: 0 0 5px rgba(231, 76, 60, 0.5);
}

label {
    display: block;
    margin-bottom: 8px;
    color: var(--primary-color);
    font-weight: 600;
}

label span.required {
    color: #e74c3c; /* Red color for required fields */
}

.contact-form .form-group {
    margin-bottom: 20px;
}

--- File: static\css\components\pagination.css ---
/* Combined Top Bar Section */
.top-bar {
    display: flex;
    justify-content: space-between; /* Ensures even spacing between elements */
    align-items: center; /* Align items vertically */
    max-width: var(--catalog-width);
    margin: 0 auto;
    padding: 10px 20px; /* Add spacing as needed */
}
/* Headline Styling */
.view-toggle-headline {
    font-size: 0.7rem;
    color: var(--accent-color); /* White text */
    margin: 0;
    text-align: center;
}

/* Pagination Styling */
.pagination {
    display: flex;
    justify-content: center; /* Center the pagination */
    align-items: center;
    background-color: var(--background-dark);
    padding: 10px 0; /* Adjust padding */
    color: var(--text-light);
    border-top: 0.5px solid var(--button-background);
    flex: 1; /* Allow pagination to occupy central space */
    margin-left: 8px;
}

/* Pagination Navigation List */
.pagination nav ul {
    display: flex;
    justify-content: center;
    align-items: center;
    list-style: none;
    padding: 0;
    margin: 0;
}

/* Pagination Item Styling */
.pagination nav ul li {
    margin: 0 5px; /* Reduced spacing between items */
}

/* Pagination Links and Buttons */
.pagination nav ul li a,
.pagination nav ul li span {
    display: inline-block;
    padding: 8px 5px;
    background-color: var(--primary-color);
    color: var(--text-color);
    border-radius: 4px;
    text-decoration: none;
    transition: background-color var(--transition-duration), transform var(--transition-duration);
    min-width: 32px; /* Consistent button sizing */
    text-align: center;
    font-size: 1rem;
}

/* Hover and Active State */
.pagination nav ul li a:hover,
.pagination nav ul li span:hover {
    background-color: var(--accent-color);
    color: var(--text-color);
    transform: translateY(-2px); /* Subtle lift effect */
}

/* Active State for Current Page */
.pagination nav ul li.active span {
    background-color: var(--accent-color);
    color: var(--secondary-text-color);
    font-weight: bold;
    cursor: default;
}

/* Disabled State for Non-clickable Items */
.pagination nav ul li.disabled span,
.pagination ul li.disabled a {
    background-color: var(--muted-color); /* Muted color for disabled state */
    color: var(--secondary-text-color);
    cursor: not-allowed;
    border: 1px solid var(--border-color);
    pointer-events: none; /* Prevent interaction */
}

/* Optional: Ellipsis Styling */
.pagination nav ul li.ellipsis span {
    background: none;
    color: var(--secondary-text-color);
    cursor: default;
}

/* View Toggle Buttons Container */
.view-toggle-container {
    display: flex;
    gap: 10px;
    flex-shrink: 0; /* Prevent buttons from resizing */
    justify-content: flex-end; /* Align buttons to the right */
    align-items: center; /* Vertical alignment */
    margin-left: auto; /* Push the buttons to the far right */
    margin-right: 18px;
}

/* Toggle Button Styles */
.view-toggle-btn {
    background-color: var(--button-background); /* Button background */
    color: var(--button-text-color); /* Icon/text color */
    border: none;
    padding: 5px 15px;
    border-radius: var(--border-radius-medium);
    font-size: 1.5rem;
    cursor: pointer;
    transition: background-color 0.3s ease, color 0.3s ease;
}

/* Active/Pressed Button */
.view-toggle-btn.active,
.view-toggle-btn[aria-pressed="true"] {
    background-color: var(--highlight-color); /* Highlight for active button */
    color: var(--secondary-text-color); /* Ensure contrasting text color */
}

/* Button Hover & Focus States */
.view-toggle-btn:hover,
.view-toggle-btn:focus {
    background-color: var(--button-hover-background);
    outline: none;
}

/* Responsive Styles */
@media (max-width: 768px) {
    .top-bar {
        flex-direction: column; /* Stack pagination and toggle buttons */
        align-items: center;
        gap: 10px;
    }

    .pagination {
        order: 1; /* Place pagination first */
        margin-bottom: 10px; /* Add spacing */
    }

    .view-toggle-container {
        display: none;
        ;
    }
}

--- File: static\css\components\progress_indicator.css ---
/* Import the Google Font Anton */
@import url('https://fonts.googleapis.com/css?family=Anton');

/* Progress Indicator Styles */
.progress-indicator {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0.6); /* Semi-transparent overlay */
    display: none; /* Hidden by default */
    justify-content: center;
    align-items: center;
    flex-direction: column;
    z-index: 10000; /* Ensure it's on top of other elements */
}

/* Pulsing Loader */
.loader {
    width: 100px;
    height: 100px;
    border-radius: 50%;
    background: #FF6347; /* Use the accent color */
    box-shadow: 0 0 0 rgba(255, 99, 71, 0.4);
    animation: pulse 2s infinite;
}

@keyframes pulse {
    0% {
        transform: scale(0.95);
        box-shadow: 0 0 0 0 rgba(255, 99, 71, 0.7);
    }
    70% {
        transform: scale(1);
        box-shadow: 0 0 0 10px rgba(255, 99, 71, 0);
    }
    100% {
        transform: scale(0.95);
        box-shadow: 0 0 0 0 rgba(255, 99, 71, 0);
    }
}

/* Progress Indicator Text */
.progress-indicator p {
    margin-top: 15px;
    color: #ffffff; /* White text for better readability */
    font-size: 1.2em;
    text-align: center;
    font-family: 'Anton', sans-serif; /* Custom font */
    text-transform: uppercase;
    letter-spacing: 1px;
}

--- File: static\css\components\search.css ---
/* search.css */
/* File: static/css/components/search.css */

/* Search Dropdown Container */
.search-dropdown-container {
    position: relative; /* Ensure it's positioned */
    display: flex;
    flex-direction: column;
    align-items: stretch;
    width: 100%;
    background-color: var(--background-dark);
    padding: 10px;
    box-sizing: border-box;
    box-shadow: inset 0 0 10px rgba(0,0,0,0.5);
    backdrop-filter: blur(5px);
    transition: all var(--transition-duration) ease;
    font-family: var(--font-body);
    border-bottom: 1px solid var(--button-background);
    /* Ensure overflow is visible to allow dropdowns to appear */
    overflow: visible;
}

/* Search Box */
.search-container {
    position: relative;
    width: 100%;
    height: 45px;
    margin-bottom: 15px;
    border: none;
    border-radius: 10px;
    background-color: rgba(255, 255, 255, 0.1);
    backdrop-filter: blur(5px);
    box-shadow: inset 0 0 5px rgba(0,0,0,0.5);
    font-family: var(--font-body);
}

.search-container .search-icon {
    position: absolute;
    left: 20px;
    top: 50%;
    transform: translateY(-50%);
    color: var(--accent-color);
    font-size: 1.2em;
    pointer-events: none;
    transition: color var(--transition-duration) ease;
}

#search-box {
    width: 100%;
    height: 100%;
    padding: 0 50px;
    font-size: 1em;
    background: transparent;
    color: var(--text-color);
    border: none;
    border-radius: 10px;
    box-sizing: border-box;
    font-family: var(--font-body);
}

#search-box::placeholder {
    color: var(--text-color);
    font-style: italic;
}

#search-box:focus {
    outline: none;
    background-color: rgba(255, 255, 255, 0.2);
    transition: background-color var(--transition-duration) ease;
}

#clear-search {
    position: absolute;
    right: 20px;
    top: 50%;
    transform: translateY(-50%);
    font-size: 1.2em;
    cursor: pointer;
    color: var(--accent-color);
    visibility: hidden;
    opacity: 0;
    transition: visibility var(--transition-duration) ease, opacity var(--transition-duration) ease;
}

#clear-search.visible {
    visibility: visible;
    opacity: 1;
}
--- File: static\css\components\toggle_view.css ---
/* File: static/css/components/toggle-view.css */

/* Theme Toggle Button Styling */
.theme-toggle-btn {
    background-color: var(--button-background); /* #ffffff or #333333 in dark mode */
    color: var(--button-text-color); /* #333333 or #e0e0e0 in dark mode */
    border: 1px solid var(--button-border-color); /* #CCCCCC or #555555 in dark mode */
    border-radius: 5px;
    padding: 8px 12px;
    cursor: pointer;
    font-size: var(--toggle-button-size);
    transition: background-color var(--transition-duration) ease, color var(--transition-duration) ease, border-color var(--transition-duration) ease;
    display: flex;
    align-items: center;
    justify-content: center;
    margin-left: 20px; /* Adjust spacing as needed */
}

.theme-toggle-btn.active {
    background-color: var(--button-hover-background); /* #f0f0f0 or #444444 in dark mode */
    color: var(--button-text-color); /* #333333 or #e0e0e0 in dark mode */
    border-color: var(--button-border-color); /* #CCCCCC or #555555 in dark mode */
}

.theme-toggle-btn:hover {
    background-color: var(--button-hover-background); /* #f0f0f0 or #444444 in dark mode */
    color: var(--button-text-color); /* #333333 or #e0e0e0 in dark mode */
    border-color: var(--button-border-color); /* #CCCCCC or #555555 in dark mode */
}

.theme-toggle-btn:focus {
    outline: 2px solid var(--accent-color); /* Retain accent color for focus */
    outline-offset: 2px;
}

--- File: static\css\layout\footer.css ---
/* Footer styles */
footer {
    flex-shrink: 0;
    /* Existing footer styles */
    background-color: var(--footer-background);
    color: var(--text-color);
    text-align: center;
    padding: 30px 0;
    width: 100%;
}

footer .footer-content {
    max-width: var(--catalog-width);
    margin: 0 auto;
    padding: 10px;
}

footer .footer-content p {
    color: var(--text-color);
    font-size: 1rem;
    margin: 0;
}
--- File: static\css\layout\hero.css ---
/* hero.css */

.hero-carousel {
    margin-top: var(--header-height);
    position: relative;
    height: 70vh;
}

.hero-carousel .swiper-container {
    width: 100%;
    height: 100%;
}

.hero-carousel .swiper-slide {
    position: relative;
    background-size: cover;
    background-position: center;
    display: flex;
    align-items: center;
    justify-content: center;
}

.hero-carousel .overlay {
    background: rgba(0, 0, 0, 0.5);
    padding: 20px;
    border-radius: 8px;
    max-width: 500px;
    color: #fff;
    text-align: left;
}

.hero-carousel .overlay h2 {
    font-size: 2rem;
    margin-bottom: 10px;
}

.hero-carousel .overlay p {
    font-size: 1rem;
    margin-bottom: 15px;
}

.hero-carousel .overlay .btn {
    background-color: var(--primary-color);
    color: #fff;
    padding: 10px 20px;
    border-radius: 4px;
    transition: background-color 0.3s;
}

.hero-carousel .overlay .btn:hover {
    background-color: var(--button-hover);
}

/* Swiper Navigation Buttons */
.swiper-button-next,
.swiper-button-prev {
    color: #fff;
}

.swiper-pagination-bullet {
    background: #fff;
    opacity: 0.7;
}

.swiper-pagination-bullet-active {
    opacity: 1;
}

/* Responsive Adjustments handled in responsive.css */

--- File: static\css\layout\navbar.css ---
/* =========================
   NAVBAR CSS
   ========================= */

/* Main Navbar Container */
.navbar {
    display: flex;
    justify-content: space-between;
    align-items: center;
    background-color: var(--footer-background);
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    width: 100;
    box-sizing: border-box;
    height: 50px; /* Unified height for better mobile handling */
    padding: 0 10px;
    z-index: 1000;
    transition: transform 0.3s ease-in-out, box-shadow var(--transition-duration);
    box-shadow: 0 4px 8px var(--shadow-color);
    font-family: var(--font-body);
    will-change: transform; /* For smooth animations */
}

/* Navbar States */
.navbar.hidden {
    transform: translateY(-100%);
}

.navbar:hover {
    transform: translateY(0);
}

.navbar.shrunk {
    height: 40px;
}

/* Logo Section */
.logo {
    display: flex;
    align-items: center;
    font-size: 2rem;
    margin-right: 5px;
    transition: font-size var(--transition-duration);    
}

.logo a {
    text-decoration: none;
    color: var(--text-color);
    font-family: var(--font-heading);
}



.logo .sub-logo {
    font-size: 2rem;
    color: var(--accent-color);
    text-transform: lowercase;
}

/* Centered container */
.nav-center-title {
    display: flex;
    align-items: center;
    justify-content: center;
    position: absolute; /* Centers it relative to navbar */
    left: 50%; /* Centers horizontally */
    transform: translateX(-50%); /* Adjust for perfect centering */
    gap: 10px; /* Space between the image and title */
}

/* Logo image styling */
.logo-image {
    height: 40px; /* Adjust as needed for proper size */
    width: auto;
    display: block;
}

/* Theme title styling */
.theme-title {
    font-size: 16px;
    font-weight: bold;
    color: var(--secondary-color);
    text-align: center;
    font-family: var(--font-heading, 'Arial', sans-serif);
    white-space: nowrap; /* Prevent wrapping */
}

/* Theme Title Container */
.theme-title-container {
    display: flex; /* Enable Flexbox for internal alignment */
    align-items: flex-end; /* Align the title to the bottom of the container */
}




/* Navigation Links */
.nav-links {
    display: flex;
    justify-content: flex-end;
    align-items: center;
    gap: 20px;
    list-style: none;
    padding: 0;
    margin: 0;
}


/* Adjust the navigation links */
.nav-links li a {
    text-decoration: none;
    color: var(--secondary-color);
    font-size: 1rem;
    font-family: var(--font-body);
    transition: color var(--transition-duration), transform var(--transition-duration);
    margin-right: 20px; /* Add spacing between "verleih" and the toggle */
}

.nav-links li a:hover {
    color: var(--link-color);
    transform: translateY(-2px);
}

.nav-links li a.active {
    color: var(--link-color);
    font-weight: bold;
}

/* Menu Toggle (Hamburger Button) */
.menu-toggle {
    display: none;
    background: none;
    border: none;
    font-size: 1.5rem;
    color: var(--secondary-color);
    cursor: pointer;
    transition: transform var(--transition-duration);
}

.menu-toggle.active {
    transform: rotate(90deg);
}

/* Theme Toggle Button */
.theme-toggle-btn {
    background: none;
    border: none;
    font-size: 1.5rem;
    color: var(--secondary-color);
    cursor: pointer;
}

/* =========================
   RESPONSIVE STYLES
   ========================= */

/* Mobile Styles (max-width: 768px) */
@media (max-width: 768px) {
    .menu-toggle {
        display: block;
    }

    .nav-links {
        display: none;
        flex-direction: column;
        align-items: center;
        position: absolute;
        top: 50px;
        right: 0;
        width: 100%;
        background-color: var(--primary-color);
        z-index: 999;
        box-shadow: 0 4px 8px var(--shadow-color);
        padding: 10px 0;
    }



    .navbar {
        height: 50px;
    }

    .navbar.shrunk {
        height: 40px;
    }

    .navbar.hidden {
        top: -50px;
    }

    .mobile-footer-link {
        display: block;
        text-align: center;
        background-color: var(--primary-color);
        padding: 10px 0;
    }

    .mobile-footer-link a {
        color: var(--text-light);
        font-size: 1rem;
        text-decoration: none;
    }
    .nav-center-title .theme-title {
        font-size: 1rem;
    }   

}

/* Very Small Screens (max-width: 480px) */
@media (max-width: 480px) {
    .logo .main-logo {
        font-size: 1.6rem;
    }

    .logo .sub-logo {
        font-size: 1rem;
    }

    .nav-links li a {
        font-size: 1.1rem;
    }

    .nav-center-title .theme-title {
        font-size: 1rem;
    }
}

--- File: static\css\pages\about.css ---
/* about.css */

/* About Us Page Sections */
.about-history,
.about-mission,
.about-team,
.about-testimonials {
    padding: 60px 20px;
    background-color: #f9f9f9;
    text-align: center;
}

.about-history h2,
.about-mission h2,
.about-team h2,
.about-testimonials h2 {
    text-align: center;
    font-family: 'Cinzel', serif;
    margin-bottom: 30px;
    color: var(--primary-color);
}

.about-history p,
.about-mission p {
    max-width: 800px;
    margin: 0 auto 40px auto;
    line-height: 1.8;
    color: var(--secondary-text-color);
    font-size: 1.1rem;
}

.about-team {
    display: flex;
    flex-wrap: wrap;
    gap: 30px;
    justify-content: center;
}

.team-member {
    width: 220px;
    text-align: center;
    transition: transform 0.3s ease, box-shadow 0.3s ease;
}

.team-member:hover {
    transform: translateY(-5px);
    box-shadow: 0 6px 12px rgba(0, 0, 0, 0.2);
}

.team-member img {
    width: 100%;
    height: 220px;
    object-fit: cover;
    border-radius: 50%;
    margin-bottom: 15px;
    border: 3px solid var(--accent-color);
}

.team-member h3 {
    font-family: 'Cinzel', serif;
    margin-bottom: 5px;
    color: var(--primary-color);
    font-size: 1.4rem;
}

.team-member p {
    color: var(--secondary-text-color);
    font-size: 1rem;
}

.about-testimonials blockquote {
    max-width: 800px;
    margin: 40px auto;
    padding: 25px 20px;
    background-color: #fdfdfd;
    border-left: 5px solid var(--accent-color);
    position: relative;
    border-radius: 5px;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
}

.about-testimonials blockquote::before {
    content: "\201C"; /* Left double quotation mark */
    font-size: 3rem;
    position: absolute;
    left: 10px;
    top: -10px;
    color: var(--accent-color);
}

.about-testimonials p {
    margin-bottom: 10px;
    color: var(--secondary-text-color);
    font-size: 1.1rem;
}

.about-testimonials cite {
    display: block;
    text-align: right;
    color: #777;
    font-size: 1rem;
    margin-top: 10px;
}

/* Responsive Styles */
@media (max-width: 768px) {
    .about-history,
    .about-mission,
    .about-team,
    .about-testimonials {
        padding: 40px 15px;
    }

    .team-member {
        width: 180px;
    }

    .team-member img {
        height: 180px;
    }

    .about-testimonials blockquote {
        padding: 20px 15px;
    }
}

@media (max-width: 480px) {
    .about-history,
    .about-mission,
    .about-team,
    .about-testimonials {
        padding: 30px 10px;
    }

    .team-member {
        width: 150px;
    }

    .team-member img {
        height: 150px;
    }

    .about-testimonials blockquote {
        padding: 15px 10px;
    }

    .about-testimonials blockquote::before {
        font-size: 2rem;
        left: 5px;
        top: -5px;
    }

    .about-testimonials p {
        font-size: 1rem;
    }
}

--- File: static\css\pages\catalog.css ---
/* catalog.css */

/* Container for Movie Listings */
.movie-listings {
    display: grid;
    gap: 20px; /* spacing between cards */
    /* 
       The auto-fill approach will create new columns as long as there's room 
       for at least minmax(...) wide. 
     */
    grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
  
    /* optional:
       Set a maximum width if you want to avoid overly wide grids on huge displays */
    max-width: 98%;
    margin: 0 auto; /* center if you want margins on large screens */
  }

/* Media Query to Limit to 4 Columns on Large Screens */
@media (min-width: var(--breakint-lg)) {
    .movie-listings {
        grid-template-columns: repeat(8, 1fr);
    }
}

/* List View Styling */
.movie-listings.list-view {
    display: flex;
    flex-direction: column;
    gap: 20px;
}

/* Responsive Styles */

/* Tablet (Max Width: 1024px) */
@media (max-width: var(--breakpoint-md)) {
    .movie-listings {
        max-width: 1000px;
    }
}

/* Mobile (Max Width: 768px) */
@media (max-width: var(--breakpoint-sm)) {
    .movie-listings {
        grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
    }
}

/* Very Small Mobile (Max Width: 480px) */
@media (max-width: var(--breakpoint-xs)) {
    .movie-listings {
        grid-template-columns: repeat(auto-fill, minmax(150px, 1fr));
    }
}

--- File: static\css\pages\contact.css ---
/* contact.css */

/* Contact Information Section */
.contact-info {
    padding: 60px 20px;
    background-color: #fff;
    text-align: center;
}

.contact-info h2 {
    font-family: 'Cinzel', serif;
    margin-bottom: 30px;
    color: var(--primary-color);
    font-size: 2rem;
}

.contact-details {
    display: flex;
    flex-direction: column;
    gap: 20px;
    align-items: center;
    margin-bottom: 40px;
}

.contact-item {
    display: flex;
    align-items: center;
    gap: 15px;
    color: var(--secondary-text-color);
    font-size: 1.1rem;
}

.contact-item i {
    color: var(--accent-color);
    font-size: 1.8em;
}

.contact-map {
    max-width: 800px;
    margin: 0 auto;
    border: 2px solid #ddd;
    border-radius: 8px;
    overflow: hidden;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
}

/* Contact Form Section */
.contact-form-section {
    padding: 60px 20px;
    background-color: var(--background-color);
    text-align: center;
}

.contact-form-section h2 {
    font-family: 'Cinzel', serif;
    margin-bottom: 30px;
    color: var(--primary-color);
    font-size: 2rem;
}

.contact-form {
    max-width: 600px;
    margin: 0 auto;
    text-align: left;
}

.contact-form .form-group {
    margin-bottom: 25px;
}

.contact-form label {
    display: block;
    margin-bottom: 8px;
    color: var(--primary-color);
    font-weight: 600;
}

.contact-form label span.required {
    color: #e74c3c; /* Red color for required fields */
}

.contact-form input,
.contact-form textarea {
    width: 100%;
    padding: 12px 15px;
    border: 1px solid #bdc3c7;
    border-radius: 6px;
    background-color: #fff;
    font-size: 1rem;
    color: var(--text-color);
    transition: border-color 0.3s ease, box-shadow 0.3s ease;
}

.contact-form input:focus,
.contact-form textarea:focus {
    outline: none;
    border-color: var(--accent-color);
    box-shadow: 0 0 5px rgba(231, 76, 60, 0.5);
}

.contact-form button {
    width: 100%;
    padding: 12px 20px;
    background-color: var(--primary-color);
    color: #fff;
    border: none;
    cursor: pointer;
    font-weight: 600;
    border-radius: 8px;
    transition: background-color 0.3s ease, transform 0.3s ease;
    font-size: 1.1rem;
}

.contact-form button:hover {
    background-color: #555;
    transform: translateY(-2px);
}

--- File: static\css\pages\events.css ---
/* events.css */

/* Events Calendar Section */
.events-calendar {
    padding: 60px 20px;
    background-color: #fff;
}

.events-calendar h2 {
    text-align: center;
    font-family: 'Cinzel', serif;
    margin-bottom: 40px;
    color: var(--primary-color);
    font-size: 2rem;
}

.event {
    border: 1px solid #ddd;
    padding: 25px 20px;
    margin-bottom: 25px;
    border-radius: 8px;
    background-color: #fdfdfd;
    transition: transform 0.3s ease, box-shadow 0.3s ease;
}

.event:hover {
    transform: translateY(-5px);
    box-shadow: 0 6px 12px rgba(0, 0, 0, 0.2);
}

.event h3 {
    margin-bottom: 15px;
    color: var(--primary-color);
    font-family: 'Cinzel', serif;
    font-size: 1.6rem;
}

.event p {
    margin-bottom: 10px;
    color: var(--secondary-text-color);
    font-size: 1.1rem;
}

.event .btn {
    margin-top: 15px;
    background-color: var(--primary-color);
    color: #fff;
    padding: 10px 20px;
    border: none;
    cursor: pointer;
    font-weight: 600;
    border-radius: 6px;
    transition: background-color 0.3s ease, transform 0.3s ease;
    font-size: 1rem;
}

.event .btn:hover {
    background-color: #555;
    transform: translateY(-2px);
}

/* Calendar View Section */
.calendar-view {
    padding: 60px 20px;
    background-color: var(--background-color);
    text-align: center;
}

.calendar-view h2 {
    font-family: 'Cinzel', serif;
    margin-bottom: 30px;
    color: var(--primary-color);
    font-size: 2rem;
}

#calendar {
    background-color: #fff;
    border: 1px solid #ddd;
    padding: 40px;
    border-radius: 8px;
    color: var(--secondary-text-color);
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
}

/* Responsive Styles */
@media (max-width: 768px) {
    .events-calendar {
        padding: 40px 15px;
    }

    .event {
        padding: 20px 15px;
    }

    .calendar-view {
        padding: 40px 15px;
    }

    #calendar {
        padding: 30px;
    }
}

@media (max-width: 480px) {
    .events-calendar {
        padding: 30px 10px;
    }

    .event {
        padding: 15px 10px;
    }

    .calendar-view {
        padding: 30px 10px;
    }

    #calendar {
        padding: 20px;
    }
}

--- File: static\css\pages\movie_details.css ---
/* Body Styling */
body {
    background-color: var(--background-color);
    color: var(--text-color);
    font-family: var(--font-body);
    transition: background-color var(--transition-duration) ease, color var(--transition-duration) ease;
    overflow-x: hidden;
}

/* Flex container to hold header, main, and footer */
.page-container {
    display: flex;
    flex-direction: column;
    min-height: 100vh;
}

/* Header Styling */
header {
    background-color: var(--header-background);
    padding: var(--spacing-medium) var(--spacing-large);
}



.logo a {
    font-family: var(--font-cursive);
    font-size: var(--meta-data-font-size-big);
    color: var(--accent-color);
    text-decoration: none;
    margin-right: var(--spacing-large);
}

.sub-logo {
    font-family: var(--font-heading);
    font-size: var(--meta-data-font-size-big);
    color: var(--secondary-color);
    text-decoration: none;
}

  

.nav-center-title .theme-title {
    font-family: var(--font-heading);
    font-size: var(--meta-data-font-size-big);
}

/* Movie Details Section */
.movie-details {
    position: relative;
    display: flex;
    flex-direction: column;
    align-items: center;
    background-color: inherit;
    color: inherit;
}

/* Backdrop Carousel */
.backdrop-carousel {
    position: relative;
    top: 10px;
    width: 100%;
    height: 70vh;
    overflow: hidden;
    background-color: var(--background-color);
}

.swiper-wrapper-container {
    width: 100%;
    height: 100%;
    overflow: hidden;
}

.swiper-container {
    width: 100%;
    height: 100%;
    position: relative;
}

.swiper-slide {
    display: flex;
    justify-content: center;
    align-items: center;
}

.swiper-slide img {
    width: 100%;
    height: 100%;
    object-fit: cover;
    object-position: top;
}


/* Poster and Content Container */
.poster-content-container {
    position: relative;
    /* max-width: var(--catalog-width); */
    width: 100%;
    margin: -20vh auto 0; /* Centers horizontally */
    /* margin-left: 15px; */
    display: flex;
    align-items: flex-start;
    padding: 0 calc(var(--spacing-large) * 2); /* Increases horizontal padding */
}



/* Poster Styling */
.wrap-poster {
    flex: 0 0 clamp(25%, 100px, 35%); /* Adapts based on screen size and zoom */
    max-width: 55%; /* Keeps poster size relative to the parent container */
    margin-right: var(--spacing-large);
    border-radius: var(--border-radius-medium);
    overflow: hidden;
    box-shadow: 0 8px 16px rgba(0, 0, 0, 0.2);
    background-color: var(--movie-card-background);
    position: relative;
    transition: transform var(--transition-duration) ease;
    z-index: 10;
}

.wrap-poster img {
    width: 100%;
    height: auto;
    display: block;
}

.wrap-poster:hover {
    transform: translateY(-10px);
}
/* Play Trailer Overlay */
.play-trailer-overlay {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    display: flex;
    align-items: center;
    justify-content: center;
    width: 50px;
    height: 50px;
    background-color: rgba(0, 0, 0, 0.7); /* Dark semi-transparent background */
    border-radius: 50%; /* Circular shape */
    color: var(--secondary-text-color); /* Icon/Text color */
    opacity: 0.9;
    transition: opacity var(--transition-duration) ease;
    text-decoration: none;
    font-size: var(--meta-data-font-size);
}

/* Play Movie Overlay - Slightly Different Style */
.play-movie-overlay {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    display: flex;
    align-items: center;
    justify-content: center;
    width: 80px; /* Slightly larger than the trailer overlay */
    height: 80px;
    background-color: var(--accent-color); /* Red semi-transparent background */
    border-radius: 50%; /* Circular shape */
    color: var(--secondary-color); /* Icon/Text color */
    opacity: 0.8;
    transition: opacity var(--transition-duration) ease, transform var(--transition-duration) ease;
    text-decoration: none;
    font-size: var(--meta-data-font-size-big);
}

/* Hover Effects */
.wrap-poster:hover .play-trailer-overlay {
    opacity: 1; /* Fully visible on hover */
}

.wrap-poster:hover .play-movie-overlay {
    opacity: 1; /* Fully visible on hover */
    transform: translate(-50%, -50%) scale(1.1); /* Slight zoom-in effect */
}

/* Ensure play icons align perfectly */
.play-trailer-overlay i,
.play-movie-overlay i {
    margin: 0;
}
/* Similar Movies Button Styling */
.find-similar-button {
    display: inline-block;
    padding: 12px 25px;
    background-color: var(--secondary-color); /* Uses your accent color variable */
    color: var(--accent-color);
    border: none;
    border-radius: 5px;
    font-size: 1.1rem;
    font-weight: bold;
    text-decoration: none;
    text-align: center;
    transition: background-color 0.3s ease, transform 0.3s ease, box-shadow 0.3s ease;
    margin-top: 20px;
}

.find-similar-button:hover,
.find-similar-button:focus {
    background-color: var(--highlight-color); /* A contrasting shade defined in your variables */
    transform: scale(1.05);
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3);
}



.movie-title {
    font-family: var(--font-heading);
    font-size: var(--meta-data-font-size-big);
    margin-top: 20vh;
    margin-bottom: var(--spacing-small);
}

.release-year {
    font-size: var(--meta-data-font-size-big);
    color: var(--secondary-secondary-text-color);
}

.original-title {
    font-size: var(--meta-data-font-size);
    font-style: italic;
    margin-bottom: var(--spacing-medium);
    color: var(--secondary-secondary-text-color);
}

.movie-info {
    display: flex;
    flex-wrap: wrap;
    gap: var(--spacing-medium);
    margin-bottom: var(--spacing-large);
}

.info-item {
    display: flex;
    align-items: center;
    width: calc(50% - var(--spacing-medium));
}

.info-item i {
    margin-right: var(--spacing-small);
    color: var(--accent-color);
}
.info-item span {
    font-size: var(--meta-data-font-size); /* Unifies font size */
    color: var(--text-color); /* Ensures consistent color */
    line-height: 1.4; /* Improves readability */
}

.info-text {
    font-size: var(--meta-data-font-size);
    color: var(--background-color);
}

.additional-info {

    font-size: var(--meta-data-font-size); /* Adaptive font size */
    line-height: 1.8;

}

.additional-info p {
    margin-bottom: var(--spacing-medium);
    color: var(--text-color);
}

.additional-info strong {
    color: var(--accent-color);
}

.overview {
    font-style: italic;
    margin-bottom: var(--spacing-large);
}

.actors {
    margin-bottom: var(--spacing-medium);
}

.wiki-critics,
.wiki-background {
    margin-bottom: var(--spacing-medium);
}
/* Remove default Swiper button background images */
.swiper-button-next::after,
.swiper-button-prev::after {
    display: none; /* Hide the pseudo-elements */
    content: none; /* Ensure no content is displayed */
}

/* Swiper Navigation Buttons */
.swiper-button-next,
.swiper-button-prev {
    position: absolute;
    top: 50%;
    width: 44px;
    height: 44px;
    margin-top: -22px; /* Center vertically */
    z-index: 1000;
    cursor: pointer;
    background: none; /* Remove any background */
    border: none; /* Remove border */
    display: flex;
    align-items: center;
    justify-content: center;
    color: var(--secondary-text-color); /* Icon color */
    transition: color var(--transition-duration) ease;
}

/* Positioning */
.swiper-button-next {
    right: 20px;
}

.swiper-button-prev {
    left: 20px;
}

/* Hover Effects */
.swiper-button-next:hover,
.swiper-button-prev:hover {
    color: var(--accent-color); /* Change icon color on hover */
}

/* Optional: Adjust Icon Size */
.swiper-button-next i,
.swiper-button-prev i {
    font-size: var(--meta-data-font-size);
}

/* Swiper Pagination */
.swiper-pagination {
    bottom: 20px !important;
}

.swiper-pagination-bullet {
    background: var(--secondary-text-color);
    opacity: 0.7;
}

.swiper-pagination-bullet-active {
    background: var(--accent-color);
    opacity: 1;
}

/* Footer Styling */
footer {
    background-color: var(--footer-background);
    padding: var(--spacing-large);
    text-align: center;
    margin-top: auto;
}

.footer-content p {
    margin: 0;
    color: var(--secondary-secondary-text-color);
    font-size: var(--meta-data-font-size);
}

/* Responsive Styles */
@media (max-width: 991px) {
    .movie-title {
        margin-top: 0px;
    }
    .poster-content-container {
        flex-direction: column;
        align-items: center;
        margin-top: -10vh;
        padding: 0 var(--spacing-medium);
    }

    .wrap-poster {
        margin-right: 0;
        margin-bottom: var(--spacing-large);
    }

    .content-wrap {
        text-align: center;
    }

    .movie-info {
        flex-direction: column;
        align-items: center;
    }

    .info-item {
        font-size: var(--meta-data-font-size);
        width: 100%;
        justify-content: center;
    }
}

@media (max-width: 575px) {
    .movie-title {
        font-size: var(--meta-data-font-size);
        margin-top: 0px;
    }


    .release-year {
        font-size: var(--meta-data-font-size);
    }

    .original-title {
        font-size: var(--meta-data-font-size);
    }

    .additional-info {
        font-size: var(--meta-data-font-size);
    }

    .swiper-button-next,
    .swiper-button-prev {
        width: 36px;
        height: 36px;
        margin-top: -18px;
    }
    /* Poster Styling */
    .wrap-poster {
        flex: 0 0 50%;

    }    
}

.person-tooltip:hover::after {
    content: attr(data-person-name);
    position: absolute;
    top: -30px; /* Adjust as needed to position above the link */
    left: 50%;
    transform: translateX(-50%);
    background-color: rgba(0, 0, 0, 0.75);
    color: #fff;
    padding: 5px 10px;
    border-radius: 4px;
    white-space: nowrap;
    z-index: 1000; /* Ensure tooltip is above other elements */
}

.play-movie-container {
    text-align: center;
    margin-top: 20px;
}

.play-movie-button {
    display: inline-block;
    padding: 10px 20px;
    background-color: #ff5722; /* Accent color */
    color: #fff;
    text-decoration: none;
    font-size: var(--meta-data-font-size);
    border-radius: 5px;
    transition: background-color 0.3s ease;
}

.play-movie-button:hover {
    background-color: #e64a19;
}

--- File: static\js\carousel.js ---
// File: static/js/carousel.js

import { carouselTitle, genreFontMapping } from './entry.js';
import { getSelectedValues } from './filter.js';

export function initializeSwiper() {

    const swiperContainer = document.querySelector('.swiper-container');
    if (!swiperContainer) {
        console.error("initializeSwiper: Swiper container not found.");
        return;
    }

    const totalSlides = swiperContainer.querySelectorAll('.swiper-slide').length;
    const slidesPerViewDesktop = 7; // Base number for desktop

    const swiper = new Swiper('.swiper-container', {
        loop: totalSlides > slidesPerViewDesktop,
        autoplay: {
            delay: 5000,
            disableOnInteraction: false,
        },
        navigation: {
            nextEl: '.swiper-button-next',
            prevEl: '.swiper-button-prev',
        },
        slidesPerView: 1, // Set default slides per view
        spaceBetween: 10,
        watchOverflow: true, // Disable Swiper if not enough slides

        simulateTouch: true,
        touchRatio: 1,
        touchAngle: 45,
        longSwipes: true,
        longSwipesRatio: 0.5,
        longSwipesMs: 300,
        followFinger: true,
        allowTouchMove: true,

        // Responsive breakpoints
        breakpoints: {
            2200: {
                slidesPerView: 13,
                spaceBetween: 10,
            },
            2000: {
                slidesPerView: 14,
                spaceBetween: 10,
            },
            1800: {
                slidesPerView: 10,
                spaceBetween: 10,
            },
            1600: {
                slidesPerView: 9,
                spaceBetween: 10,
            },
            1400: {
                slidesPerView: 8,
                spaceBetween: 10,
            },
            1200: {
                slidesPerView: 7,
                spaceBetween: 10,
            },
            1024: {
                slidesPerView: 6.5,
                spaceBetween: 5,
            },
            900: {
                slidesPerView: 6,
                spaceBetween: 10,
            },
            768: {
                slidesPerView: 5.5,
                spaceBetween: 10,
            },
            640: {
                slidesPerView: 5,
                spaceBetween: 10,
            },
            450: {
                slidesPerView: 4,
                spaceBetween: 10,
            },            
            0: {
                slidesPerView: 3.5,
                spaceBetween: 10,
            },
        },

        on: {
            resize: function () {
                this.update(); // Update Swiper on window resize
            },
            init: function () {
                if (totalSlides <= this.params.slidesPerView) {
                    this.loopDestroy(); // Disable loop if not enough slides
                }
            },
        },
    });
}

/**
 * Function to update the carousel title based on selected genre
 */
export function updateCarouselTitle() {
    const selectedGenres = getSelectedValues('genre-dropdown-list');
    if (selectedGenres.length === 1) {
        const genre = selectedGenres[0];
        carouselTitle.textContent = genreFontMapping[genre] ? `${genre} Filmtitel` : `${genre} Filme`;
        // Apply the corresponding font
        carouselTitle.style.fontFamily = genreFontMapping[genre] || "'Open Sans', sans-serif";
    } else if (selectedGenres.length > 1) {
        carouselTitle.textContent = "Verschiedene Genres";
        carouselTitle.style.fontFamily = "'Open Sans', sans-serif";
    } else {
        carouselTitle.textContent = "Hervorgehobene Filme";
        carouselTitle.style.fontFamily = "'Cinzel', serif";
    }
}

--- File: static\js\catalog.js ---
// File: static/js/catalog.js

import { triggerDropdownChangeEvent } from './filter.js';

/** Module-level variable to store current movies so we can re-render without refetching. */
export let currentMovies = [];

/**
 * Dynamically scale icon sizes (runtime, rating, fsk, etc.).
 */
function getIconSizeByType(typeval, type = "rating") {
    const minSize = 1;   // 1em for the smallest value
    const maxSize = 2.1; // 2.5em for the largest value

    let minVal, maxVal;

    // Define ranges based on the type
    if (type === "rating") {
        minVal = 5;   // Minimum rating is 5
        maxVal = 10;  // Maximum rating is 10
    } else if (type === "fsk") {
        minVal = 0;
        maxVal = 18;
    } else if (type === "runtime") {
        minVal = 60;
        maxVal = 180;
    } else {
        console.warn(`Unknown type: ${type}. Using default rating scale 0-10.`);
        minVal = 0;
        maxVal = 10;
    }

    // Clamp the actual value
    const clampedVal = Math.max(minVal, Math.min(typeval, maxVal));

    // Calculate the icon size as a ratio in 'em'
    const size = minSize + (clampedVal - minVal) * (maxSize - minSize) / (maxVal - minVal);
    return `${size.toFixed(2)}em`;
}

/**
 * On DOM load, parse ?search= from the URL.
 * If present, insert it into #search-box and trigger filter logic.
 */
document.addEventListener('DOMContentLoaded', () => {
    const params = new URLSearchParams(window.location.search);

    // 1) If there's `similar=...`, let 'updateFilters()' handle it
    const similarId = params.get('similar');
    if (similarId) {
        // We want to call updateFilters(1) anyway:
        // That function will see `similar=...` in the URL
        // and do a fetch to /filter_movies?similar=...
        triggerDropdownChangeEvent();
        return;
    }

    // 2) Otherwise, normal path:
    const searchQuery = params.get('search');
    if (searchQuery) {
        const searchBox = document.getElementById('search-box');
        const clearSearchBtn = document.getElementById('clear-search');
        if (searchBox) {
            console.log("Auto-filling search box with:", searchQuery);
            searchBox.value = searchQuery;

            if (clearSearchBtn) {
                if (searchQuery.length > 0) {
                    clearSearchBtn.classList.add('visible');
                } else {
                    clearSearchBtn.classList.remove('visible');
                }
            }
        }
    }

    // Trigger a normal filter update
    triggerDropdownChangeEvent();
});


/**
 * Renders movie listings in either list or grid view, depending on `.list-view` class.
 * - Called after fetching movies from server or toggling view.
 */
export function updateMovieListings(movies) {
    // Store the current movies array globally
    currentMovies = movies;
    console.log("updateMovieListings -> currentMovies:", currentMovies);

    // Identify the container
    const movieContainer = document.querySelector('.movie-listings');
    if (!movieContainer) {
        console.error("updateMovieListings: movieContainer not found.");
        return;
    }

    // Check if we are in list view or grid view
    const isListView = movieContainer.classList.contains('list-view');
    

    // Clear previous content
    movieContainer.innerHTML = "";

    // Handle empty list
    if (movies.length === 0) {
        movieContainer.innerHTML = `<p class="no-movies-message">No movies match the selected filters.</p>`;
        return;
    }

    movies.forEach(movie => {
        // Prepare paths
        const imagePath = `/movie_images/${encodeURIComponent(movie.folder_name || 'default')}/poster/poster_1.avif`;
        const defaultImagePath = '/static/images/default_movie.png';
    
        // Are we in list view or grid view?
        const isListView = movieContainer.classList.contains('list-view');
    
        // Create a clickable link wrapper
        const movieLink = document.createElement('a');
        movieLink.href = `/movie/${movie.movie_id}`;
        // Optional: add a class for styling or hover effects
        movieLink.className = 'movie-card-link';
        // Optional: add an ARIA label for accessibility
        movieLink.setAttribute('aria-label', `Details for ${movie.main_title}`);
    
        // Create the movie card
        const movieCard = document.createElement('div');
        movieCard.className = 'movie-card';
    
        // If in list view, set background to the backdrop
        if (isListView) {
            const backdropPath = `/movie_images/${encodeURIComponent(movie.folder_name || 'default')}/backdrop/backdrop_1.avif`;
            movieCard.style.backgroundImage = `url('${backdropPath}')`;
        }
    
        // Icon sizes
        const runtimeIconSize = getIconSizeByType(movie.runtime, "runtime");
        const fskIconSize     = getIconSizeByType(movie.fsk, "fsk");
        const ratingIconSize  = getIconSizeByType(movie.rating, "rating");

        const formatYearHtml = `
        <div class="meta-item">
            <i class="fas fa-hourglass-half" style="font-size:15px;"></i>
            <span>${movie.release_date}</span>
        </div>
    `;
         
    
        const formatRuntimeHtml = `
            <div class="meta-item">
                <i class="fas fa-clock" style="font-size:${runtimeIconSize};"></i>
                <span>${movie.runtime}</span>
            </div>
        `;
        const formatFskHtml = `
            <div class="meta-item">
                <i class="fas fa-child" style="font-size:${fskIconSize};"></i>
                <span>${movie.fsk}</span>
            </div>
        `;
        const formatRatingHtml = `
            <div class="meta-item">
                <i class="fas fa-star" style="font-size:${ratingIconSize};"></i>
                <span>${movie.rating}</span>
            </div>
        `;
    
        // Directors
        const directors = (Array.isArray(movie.director) && movie.director.length > 0)
            ? movie.director.join(', ')
            : "Unknown Director";
    
        // Actors: show 6 if list view, otherwise 2
        const maxActorsToShow = isListView ? 6 : 2;
        let actors = "";
        if (typeof movie.actors === 'string') {
            const actorArray = movie.actors.split(',').map(a => a.trim());
            actors = (actorArray.length > maxActorsToShow)
                ? actorArray.slice(0, maxActorsToShow).join(', ') + ', ...'
                : actorArray.join(', ');
        } else if (Array.isArray(movie.actors)) {
            actors = (movie.actors.length > maxActorsToShow)
                ? movie.actors.slice(0, maxActorsToShow).join(', ') + ', ...'
                : movie.actors.join(', ');
        }
    
        // Countries
        let countries = "Unknown Countries";
        if (Array.isArray(movie.countries) && movie.countries.length > 0) {
            countries = movie.countries.map(country => {
                const match = country.match(/(.*?)\s\((.*?)\)/);
                const fullName  = match ? match[1] : country;
                const shortCode = match ? match[2] : country;
                return `<span class="country-tooltip" data-country="${fullName}">${shortCode}</span>`;
            }).join(', ');
        }
    
        // Genres
        const genres = (Array.isArray(movie.genres) && movie.genres.length > 0)
            ? movie.genres.join(', ')
            : "Unknown Genres";
    
        // Content
        let content = "Keine Inhaltsangabe verfÃ¼gbar.";
        if (movie.format_inhalt && movie.format_inhalt.length >= 10) {
            content = movie.format_inhalt;
        } else if (movie.overview && movie.overview.length >= 10) {
            content = movie.overview;
        }
    
        // Truncate content
        let maxLength = isListView ? 300 : 150;
        if (content.length > maxLength) {
            content = content.substring(0, maxLength) + '...';
        }
    
        // Truncate main title
        maxLength = isListView ? 200 : 100;
        let main_title = movie.main_title || "Untitled";
        if (main_title.length > maxLength) {
            main_title = main_title.substring(0, maxLength) + '...';
        }
    
        // Build the card's inner HTML
        movieCard.innerHTML = `
            <div class="movie-content-wrapper">
                <div class="image-container">
                    <!-- Removed the <a> around the image so the entire card can be linked -->
                    <img src="${imagePath}" 
                         alt="${movie.main_title}"
                         onerror="this.onerror=null; this.src='${defaultImagePath}';"
                         loading="lazy">
                    <div class="hover-title">
                        <span><i class="fas fa-file-alt"></i> ${movie.original_title}</span>
                    </div>
                </div>
    
                <div class="info-wrapper">

                    ${
                        isListView
                        ? `
                    <div class="title-section">
                        <h2>${main_title}</h2>
                    </div>                        
                        <div class="overview-section">
                            <p>${content} 
                                <!-- 'mehr' link still points to details if you want it -->
                                <a href="/movie/${movie.movie_id}" class="more-link">mehr</a>
                            </p>
                        </div>
                        `
                        : ''
                    }
                    <div class="info-section">
                        <div class="metadata">
                            <p class="countries">
                                <strong><i class="fas fa-globe"></i></strong> ${countries}
                                | <strong><i class="fas fa-film"></i></strong> ${genres}
                            </p>
                            ${
                                isListView 
                                ? `
                                <p>
                                    <strong><i class="fas fa-video"></i></strong> ${directors}
                                </p>
                                <p>
                                    <strong><i class="fas fa-users"></i></strong> ${actors}
                                </p>
                                <p class="standort">
                                    ${
                                        movie.standort 
                                            ? `<strong><i class="fas fa-map-marker-alt"></i></strong> ${movie.standort}`
                                            : ''
                                    }
                                    ${
                                        movie.standort && movie.formats 
                                            ? ' | ' 
                                            : ''
                                    }
                                    ${
                                        movie.formats 
                                            ? `<strong><i class="fas fa-disc"></i></strong> ${movie.formats}`
                                            : ''
                                    }
                                </p>
                                `
                                : ''
                            }
                            <div class="inline-meta">
                                ${formatRatingHtml}
                                ${formatRuntimeHtml}
                                ${formatFskHtml}
                                ${formatYearHtml}
                            </div>

                        </div>
                    </div>
                </div>
            </div>
        `;
    
        // Append the .movie-card to the clickable link
        movieLink.appendChild(movieCard);
    
        // Finally, append the link to the container
        movieContainer.appendChild(movieLink);
    });
    
}

/**
 * Toggles between Grid view and List view, storing preference in localStorage.
 * Re-renders from currentMovies without refetching by default.
 */
export function toggleViews() {
    const gridViewBtn = document.getElementById('grid-view-btn');
    const listViewBtn = document.getElementById('list-view-btn');
    const movieListings = document.querySelector('.movie-listings');

    if (!gridViewBtn || !listViewBtn || !movieListings) {
        console.error("toggleViews: One or more elements not found.");
        return;
    }

    function activateGridView() {
        movieListings.classList.remove('list-view');
        gridViewBtn.classList.add('active');
        listViewBtn.classList.remove('active');
        gridViewBtn.setAttribute('aria-pressed', 'true');
        listViewBtn.setAttribute('aria-pressed', 'false');
        updateMovieListings(currentMovies); // Re-render
    }

    function activateListView() {
        movieListings.classList.add('list-view');
        listViewBtn.classList.add('active');
        gridViewBtn.classList.remove('active');
        listViewBtn.setAttribute('aria-pressed', 'true');
        gridViewBtn.setAttribute('aria-pressed', 'false');
        updateMovieListings(currentMovies); // Re-render
    }

    // Event Listeners for toggles
    gridViewBtn.addEventListener('click', () => {
        activateGridView();
        localStorage.setItem('movieView', 'grid');
    });

    listViewBtn.addEventListener('click', () => {
        activateListView();
        localStorage.setItem('movieView', 'list');
    });

    // On load, set the initial view from localStorage
    const savedView = localStorage.getItem('movieView');
    if (savedView === 'list') {
        activateListView();
    } else {
        activateGridView();
    }
}


--- File: static\js\entry.js ---
// File: static/js/entry.js

/** Cache Elements and Buttons */
export const clearSearchBtn = document.getElementById('clear-search');
export const searchBox = document.getElementById('search-box');
export const movieContainer = document.querySelector('.movie-listings');
export const topPaginationContainer = document.querySelector('.top-pagination nav ul');
export const bottomPaginationContainer = document.querySelector('.bottom-pagination nav ul');
export const progressIndicator = document.getElementById('progress-indicator');
export const carouselTitle = document.getElementById('carousel-title');
export const toggleFiltersButton = document.getElementById('toggle-filters-button');
export const searchDropdownContainer = document.querySelector('.search-dropdown-container');
export const clearAllFiltersButton = document.getElementById('clear-all-filters-button');
// New elements for advanced filters
export const toggleAdvancedFiltersButton = document.getElementById('toggle-advanced-filters-button');
export const advancedFiltersContainer = document.getElementById('advanced-filters-container');

/** Genre to Font Mapping */
export const genreFontMapping = {
    "Action": "'Anton', sans-serif",
    "Drama": "'Playfair Display', serif",
    "Family": "'Baloo 2', cursive", 
    "Comedy": "'Comic Sans MS', cursive, sans-serif",
    "Thriller": "'Roboto Slab', serif",
    "Horror": "'Creepster', cursive",
    "Sci-Fi": "'Orbitron', sans-serif",
    "Romance": "'Great Vibes', cursive",
    "Documentary": "'Merriweather', serif",
    "Fantasy": "'Goudy Bookletter 1911', serif"
};

/**
 * Function to show the progress indicator
 */
export function showProgressIndicator() {
    if (progressIndicator) {
        progressIndicator.style.display = 'flex'; // Show the Progress Indicator
        progressIndicator.setAttribute('aria-hidden', 'false');
    } else {
        console.error("showProgressIndicator: Progress Indicator Element not found.");
    }
}

/**
 * Function to hide the progress indicator
 */
export function hideProgressIndicator() {
    if (progressIndicator) {
        progressIndicator.style.display = 'none'; // Hide the Progress Indicator
        progressIndicator.setAttribute('aria-hidden', 'true');
    } else {
        console.error("hideProgressIndicator: Progress Indicator Element not found.");
    }
}

--- File: static\js\filter.js ---
// File: static/js/filter.js

// Import necessary elements and functions
import {
    searchBox,
    clearSearchBtn,
    toggleFiltersButton,
    searchDropdownContainer,
    clearAllFiltersButton,
    movieContainer,
    toggleAdvancedFiltersButton,
    advancedFiltersContainer
} from './entry.js';
import { updateCarouselTitle } from './carousel.js';
import { showProgressIndicator, hideProgressIndicator } from './entry.js';
import { updateMovieListings } from './catalog.js';
import { updatePagination } from './pagination.js';

let debounceTimer = null;
const AUTOCOMPLETE_DEBOUNCE_DELAY = 500; // milliseconds
const AUTOCOMPLETE_MIN_DIGITS = 2;

/**
 * Initialize the toggle functionality for the filter panel and advanced filters
 */
export function initializeFilterPanelToggle() {
    // Advanced Filters Toggle is now handled within the main filters
}

/**
 * Clear all filters and reset selections
 */
export function clearAllFilters() {
    // Clear selections in all dropdowns
    const filterButtons = document.querySelectorAll('.dropdown-list .filter-button.selected');
    filterButtons.forEach(button => {
        button.classList.remove('selected');
        button.disabled = false; // Re-enable if we previously disabled them
        button.classList.remove('used-up');
    });

    // Hide all clear icons if any
    const clearIcons = document.querySelectorAll('.clear-icon');
    clearIcons.forEach(icon => {
        icon.classList.remove('visible');
    });

    // If you had any "badge" elements to reset, do it here
    // e.g., .selection-badge or highlight on the dropdown header
    document.querySelectorAll('.dropdown-header.has-selection').forEach(header => {
        header.classList.remove('has-selection');
    });

    // For single-select dropdowns, re-select default if desired
    const singleSelectDropdowns = document.querySelectorAll('.dropdown-list.single-select');
    singleSelectDropdowns.forEach(dropdownList => {
        const buttonsContainer = dropdownList.querySelector('.filter-buttons-container');
        if (!buttonsContainer) return;
        const optionsArray = Array.from(buttonsContainer.children).map(btn => btn.dataset.value);
        // Example: look for 'Zufall' or default to first
        const defaultOption = optionsArray.find(label => label.toLowerCase() === 'zufall');
        const buttonToSelect = defaultOption
            ? buttonsContainer.querySelector(`.filter-button[data-value="${defaultOption}"]`)
            : buttonsContainer.firstElementChild;

        if (buttonToSelect) {
            buttonToSelect.classList.add('selected');
            buttonToSelect.disabled = false;
            buttonToSelect.classList.remove('used-up');
        }
    });

    // Clear search box
    if (searchBox) {
        searchBox.value = '';
        clearSearchBtn.classList.remove('visible');
        hideAutocompleteSuggestions();
    }

    // Trigger a filter update after everything is cleared
    triggerDropdownChangeEvent();
}

/**
 * Initialize event listeners for action buttons like "Clear All"
 */
export function initializeFilterActionButtons() {
    // Attach event listener to "Clear All" button
    if (clearAllFiltersButton) {
        clearAllFiltersButton.addEventListener('click', () => {
            clearAllFilters();
        });

        // Ensure the button is accessible via keyboard
        clearAllFiltersButton.addEventListener('keydown', (event) => {
            if (event.key === 'Enter' || event.key === ' ') {
                event.preventDefault();
                clearAllFilters();
            }
        });
    } else {
        console.error("initializeFilterActionButtons: clearAllFiltersButton element not found.");
    }
}

/**
 * Main initialization for filter dropdowns and search box
 */
export function initializeFilterDropdowns() {
    // Handle filter updates triggered by our custom 'dropdownChange' event
    document.addEventListener('dropdownChange', () => {
        updateFilters();
    });

    // Search box input event with debouncing
    if (searchBox) {
        searchBox.addEventListener('input', () => {
            // Show/hide clear icon based on current text
            if (searchBox.value.length > 0) {
                clearSearchBtn.classList.add('visible');
            } else {
                clearSearchBtn.classList.remove('visible');
            }

            clearTimeout(debounceTimer);
            debounceTimer = setTimeout(() => {
                if (searchBox.value.length >= AUTOCOMPLETE_MIN_DIGITS) {
                    handleAutocomplete();
                } else {
                    hideAutocompleteSuggestions();
                }
            }, AUTOCOMPLETE_DEBOUNCE_DELAY);
        });
    } else {
        console.error("initializeFilterDropdowns: searchBox element not found.");
    }

    // Clear icon click
    if (clearSearchBtn && searchBox) {
        clearSearchBtn.addEventListener('click', () => {
            // 1) Empty the search box
            searchBox.value = '';
            // 2) Hide the clear icon
            clearSearchBtn.classList.remove('visible');
            // 3) Hide autocomplete
            hideAutocompleteSuggestions();
            // 4) Trigger update
            triggerDropdownChangeEvent();
        });
    }

    // Attach event listeners to dropdowns using event delegation
    attachDropdownEventDelegation();

    // We no longer need arrow-based filter navigation => remove or comment out
    // triggerDropdownChangeEvent() on page load
    triggerDropdownChangeEvent();
}

/**
 * Attach event listeners to dropdowns (header + options)
 */
export function attachDropdownEventDelegation() {
    const dropdownHeaders = document.querySelectorAll('.dropdown-header');
    const dropdownLists = document.querySelectorAll('.dropdown-list');

    // Helper to open/close the dropdown
    function toggleDropdown(targetDropdown, header) {
        const isVisible = targetDropdown.classList.contains('show');
        if (isVisible) {
            targetDropdown.classList.remove('show');
            header.setAttribute('aria-expanded', 'false');
        } else {
            // Close other open dropdowns
            document.querySelectorAll('.dropdown-list.show').forEach(list => {
                list.classList.remove('show');
                document
                    .querySelector(`.dropdown-header[data-target="${list.id}"]`)
                    ?.setAttribute('aria-expanded', 'false');
            });
            targetDropdown.classList.add('show');
            header.setAttribute('aria-expanded', 'true');
        }
    }

    // Handle selection of dropdown items
    function handleDropdownSelection(dropdownList, target) {
        const isSingleSelect = dropdownList.classList.contains('single-select');
        if (isSingleSelect) {
            dropdownList.querySelectorAll('.filter-button').forEach(btn => {
                btn.classList.remove('selected');
                btn.disabled = false;
                btn.classList.remove('used-up');
            });
            target.classList.add('selected');
        } else {
            target.classList.toggle('selected');
        }

        // Optionally disable the button if selected
        if (target.classList.contains('selected')) {
            target.disabled = true;
            target.classList.add('used-up'); // visually indicate it's used
        } else {
            target.disabled = false;
            target.classList.remove('used-up');
        }

        // Highlight the dropdown header if there's a selection
        const selectedValues = getSelectedValuesFromDOM(dropdownList);
        toggleHeaderHighlight(dropdownList, selectedValues);

        // Trigger an update
        triggerDropdownChangeEvent();
    }

    function getSelectedValuesFromDOM(dropdownList) {
        const selectedButtons = dropdownList.querySelectorAll('.filter-button.selected');
        return Array.from(selectedButtons).map(btn => btn.dataset.value);
    }

    // Clear all selected items in a dropdown (if you have a dedicated "clear" button)
    function clearDropdownSelection(dropdownList) {
        const selectedButtons = dropdownList.querySelectorAll('.filter-button.selected');
        selectedButtons.forEach(button => {
            button.classList.remove('selected');
            button.disabled = false;
            button.classList.remove('used-up');
        });

        const selectedValues = [];
        toggleHeaderHighlight(dropdownList, selectedValues);

        // Trigger an update after clearing
        triggerDropdownChangeEvent();
    }

    // 1) Dropdown header click: ONLY toggles open/close
    dropdownHeaders.forEach(header => {
        header.addEventListener('click', (event) => {
            event.stopPropagation();
            const targetDropdownId = header.getAttribute('data-target');
            const targetDropdown = document.getElementById(targetDropdownId);
            if (targetDropdown) {
                toggleDropdown(targetDropdown, header);
            }
        });

        // (Optional) Keyboard accessibility
        header.addEventListener('keydown', (event) => {
            if (event.key === 'Enter' || event.key === ' ') {
                event.preventDefault();
                event.stopPropagation();
                const targetDropdownId = header.getAttribute('data-target');
                const targetDropdown = document.getElementById(targetDropdownId);
                if (targetDropdown) {
                    toggleDropdown(targetDropdown, header);
                }
            }
        });
    });

    // 2) Filter-button clicks inside the dropdown
    dropdownLists.forEach(dropdownList => {
        dropdownList.addEventListener('click', (event) => {
            const target = event.target;
            if (target && target.classList.contains('filter-button')) {
                event.preventDefault();
                handleDropdownSelection(dropdownList, target);
            }
        });

        // If you have a separate clear button inside the dropdown header
        const dropdownHeader = document.querySelector(`.dropdown-header[data-target="${dropdownList.id}"]`);
        const clearButton = dropdownHeader?.querySelector('.clear-icon');

        if (clearButton) {
            clearButton.addEventListener('click', (event) => {
                event.stopPropagation();
                clearDropdownSelection(dropdownList);
            });

            clearButton.addEventListener('keydown', (event) => {
                if (event.key === 'Enter' || event.key === ' ') {
                    event.preventDefault();
                    clearDropdownSelection(dropdownList);
                }
            });
        }
    });

    // 3) Close dropdowns when clicking outside
    document.addEventListener('click', (event) => {
        dropdownLists.forEach(dropdownList => {
            const header = document.querySelector(`.dropdown-header[data-target="${dropdownList.id}"]`);
            if (header && !header.contains(event.target) && !dropdownList.contains(event.target)) {
                dropdownList.classList.remove('show');
                header.setAttribute('aria-expanded', 'false');
            }
        });
    });
}

/**
 * Highlights/unhighlights the dropdown header if there are selected values.
 */
function toggleHeaderHighlight(dropdownList, selectedValues) {
    const dropdownHeader = document.querySelector(`.dropdown-header[data-target="${dropdownList.id}"]`);
    if (!dropdownHeader) return;
    if (selectedValues.length > 0) {
        dropdownHeader.classList.add('has-selection');
    } else {
        dropdownHeader.classList.remove('has-selection');
    }
}

/**
 * Helper to get selected values from a dropdown list by ID
 */
export function getSelectedValues(dropdownListId) {
    const buttons = document.querySelectorAll(`#${dropdownListId} .filter-button.selected`);
    return Array.from(buttons).map(btn => btn.dataset.value);
}

/**
 * Dispatch a 'dropdownChange' event so updateFilters() will be called
 */
export function triggerDropdownChangeEvent() {
    const event = new CustomEvent('dropdownChange');
    console.log("Dispatching dropdownChange event");
    document.dispatchEvent(event);
}

/**
 * Autocomplete for cast/director names
 */
function handleAutocomplete() {
    const query = searchBox.value.trim();
    if (query.length >= AUTOCOMPLETE_MIN_DIGITS) {
        showProgressIndicator();
        fetch(`/autocomplete?query=${encodeURIComponent(query)}`)
            .then(response => {
                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }
                return response.json();
            })
            .then(data => {
                showAutocompleteSuggestions(data);
            })
            .catch(error => {
                console.error('Error fetching autocomplete suggestions:', error);
                hideAutocompleteSuggestions();
            })
            .finally(() => {
                hideProgressIndicator();
            });
    } else {
        hideAutocompleteSuggestions();
    }
}

/**
 * Show autocomplete suggestions
 */
function showAutocompleteSuggestions(suggestions) {
    const deduplicatedMap = new Map();
    suggestions.forEach(item => {
        if (!deduplicatedMap.has(item.name)) {
            deduplicatedMap.set(item.name, item);
        }
    });
    const uniqueSuggestions = Array.from(deduplicatedMap.values());

    let autocompleteList = document.getElementById('autocomplete-list');
    if (!autocompleteList) {
        autocompleteList = document.createElement('div');
        autocompleteList.id = 'autocomplete-list';
        autocompleteList.className = 'autocomplete-items';
        document.body.appendChild(autocompleteList);
    }

    const searchBoxRect = searchBox.getBoundingClientRect();
    autocompleteList.style.position = 'absolute';
    autocompleteList.style.top = `${searchBoxRect.bottom + window.scrollY}px`;
    autocompleteList.style.left = `${searchBoxRect.left + window.scrollX}px`;
    autocompleteList.style.width = `${searchBoxRect.width}px`;
    autocompleteList.style.zIndex = '10000';
    autocompleteList.innerHTML = '';

    uniqueSuggestions.forEach(item => {
        const suggestionItem = document.createElement('div');
        suggestionItem.className = 'autocomplete-item';
        suggestionItem.innerHTML = `<strong>${item.name}</strong> <small>(${item.type || ''})</small>`;
        suggestionItem.dataset.name = item.name;
        suggestionItem.dataset.type = item.type;

        suggestionItem.addEventListener('click', () => {
            searchBox.value = item.name;
            hideAutocompleteSuggestions();
            triggerDropdownChangeEvent();
        });

        autocompleteList.appendChild(suggestionItem);
    });
}

function hideAutocompleteSuggestions() {
    const list = document.getElementById('autocomplete-list');
    if (list) {
        list.remove();
    }
    hideProgressIndicator();
}

/**
 * Populate a dropdown list (years, genres, countries, etc.)
 * and highlight any pre-selected items if needed.
 */
export function populateDropdown(dropdownListId, options, selectedValues = [], singleSelect = false, showCounts = true) {
    const dropdownList = document.getElementById(dropdownListId);
    if (!dropdownList) {
        console.error(`populateDropdown: Element with ID '${dropdownListId}' not found.`);
        return;
    }

    dropdownList.innerHTML = "";

    // single-select logic
    if (singleSelect) {
        dropdownList.classList.add('single-select');
    } else {
        dropdownList.classList.remove('single-select');
    }

    let optionsArray = [];
    if (typeof options === 'object' && !Array.isArray(options)) {
        // { label: count }
        optionsArray = Object.entries(options).map(([label, count]) => ({ label, count }));
    } else if (Array.isArray(options)) {
        // [label1, label2, ...]
        optionsArray = options.map(label => ({ label }));
    } else {
        console.error(`populateDropdown: 'options' should be an object or array. Received:`, options);
        return;
    }

    // Sort except for 'sort-dropdown-list'
    if (dropdownListId !== 'sort-dropdown-list') {
        optionsArray.sort((a, b) => a.label.localeCompare(b.label));
    }

    // Special case: "sort-dropdown-list"
    if (dropdownListId === 'sort-dropdown-list') {
        const extendedOptionsArray = [];
        optionsArray.forEach(option => {
            if (option.label.toLowerCase() === 'zufall') {
                extendedOptionsArray.push({
                    label: option.label,
                    value: option.label
                });
            } else {
                extendedOptionsArray.push({
                    value: option.label,
                    label: option.label.includes("asc")
                        ? `${option.label} <i class="fa fa-sort-amount-up"></i>`
                        : `${option.label} <i class="fa fa-sort-amount-down"></i>`,
                });
            }
        });
        optionsArray = extendedOptionsArray;
    }

    // Create container for the filter buttons
    const buttonsContainer = document.createElement('div');
    buttonsContainer.className = 'filter-buttons-container';

    // Build each filter button
    optionsArray.forEach(option => {
        const button = document.createElement('button');
        button.type = "button";
        button.className = "filter-button";

        // If showCounts is enabled, e.g. "Action (34)"
        if (showCounts && option.count !== undefined) {
            button.innerHTML = `${option.label} (${option.count})`;
        } else {
            button.innerHTML = option.label;
        }

        button.dataset.value = option.value || option.label;

        if (selectedValues.includes(option.value || option.label)) {
            button.classList.add('selected');
            // Optionally disable or mark it as used
            // button.disabled = true;
            // button.classList.add('used-up');
        }
        buttonsContainer.appendChild(button);
    });

    dropdownList.appendChild(buttonsContainer);

    // Highlight the dropdown header if any values are selected
    const selectedButtons = dropdownList.querySelectorAll('.filter-button.selected');
    const updatedSelectedValues = Array.from(selectedButtons).map(btn => btn.dataset.value);
    toggleHeaderHighlight(dropdownList, updatedSelectedValues);

    // Hide or show clear icon if single-select or multi-select
    const dropdownHeader = document.querySelector(`.dropdown-header[data-target="${dropdownListId}"]`);
    if (!dropdownHeader) return;
    const clearButton = dropdownHeader.querySelector('.clear-icon');
    if (singleSelect && clearButton) {
        clearButton.style.display = 'none';
    } else if (!singleSelect && clearButton) {
        clearButton.style.display = '';
    }
}

export function updateFilters(page = 1) {
    // 1) Check if there's a 'similar' param in the URL
    const currentUrlParams = new URLSearchParams(window.location.search);
    const similarId = currentUrlParams.get('similar');

    let requestUrl = "/filter_movies?";
    const finalParams = new URLSearchParams(); // We'll build the query here

    if (similarId) {
        // -- SIMILAR-MODE --
        finalParams.append('similar', similarId);
        finalParams.append('page', page);
    } else {
        // -- NORMAL FILTER-MODE --
        const selectedYears = getSelectedValues('year-dropdown-list');
        const selectedGenres = getSelectedValues('genre-dropdown-list');
        const selectedCountries = getSelectedValues('country-dropdown-list');
        const selectedStandorte = getSelectedValues('standort-dropdown-list');
        const selectedMedia = getSelectedValues('medium-dropdown-list');
        const selectedSortByValues = getSelectedValues('sort-dropdown-list');
        const selectedSortBy = selectedSortByValues.length > 0 ? selectedSortByValues : ["Zufall"];

        const searchQuery = searchBox ? searchBox.value.trim() : '';

        // Build normal filter params
        if (selectedYears.length) finalParams.append('years', selectedYears.join(','));
        if (selectedGenres.length) finalParams.append('genres', selectedGenres.join(','));
        if (selectedCountries.length) finalParams.append('countries', selectedCountries.join(','));
        if (selectedStandorte.length) finalParams.append('standorte', selectedStandorte.join(','));
        if (selectedMedia.length) finalParams.append('media', selectedMedia.join(','));
        if (selectedSortBy.length) finalParams.append('sort_by', selectedSortBy[0]);
        if (searchQuery.length > 0) finalParams.append('search', searchQuery);
        finalParams.append('page', page);
    }

    showProgressIndicator();

    // 2) Actually fetch the data
    fetch(requestUrl + finalParams.toString())
        .then(response => response.json())
        .then(data => {
            // We handle normal or similar mode based on data.mode
            console.log("Filter response data:", data);

            // For normal filter, your JSON fields might be:
            // { mode: 'normal_filter', movies, current_page, total_pages, total_movies, ... }
            // For similar, your JSON might be:
            // { mode: 'similar_search', similar_id, movies, current_page, total_pages, total_movies, ... }

            if (data.mode === 'similar_search') {
                // 2A) Similar mode
                // No need to repopulate drop-downs for normal filters, etc.
                // Just update your listing, pagination, and .view-toggle-title to reflect "Ã„hnliche Filme"
                
                // Render the movies
                updateMovieListings(data.movies);

                // Update pagination
                updatePagination(
                    data.current_page,   // current
                    data.total_pages,    // total
                    data.total_movies,   // total item count
                    4                    // columnsPerRow (or read from data.columns_per_row if your server returns it)
                );

                // Update the headline to something like "Ã„hnliche Filme (XX)"
                const headlineElement = document.querySelector('.view-toggle-title');
                if (headlineElement) {
                    headlineElement.textContent = `Ã„hnliche Filme (${data.total_movies})`;
                }

            } else {
                // 2B) Normal filter mode
                const {
                    years,
                    genres,
                    countries,
                    standorte,
                    media,
                    sort_options,
                    movies,
                    current_page,
                    total_pages,
                    total_movies
                } = data;

                // Re-populate the dropdowns with updated filters
                // (only if your server is still returning them)
                populateDropdown('year-dropdown-list', years);
                populateDropdown('genre-dropdown-list', genres);
                populateDropdown('country-dropdown-list', countries);
                populateDropdown('standort-dropdown-list', standorte);
                populateDropdown('medium-dropdown-list', media);
                populateDropdown('sort-dropdown-list', sort_options, [], true, false);

                // Render the movies
                updateMovieListings(movies);

                // Basic columns logic
                let columnsPerRow = 1;
                if (total_movies > 100) columnsPerRow = 5;
                else if (total_movies > 60) columnsPerRow = 4;
                else if (total_movies > 20) columnsPerRow = 3;

                setGridLayout(columnsPerRow);

                // Update pagination
                updatePagination(current_page, total_pages, total_movies, columnsPerRow);

                // Update the normal "view-toggle-title" with filters
                // We might do your updateHeadline(...) call here
                // If you want to keep it:
                updateHeadline(
                    getSelectedValues('genre-dropdown-list'),
                    getSelectedValues('year-dropdown-list'),
                    getSelectedValues('country-dropdown-list'),
                    getSelectedValues('standort-dropdown-list'),
                    getSelectedValues('medium-dropdown-list'),
                    getSelectedValues('sort-dropdown-list'),
                    searchBox ? searchBox.value.trim() : '',
                    total_movies
                );
            }
        })
        .catch(error => {
            console.error('Error fetching filter data:', error);
            if (movieContainer) {
                movieContainer.innerHTML = `<p class="no-movies-message">An error occurred. Please try again later.</p>`;
            }
        })
        .finally(() => {
            hideProgressIndicator();
        });
}


/**
 * Dynamically apply grid layout based on the number of columns
 */
function setGridLayout(columns) {
    if (!movieContainer) return;
    movieContainer.classList.remove('columns-1', 'columns-3', 'columns-4', 'columns-5');
    switch (columns) {
        case 3:
            movieContainer.classList.add('columns-3');
            break;
        case 4:
            movieContainer.classList.add('columns-4');
            break;
        case 5:
            movieContainer.classList.add('columns-5');
            break;
        default:
            movieContainer.classList.add('columns-1');
    }
}

/**
 * Update the "view-toggle-title" with selected filters
 */
export function updateHeadline(
    selectedGenres = [],
    selectedYears = [],
    selectedCountries = [],
    selectedStandorte = [],
    selectedMedia = [],
    selectedSortByValues = [],
    searchQuery,
    total_movies
) {
    const headlineElement = document.querySelector('.view-toggle-title');
    if (!headlineElement) {
        console.error('Element with class .view-toggle-title not found');
        return;
    }
    headlineElement.innerHTML = '';

    // Helper to add text + icon
    const appendTextWithIcon = (iconClass, text) => {
        const span = document.createElement('span');
        const icon = document.createElement('i');
        icon.className = iconClass;
        span.appendChild(icon);
        span.innerHTML += ` ${text}`;
        if (headlineElement.innerHTML) {
            headlineElement.innerHTML += ' | ';
        }
        headlineElement.appendChild(span);
    };

    // Search query
    if (searchQuery) {
        appendTextWithIcon('fa fa-search', searchQuery);
    }
    // Genre
    if (selectedGenres.length > 0) {
        appendTextWithIcon('fa fa-theater-masks', selectedGenres.join(', '));
    }
    // Years
    if (selectedYears.length > 0) {
        appendTextWithIcon('fas fa-hourglass-half', selectedYears.join(', '));
    }
    // Countries
    if (selectedCountries.length > 0) {
        appendTextWithIcon('fa fa-globe', selectedCountries.join(', '));
    }
    // Standort
    if (selectedStandorte.length > 0) {
        appendTextWithIcon('fa fa-map-marker-alt', selectedStandorte.join(', '));
    }
    // Media
    if (selectedMedia.length > 0) {
        appendTextWithIcon('fa fa-compact-disc', selectedMedia.join(', '));
    }
    // Sort
    if (selectedSortByValues.length > 0) {
        appendTextWithIcon('fa fa-sort', selectedSortByValues.join(', '));
    }
    // Movie count
    if (total_movies !== undefined && total_movies > 0) {
        const formattedTotal = total_movies.toLocaleString('de-DE');
        const label = ''; // e.g. 'Filme gefunden'
        appendTextWithIcon('fa fa-film', `${formattedTotal} ${label}`);
    }
}


--- File: static\js\hero.js ---
document.addEventListener('DOMContentLoaded', function () {
 
    // Call the wrapper function after the DOM content is fully loaded
    initializeHeroSectionIfPresent();

    // Call truncateText function for overview sections
    truncateText('.info-section.overview p', 500);

    // Call the function on initial load and resize
    adjustTitleFontSize();
    window.addEventListener('resize', adjustTitleFontSize);

    // Call the function on initial load and window resize
    adjustMetadataWidth();
    window.addEventListener('resize', adjustMetadataWidth);

    // Call the function on initial load and window resize
    updateMovieCardBackground();
    window.addEventListener('resize', updateMovieCardBackground);

});


// Wrapper function to check the presence of hero section before initializing
function initializeHeroSectionIfPresent() {
    function manageHeroAndTaglines() {
        // Taglines array for the hero section
        const taglines = [
            "Entdecke unsere Sammlung von fast 20.000 Filmen.",
            "Finde deine Lieblingsfilme und entdecke neue Perlen.",
            "Tauche ein in cineastische Meisterwerke.",
            "Erlebe das Beste aus Arthouse- und klassischem Kino.",
            "Dein Zugang zu zeitlosen Filmen.",
            "Die Filmsammlung des FORMAT Filmkunst-Verleihs.",
            "FÃ¼r eine Handvoll Dollar kannst du von den MÃ¶glichkeiten profitieren.",
            "Ãœber 19.000 Filme - die grÃ¶ÃŸte private Filmsammlung Mitteldeutschlands.",
            "Independent- und Arthouse-Filme auf DVD, Blu-ray und 3D-Blu-ray.",
            "'Unendliche Weiten' an Informationen zu den Filmen.",
            "Cineastische RaritÃ¤ten, Arthouse und Blockbuster - alles unter einem Dach.",
            "FILMKUNST-Verleih seit Ã¼ber 18 Jahren."
        ];
    
        // Hero images array
        const heroImages = [
            '/static/images/backdrop_1.jpg',
            '/static/images/backdrop_2.jpg',
            '/static/images/backdrop_3.jpg',
            '/static/images/backdrop_4.jpg'
        ];
    
        // Elements for the hero section
        const taglineElement = document.getElementById('dynamic-tagline');
        const heroImageElement = document.querySelector('.hero-image img');
        const logoElement = document.querySelector('.logo span');
    
        // Check for the presence of critical elements before proceeding
        if (!taglineElement || !heroImageElement || !logoElement) {
            console.info("Hero elements not found on this page. Skipping hero section initialization.");
            return; // Exit the function if elements are not found
        }
    
        // Initial setup for tagline and hero image
        let currentTaglineIndex = Math.floor(Math.random() * taglines.length);
        taglineElement.textContent = taglines[currentTaglineIndex];
        taglineElement.classList.add('fade-in');
    
        // Set a random hero image
        const randomImage = heroImages[Math.floor(Math.random() * heroImages.length)];
        heroImageElement.src = randomImage;
    
        // Change taglines periodically
        setInterval(() => {
            taglineElement.classList.remove('fade-in');
            taglineElement.classList.add('fade-out');
    
            setTimeout(() => {
                currentTaglineIndex = (currentTaglineIndex + 1) % taglines.length;
                taglineElement.textContent = taglines[currentTaglineIndex];
                taglineElement.classList.remove('fade-out');
                taglineElement.classList.add('fade-in');
    
                // Randomly change logo color
                const randomChance = Math.random();
                logoElement.style.color = randomChance < 0.3 ? 'red' : 'white';
            }, 1000); // Matches transition duration
        }, 5000);
    }    
    // Run the hero management code only if the relevant elements exist on the page
    const heroSectionExists = document.querySelector('.hero-image img') && document.getElementById('dynamic-tagline') && document.querySelector('.logo span');
    
    if (heroSectionExists) {
        manageHeroAndTaglines(); // Initialize only if hero section elements are present
    } else {
        console.info("Hero section elements not found on this page. Skipping hero management.");
    }
}

// Truncate text for overview sections
function truncateText(selector, maxLength) {
    const elements = document.querySelectorAll(selector);
    elements.forEach(element => {
        const originalText = element.textContent;
        if (originalText.length > maxLength) {
            const truncatedText = originalText.substring(0, maxLength).trim() + '...';
            element.textContent = truncatedText;
        }
    });
}
// Adjust title font size dynamically based on overflow
function adjustTitleFontSize() {
    const movieCards = document.querySelectorAll('.movie-card');
    movieCards.forEach(card => {
        const titleContainer = card.querySelector('.titles');
        if (titleContainer) {
            const mainTitle = titleContainer.querySelector('.main-title');
            const releaseYear = titleContainer.querySelector('.release-year');
            
            if (mainTitle && releaseYear) {
                // Reset to default size
                mainTitle.style.fontSize = '1.6em';
                releaseYear.style.fontSize = '0.8em';
                
                // Check if the title overflows
                if (titleContainer.scrollWidth > titleContainer.clientWidth) {
                    let fontSize = parseFloat(window.getComputedStyle(mainTitle).fontSize);
                    while (titleContainer.scrollWidth > titleContainer.clientWidth && fontSize > 0.8) {
                        fontSize -= 0.1;
                        mainTitle.style.fontSize = fontSize + 'em';
                        releaseYear.style.fontSize = (fontSize * 0.7) + 'em';  // Adjust year proportionally
                    }
                }
            }
        }
    });
}

// Adjust the width of metadata elements dynamically
function adjustMetadataWidth() {
    const metadataElements = document.querySelectorAll('.movie-metadata');
    metadataElements.forEach(metadata => {
        const parentWidth = metadata.parentElement.clientWidth;
        metadata.style.maxWidth = parentWidth + 'px';
    });
}


// Function to update movie card background images based on screen size
function updateMovieCardBackground() {
const movieCards = document.querySelectorAll('.movie-card.poster-background');
movieCards.forEach(card => {
    const mobileImage = card.getAttribute('data-mobile-image');
    const desktopImage = card.getAttribute('data-desktop-image');

    // Set the correct background based on the screen size
    if (window.innerWidth >= 1024) {
        if (desktopImage) {
            card.style.backgroundImage = `url(${desktopImage})`;
        }
    } else {
        if (mobileImage) {
            card.style.backgroundImage = `url(${mobileImage})`;
        }
    }
});
}
--- File: static\js\main.js ---
// File: static/js/main.js

import { initializeSwiper } from './carousel.js';  // Example import
import { initializeFilterDropdowns, initializeFilterPanelToggle, initializeFilterActionButtons } from './filter.js'; 
import { themeToggle } from './theme_toggle.js'; 
import { toggleViews } from './catalog.js'; 


document.addEventListener('DOMContentLoaded', function () {
    initializeFilterDropdowns();  // Initialize dropdowns and fetch movies
    initializeSwiper(); // Initialize Swiper Carousel
    initializeFilterPanelToggle(); // Initialize filter panel toggle
    initializeFilterActionButtons(); // Initialize "Clear All" and "Show All Results" buttons
    toggleViews();
    themeToggle();
});


--- File: static\js\movie_details.js ---
// File: static/js/movie_details.js
document.addEventListener('DOMContentLoaded', function () {
    const body = document.querySelector('body');
    const movieFolder = body.getAttribute('data-folder');

    // Apply the saved theme
    const theme = localStorage.getItem('theme') || 'light';
    document.documentElement.setAttribute('data-theme', theme);

    if (!movieFolder) {
        console.error('No folder name found in data attributes.');
        return;
    }

    // ---------------------------------------------
    // Handle clicks on actor/director `.person-link`
    // ---------------------------------------------
    document.addEventListener('click', function (event) {
        // Check if the clicked element itself matches `.person-link`
        // or if a child was clicked. Use .closest() if needed.
        const link = event.target.closest('.person-link');
        if (link) {
            event.preventDefault();
            const personName = link.getAttribute('data-person-name');
            if (personName) {
                // Navigate to the catalog page with ?search=PersonName
                window.location.href = `/catalog?search=${encodeURIComponent(personName)}`;
            }
        }
    });

    // ---------------------------------------------
    // The rest of your existing code for backdrops, tooltips, etc.
    // ---------------------------------------------

    // 1) Fetch backdrop images, if any
    fetch(`/get_backdrop_images/${encodeURIComponent(movieFolder)}`)
        .then(response => {
            if (!response.ok) {
                throw new Error(`HTTP error! Status: ${response.status}`);
            }
            return response.json();
        })
        .then(data => {
            let backdrops = data.images;
            const swiperWrapper = document.querySelector('.swiper-wrapper');

            if (backdrops.length === 0) {
                console.warn('No backdrops found. Attempting to use poster images as backdrops.');
                // Fallback to poster images
                return fetch(`/get_poster_images/${encodeURIComponent(movieFolder)}`)
                    .then(response => {
                        if (!response.ok) {
                            throw new Error(`HTTP error! Status: ${response.status}`);
                        }
                        return response.json();
                    })
                    .then(posterData => {
                        backdrops = posterData.images;
                        if (backdrops.length === 0) {
                            console.warn('No posters found to use as backdrops.');
                            return; // optionally show a default
                        }
                        // Use posters as backdrops
                        populateSwiper(backdrops, movieFolder, 'poster');
                        initializeSwiper();
                    });
            }

            // Otherwise, populate with actual backdrops
            swiperWrapper.innerHTML = '';
            populateSwiper(backdrops, movieFolder, 'backdrop');
            initializeSwiper();
        })
        .catch(error => {
            console.error('Error fetching backdrop images:', error);
        });

    function populateSwiper(images, folderName, type) {
        const swiperWrapper = document.querySelector('.swiper-wrapper');
        if (!swiperWrapper) {
            console.error('Swiper wrapper not found.');
            return;
        }
        images.forEach(image => {
            const slide = document.createElement('div');
            slide.className = 'swiper-slide';
            const img = document.createElement('img');
            img.src = `/movie_images/${encodeURIComponent(folderName)}/${type}/${encodeURIComponent(image)}`;
            img.alt = `${type.charAt(0).toUpperCase() + type.slice(1)} Image`;
            slide.appendChild(img);
            swiperWrapper.appendChild(slide);
        });
    }

    function initializeSwiper() {
        new Swiper('.swiper-container', {
            loop: true,
            autoplay: {
                delay: 5000,
                disableOnInteraction: false,
            },
            navigation: {
                nextEl: '.swiper-button-next',
                prevEl: '.swiper-button-prev',
            },
            slidesPerView: 1,
            spaceBetween: 10,
            pagination: {
                el: '.swiper-pagination',
                clickable: true,
            },
        });
    }

    // Example: initialize tooltips for persons
    initializeDirectorAndActorsTooltips();
    function initializeDirectorAndActorsTooltips() {
        // ... your existing code for Tippy.js or images ...
    }

    // Listen for filter-icon, genres, countries ...
    document.addEventListener('click', function (event) {
        // Example if you have icons for filters
        if (event.target.matches('.filter-icon') || event.target.closest('.filter-icon')) {
            event.preventDefault();
            const personName = event.target.closest('.filter-icon').getAttribute('data-person-name');
            window.location.href = `/catalog?search=${encodeURIComponent(personName)}`;
        } else if (event.target.matches('.genre-filter')) {
            event.preventDefault();
            const genre = event.target.getAttribute('data-genre');
            window.location.href = `/catalog?genres=${encodeURIComponent(genre)}`;
        } else if (event.target.matches('.country-filter')) {
            event.preventDefault();
            const country = event.target.getAttribute('data-country');
            window.location.href = `/catalog?countries=${encodeURIComponent(country)}`;
        }
    });

});

--- File: static\js\navbar.js ---
document.addEventListener('DOMContentLoaded', function () {
    const navbar = document.querySelector('.navbar');
    let lastScrollTop = 0;
    let ticking = false;

    console.log("Test1");
    console.log("Page Height:", document.body.scrollHeight, "Viewport Height:", window.innerHeight);
    console.log("Navbar element:", navbar);
    window.scrollTo(0, 50);
    console.log("Scrolled programmatically to trigger scroll event.");


    function handleScroll() {
        const currentScroll = window.pageYOffset || document.documentElement.scrollTop;

        console.log("Handling scroll:", currentScroll); // Debugging current scroll value

        if (currentScroll <= 20) {
            console.log("Near top, showing navbar");
            navbar.classList.remove('hidden');
        } else if (currentScroll > lastScrollTop) {
            console.log("Scrolling down, hiding navbar");
            navbar.classList.add('hidden');
        } else {
            console.log("Scrolling up, showing navbar");
            navbar.classList.remove('hidden');
        }

        lastScrollTop = currentScroll <= 0 ? 0 : currentScroll; // For mobile or negative scrolling
        ticking = false;
    }

    function onScroll() {
        console.log("Scroll detected"); // Confirming scroll event is fired
        if (!ticking) {
            window.requestAnimationFrame(handleScroll);
            ticking = true;
        }
    }

    console.log("Scroll listener attached to window");
    window.addEventListener('scroll', onScroll);

    // Show navbar when hovering near the top
    document.addEventListener('mousemove', function (event) {
        if (event.clientY < 50) {
            console.log("Mouse near top, showing navbar");
            navbar.classList.remove('hidden');
        }
    });
});

--- File: static\js\pagination.js ---
// File: static/js/pagination.js

import { topPaginationContainer, bottomPaginationContainer } from './entry.js';  // Import pagination containers
import { updateFilters } from './filter.js';  // Import the updateFilters function

/**
 * Function to handle pagination updates for both top and bottom paginations
 */
export function updatePagination(currentPage, totalPages, totalMovies, columnsPerRow) {
    [topPaginationContainer, bottomPaginationContainer].forEach(paginationContainer => {
        if (!paginationContainer) return;

        paginationContainer.innerHTML = "";  // Clear existing pagination buttons

        // Create the "Previous" Button
        let prevDisabledClass = currentPage <= 1 ? 'disabled' : '';
        let prevDisabledAttr = currentPage <= 1 ? 'aria-disabled="true"' : '';
        paginationContainer.innerHTML += `<li class="${prevDisabledClass}"><a href="#" data-page="${currentPage - 1}" ${prevDisabledAttr}>&laquo; ZurÃ¼ck</a></li>`;

        // Determine if ellipsis is needed
        const showStartEllipsis = currentPage > 3;
        const showEndEllipsis = currentPage < totalPages - 2;

        // Add first page and ellipsis if needed
        if (showStartEllipsis) {
            paginationContainer.innerHTML += `<li><a href="#" data-page="1">1</a></li>`;
            paginationContainer.innerHTML += `<li class="ellipsis"><span>...</span></li>`;
        }

        // Generate page numbers around the current page
        let startPage = Math.max(1, currentPage - 2);
        let endPage = Math.min(totalPages, currentPage + 2);
        for (let p = startPage; p <= endPage; p++) {
            if (p === currentPage) {
                paginationContainer.innerHTML += `<li class="active"><span>${p}</span></li>`;  // Use <span> for active page
            } else {
                paginationContainer.innerHTML += `<li><a href="#" data-page="${p}">${p}</a></li>`;
            }
        }

        // Add ellipsis and last page if needed
        if (showEndEllipsis) {
            paginationContainer.innerHTML += `<li class="ellipsis"><span>...</span></li>`;
            paginationContainer.innerHTML += `<li><a href="#" data-page="${totalPages}">${totalPages}</a></li>`;
        }

        // Create the "Next" Button
        let nextDisabledClass = currentPage >= totalPages ? 'disabled' : '';
        let nextDisabledAttr = currentPage >= totalPages ? 'aria-disabled="true"' : '';
        paginationContainer.innerHTML += `<li class="${nextDisabledClass}"><a href="#" data-page="${currentPage + 1}" ${nextDisabledAttr}>NÃ¤chste &raquo;</a></li>`;
    });

    attachPaginationEventListeners(columnsPerRow);
}

/**
 * Function to attach click event listeners for pagination buttons
 */
export function attachPaginationEventListeners(columnsPerRow) {
    const paginationLinks = document.querySelectorAll('.pagination nav ul li a[data-page]');
    paginationLinks.forEach(link => {
        link.addEventListener('click', function (event) {
            event.preventDefault();
            if (this.parentElement.classList.contains('disabled')) {
                return;  // Ignore clicks on disabled buttons
            }
            const page = parseInt(this.getAttribute('data-page'));
            if (!isNaN(page)) updateFilters(page);  // Trigger filter update with selected page
        });
    });
}

--- File: static\js\test.js ---
console.log("Test module loaded in Chrome");

--- File: static\js\theme_toggle.js ---
export function themeToggle() {
    const themeToggleBtn = document.getElementById('theme-toggle-btn');
    const themeImage = document.getElementById('theme-image'); // Target the theme image
    const currentTheme = localStorage.getItem('theme') || 'light';

    // Function to apply theme and update the image source
    const applyTheme = (theme) => {
        document.documentElement.setAttribute('data-theme', theme);

        // Update theme toggle button
        if (theme === 'dark') {
            themeToggleBtn.classList.add('active');
            themeToggleBtn.innerHTML = '<i class="fas fa-sun"></i>'; // Change to sun icon
        } else {
            themeToggleBtn.classList.remove('active');
            themeToggleBtn.innerHTML = '<i class="fas fa-moon"></i>'; // Change to moon icon
        }

        // Update theme-based image
        if (themeImage) {
            const darkSrc = themeImage.getAttribute('data-dark-src');
            const lightSrc = themeImage.getAttribute('data-light-src');
            themeImage.src = theme === 'dark' ? darkSrc : lightSrc;
        }
    };

    // Initial theme application
    applyTheme(currentTheme);

    // Toggle theme on button click
    themeToggleBtn.addEventListener('click', () => {
        const newTheme = document.documentElement.getAttribute('data-theme') === 'dark' ? 'light' : 'dark';
        applyTheme(newTheme);
        localStorage.setItem('theme', newTheme);
    });

    // Keyboard Accessibility for Theme Toggle Button
    themeToggleBtn.addEventListener('keydown', (e) => {
        if (e.key === 'Enter' || e.key === ' ') {
            e.preventDefault();
            themeToggleBtn.click();
        }
    });
}

--- File: templates\catalog.html ---
<!-- File: templates/catalog.html -->
<!DOCTYPE html>
<html lang="de">
<head>
    <meta charset="UTF-8">
    <title>Katalog - FORMAT Filmkunst-Verleih</title>
    <!-- Responsive Meta Tag -->
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <!-- Fonts and Stylesheets -->
    <link href="https://fonts.googleapis.com/css2?family=Cinzel:wght@400;700&family=Open+Sans&display=swap" rel="stylesheet">
    <!-- Your Main CSS (updated with overlay logic) -->
    <link rel="stylesheet" href="{{ url_for('static', filename='css/main.css') }}?v=1.0">
    <!-- Icons and Additional Fonts -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" crossorigin="anonymous">
    <link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Lato">
    <!-- Swiper.js CSS for Carousel -->
    <link rel="stylesheet" href="https://unpkg.com/swiper/swiper-bundle.min.css" />
</head>
<body>
    <header>
        <nav class="navbar">
            <div class="logo">
                <a href="https://verein.format-filmkunstverleih.de" class="sub-logo">
                    <span>Katalog</span>
                </a>
            </div>
            
            <!-- Centered theme title in the navbar -->
            <div class="nav-center-title">
                <a href="https://verein.format-filmkunstverleih.de" class="logo">
                    <img 
                        src="{{ url_for('static', filename='images/looking_down_small.jpg') }}" 
                        alt="Looking Down" 
                        class="logo-image" 
                        id="theme-image" 
                        data-dark-src="{{ url_for('static', filename='images/looking_down_dark.png') }}"
                        data-light-src="{{ url_for('static', filename='images/looking_down_light.png') }}">
                </a>
                <span class="theme-title">{{ selected_theme }}</span>
            </div>

            <ul class="nav-links">
                <!-- Additional menu links can be placed here, if desired -->
            </ul>

            <!-- Dark Mode Toggle -->
            <button id="theme-toggle-btn" class="theme-toggle-btn" aria-label="Toggle Dark Mode" tabindex="0">
                <i class="fas fa-moon"></i>
            </button>
        </nav>
        <!-- Separate link for mobile users -->
        <div class="mobile-footer-link">
            <a href="https://verein.format-filmkunstverleih.de/">filmkunst-verleih</a>
        </div>
    </header>
    
    <main>
        <!-- Movie Carousel Section -->
        <section class="movie-carousel-section">
            <!-- Swiper.js Carousel -->
            <div class="swiper-container">
                <div class="swiper-wrapper">
                    {% for featured_movie in featured_movies %}
                    <div class="swiper-slide">
                        <!-- Entire card clickable -->
                        <a href="{{ url_for('get_movie_details', movie_id=featured_movie['movie_id']) }}" class="featured-movie-card-link">
                            <div class="featured-movie-card">
                                <img 
                                    src="{{ url_for('movie_images', filename=featured_movie['folder_name'] + '/poster/poster_1.avif') }}" 
                                    alt="{{ featured_movie['main_title'] }}"
                                    onerror="this.onerror=null; this.src='{{ url_for('static', filename='images/default_movie.png') }}';"
                                    loading="lazy"
                                >
                                <div class="featured-movie-overlay">
                                    <h3>{{ featured_movie['main_title'] }}</h3>
                                    <span class="btn btn-secondary">Mehr erfahren</span>
                                </div>
                            </div>
                        </a>
                    </div>
                    {% endfor %}
                </div>
                <!-- Swiper Pagination -->
                <div class="swiper-pagination"></div>
                <!-- Swiper Navigation -->
                <div class="swiper-button-prev"></div>
                <div class="swiper-button-next"></div>
            </div>
        </section>

        <!-- Progress Indicator -->
        <div id="progress-indicator" class="progress-indicator" role="status" aria-live="polite" aria-hidden="true">
            <div class="spinner" aria-hidden="true"></div>
            <p>einen Moment bitte, lade Filme...</p>
        </div> 
            
        <!-- Catalog Search Section -->
        <section class="catalog-search"> 
            <div class="search-dropdown-container">
                <!-- Search Box Container -->
                <div class="search-container">
                    <i class="fas fa-search search-icon" aria-hidden="true"></i>
                    <input id="search-box" type="text" placeholder="Suche (mind. 4 Zeichen)" aria-label="Suchfeld">
                    <span id="clear-search" class="clear-icon" role="button" tabindex="0" aria-label="Suchfeld leeren">&times;</span>
                </div>

                <form id="filter-form">
                    <!-- Main Filters Container Wrapper -->
                    <div class="main-filters-container-wrapper">
                        <!-- Main Filters Container for Year, Genre, Country, Standort, Medium, Sort -->
                        <div class="main-filters-container">
                            <!-- Left Navigation Arrow -->
                            <button class="filter-nav-arrow left hidden" aria-label="Scroll Left">
                                <i class="fas fa-chevron-left" aria-hidden="true"></i>
                            </button>

                            <!-- Year Filter -->
                            <div class="custom-dropdown" data-dropdown="year-dropdown">
                                <div class="dropdown-header" data-target="year-dropdown-list" aria-label="Jahre" role="button" tabindex="0" aria-haspopup="true" aria-expanded="false">
                                    <div class="dropdown-header-top">
                                        <div class="header-label">
                                            <i class="fas fa-hourglass-half" aria-hidden="true"></i>
                                            <span>Zeit</span>
                                        </div>
                                        <div class="dropdown-arrow"></div>
                                    </div>
                                    <div class="dropdown-header-bottom"></div>
                                </div>
                            </div>

                            <!-- Genre Filter -->
                            <div class="custom-dropdown" data-dropdown="genre-dropdown">
                                <div class="dropdown-header" data-target="genre-dropdown-list" aria-label="Genres" role="button" tabindex="0" aria-haspopup="true" aria-expanded="false">
                                    <div class="dropdown-header-top">
                                        <div class="header-label">
                                            <i class="fas fa-theater-masks" aria-hidden="true"></i>
                                            <span>Genre</span>
                                        </div>
                                        <div class="dropdown-arrow"></div>
                                    </div>
                                    <div class="dropdown-header-bottom"></div>
                                </div>
                            </div>

                            <!-- Country Filter -->
                            <div class="custom-dropdown" data-dropdown="country-dropdown">
                                <div class="dropdown-header" data-target="country-dropdown-list" aria-label="LÃ¤nder" role="button" tabindex="0" aria-haspopup="true" aria-expanded="false">
                                    <div class="dropdown-header-top">
                                        <div class="header-label">
                                            <i class="fas fa-globe" aria-hidden="true"></i>
                                            <span>Land</span>
                                        </div>
                                        <div class="dropdown-arrow"></div>
                                    </div>
                                    <div class="dropdown-header-bottom"></div>
                                </div>
                            </div>

                            <!-- Standort Filter -->
                            <div class="custom-dropdown" data-dropdown="standort-dropdown">
                                <div class="dropdown-header" data-target="standort-dropdown-list" aria-label="Standort" role="button" tabindex="0" aria-haspopup="true" aria-expanded="false">
                                    <div class="dropdown-header-top">
                                        <div class="header-label">
                                            <i class="fas fa-map-marker-alt" aria-hidden="true"></i>
                                            <span>Regal</span>
                                        </div>
                                        <div class="dropdown-arrow"></div>
                                    </div>
                                    <div class="dropdown-header-bottom"></div>
                                </div>
                            </div>

                            <!-- Medium Filter -->
                            <div class="custom-dropdown" data-dropdown="medium-dropdown">
                                <div class="dropdown-header" data-target="medium-dropdown-list" aria-label="Medium" role="button" tabindex="0" aria-haspopup="true" aria-expanded="false">
                                    <div class="dropdown-header-top">
                                        <div class="header-label">
                                            <i class="fas fa-compact-disc" aria-hidden="true"></i>
                                            <span>Medium</span>
                                        </div>
                                        <div class="dropdown-arrow"></div>
                                    </div>
                                    <div class="dropdown-header-bottom"></div>
                                </div>
                            </div>

                            <!-- Sort By Dropdown -->
                            <div class="custom-dropdown" data-dropdown="sort-dropdown">
                                <div class="dropdown-header" data-target="sort-dropdown-list" aria-label="Sortieren nach" role="button" tabindex="0" aria-haspopup="true" aria-expanded="false">
                                    <div class="dropdown-header-top">
                                        <div class="header-label">
                                            <i class="fas fa-sort" aria-hidden="true"></i>
                                            <span>Ordnung</span>
                                        </div>
                                        <div class="dropdown-arrow"></div>
                                    </div>
                                    <div class="dropdown-header-bottom"></div>
                                </div>
                            </div>

                            <!-- Clear All Filters Button -->
                            <button 
                                type="button" 
                                id="clear-all-filters-button" 
                                class="filter-action-button" 
                                aria-label="Alle Filter zurÃ¼cksetzen" 
                                tabindex="0"
                            >
                                <i class="fas fa-undo" aria-hidden="true"></i>
                                <span class="sr-only">Alle Filter zurÃ¼cksetzen</span>
                            </button>

                            <!-- Right Navigation Arrow -->
                            <button class="filter-nav-arrow right hidden" aria-label="Scroll Right">
                                <i class="fas fa-chevron-right" aria-hidden="true"></i>
                            </button>
                        </div>
                    </div>
                </form>
            </div>

            <!-- Dropdown Lists Container -->
            <div class="dropdown-lists-container">
                <!-- Year Dropdown List -->
                <div class="dropdown-list" id="year-dropdown-list"></div>
                <!-- Genre Dropdown List -->
                <div class="dropdown-list" id="genre-dropdown-list"></div>
                <!-- Country Dropdown List -->
                <div class="dropdown-list" id="country-dropdown-list"></div>
                <!-- Standort Dropdown List -->
                <div class="dropdown-list" id="standort-dropdown-list"></div>
                <!-- Medium Dropdown List -->
                <div class="dropdown-list" id="medium-dropdown-list"></div>
                <!-- Sort Dropdown List -->
                <div class="dropdown-list" id="sort-dropdown-list"></div>
            </div>

            <div class="view-toggle-headline">
                <h2 class="view-toggle-title"></h2>
            </div>
        </section>

        <!-- Top Pagination Section -->
        <section class="pagination top-pagination">
            <nav>
                <ul>
                    <!-- Pagination dynamically populated -->
                </ul>
            </nav>

            <!-- Toggle Buttons -->
            <div class="view-toggle-container">
                <button id="grid-view-btn" class="view-toggle-btn active" aria-label="Grid View" aria-pressed="true">
                    <i class="fas fa-th"></i>
                </button>
                <button id="list-view-btn" class="view-toggle-btn" aria-label="List View" aria-pressed="false">
                    <i class="fas fa-list"></i>
                </button>
            </div>
        </section>
        
        <!-- Toggle View Section -->
        <section class="view-toggle-section">
            <!-- Optional: Additional headline or controls -->
        </section>

        <!-- Movie Listings Section (populated by JS) -->
        <section class="movie-listings">
            <!-- The JS code will dynamically create each movie card here.
                 Remember to place .inline-meta inside .image-container for grid overlay. -->
        </section>

        <!-- Bottom Pagination Section -->
        <section class="pagination bottom-pagination">
            <nav>
                <ul>
                    <!-- Pagination dynamically populated -->
                </ul>
            </nav>
        </section>
    </main>

    <footer>
        <div class="footer-content">
            <p>&copy; 2024 FORMAT Filmkunst-Verleih e.V.</p>
        </div>
    </footer>

    <!-- Swiper.js JS for Carousel -->
    <script src="https://unpkg.com/swiper/swiper-bundle.min.js"></script>
    <!-- Your Scripts -->
    <script type="module" src="{{ url_for('static', filename='js/main.js') }}"></script>
    <script src="{{ url_for('static', filename='js/navbar.js') }}"></script>
</body>
</html>

--- File: templates\index.html ---
<!DOCTYPE html>
<html lang="de">
<head>
    <meta charset="UTF-8">
    <title>FORMAT Filmkunst-Verleih - Home</title>
    <!-- Responsive Meta Tag -->
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <!-- Google Fonts -->
    <link href="https://fonts.googleapis.com/css2?family=Cinzel:wght@400;700&family=Open+Sans&display=swap" rel="stylesheet">
    <!-- Font Awesome for Icons -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" crossorigin="anonymous" referrerpolicy="no-referrer" />
    <!-- Main CSS -->
    <link rel="stylesheet" href="{{ url_for('static', filename='css/main.css') }}">
</head>
<body>
    <header>
        <nav class="navbar">
            <div class="logo">
                <a href="{{ url_for('index') }}"><span>FORMAT</span></a>
                <a href="{{ url_for('catalog') }}" class="sub-logo"><span>Katalog</span></a>
            </div>
            <div class="menu-toggle" aria-label="Toggle navigation menu" aria-expanded="false" role="button" tabindex="0">
                <i class="fas fa-bars"></i>
            </div>
            <ul class="nav-links">
                <li><a href="https://verein.format-filmkunstverleih.de/">filmkunst-verleih</a></li>
                <!-- Additional menu links can be placed here -->
            </ul>
        </nav>
        <!-- Separate link for mobile users -->
        <div class="mobile-footer-link">
            <a href="https://verein.format-filmkunstverleih.de/">filmkunst-verleih</a>
        </div>
    </header>
    

    <main>
        <!-- Hero Section -->
        <section class="hero">
            <div class="hero-image">
                <img src="images/backdrop_1.jpg" alt="Hero Image">
            </div>
            <div class="hero-overlay">
                <h1 id="dynamic-tagline">FÃ¼r eine Handvoll Dollar kannst du von den MÃ¶glichkeiten profitieren.</h1>
            <!-- Place the button outside of the hero-overlay div -->
                <a href="{{ url_for('catalog') }}" class="btn btn-primary">Katalog</a>
            </div>

        </section>
        


    </main>

    <footer>
        <div class="footer-content">
            <p>&copy; 2024 FORMAT Filmkunst-Verleih e.V. Alle Rechte vorbehalten.</p>
        </div>
    </footer>

    <!-- Scripts -->
    <script src="{{ url_for('static', filename='js/hero.js') }}" type="module"></script>
</body>
</html>

--- File: templates\movie_details.html ---
<!-- File: templates/movie_details.html -->
<!DOCTYPE html>
<html lang="de">
<head>
    <meta charset="UTF-8">
    <title>{{ movie.title }} - FORMAT Filmkunst-Verleih</title>
    <!-- Responsive Meta Tag -->
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <!-- Fonts and Stylesheets -->
    <link href="https://fonts.googleapis.com/css2?family=Cardo:ital@0;1&family=Lato:wght@300;400;700&family=Pinyon+Script&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="{{ url_for('static', filename='css/main.css') }}">
    <link rel="stylesheet" href="{{ url_for('static', filename='css/pages/movie_details.css') }}">
    <!-- Font Awesome -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" crossorigin="anonymous">
    <!-- Swiper.js CSS for Carousel -->
    <link rel="stylesheet" href="https://unpkg.com/swiper/swiper-bundle.min.css" />
</head>
<body data-folder="{{ movie.folder_name }}">

<!-- Theme Application Script -->
<script>
    document.addEventListener('DOMContentLoaded', function () {
        const theme = localStorage.getItem('theme') || 'light';
        console.log("theme", theme)
        document.documentElement.setAttribute('data-theme', theme);
    });
</script>

<div class="page-container">
    <header>
        <nav class="navbar">
            <div class="logo">
                <a href="javascript:void(0);" class="sub-logo" aria-label="Go Back" onclick="window.history.back()">
                    <i class="fas fa-arrow-left"></i>
                </a>
            </div>
            
            <div class="nav-center-title">
                <span class="theme-title">{{ movie.title }}</span>
            </div>
        </nav>
    </header>
    <main>
        <!-- Movie Details Section -->
        <section class="movie-details">
            <!-- Backdrop Carousel -->
            {% if movie.backdrops %}
            <div class="backdrop-carousel">
                <!-- Swiper Carousel Wrapper -->
                <div class="swiper-wrapper-container">
                    <div class="swiper-container">
                        <div class="swiper-wrapper">
                            {% for backdrop in movie.backdrops %}
                            <div class="swiper-slide">
                                <img src="{{ backdrop }}" alt="Backdrop Image for {{ movie.title }}" loading="lazy">
                            </div>
                            {% endfor %}
                        </div>
                        <!-- Add Pagination -->
                        <div class="swiper-pagination"></div>
                        <!-- Add Navigation -->
                        <button class="swiper-button-prev" aria-label="Previous Slide"><i class="fas fa-chevron-left"></i></button>
                        <button class="swiper-button-next" aria-label="Next Slide"><i class="fas fa-chevron-right"></i></button>
                    </div>
                </div>
            </div>
            {% else %}
            <!-- Fallback if no backdrops or posters are available -->
            <div class="backdrop-placeholder">
                {% if movie.posters %}
                <!-- Use the first poster as the backdrop -->
                <img src="{{ movie.posters[0] }}" alt="Poster Image as Backdrop for {{ movie.title }}" loading="lazy">
                {% else %}
                <img src="{{ url_for('static', filename='images/default_backdrop.jpg') }}" alt="No Backdrop Available" loading="lazy">
                {% endif %}
            </div>
            {% endif %}

            <!-- Poster and Content Container -->
            <div class="poster-content-container">
                <!-- Poster Image -->
                {% if movie.posters %}
                <div class="wrap-poster">
                    <img src="{{ movie.posters[0] }}" alt="Poster Image for {{ movie.title }}" loading="lazy">
                    
                    {% if movie.movie_file_url %}
                    <!-- Play Movie Button -->
                    <a href="{{ url_for('movie_player', movie_file_path=movie.movie_file_path) }}" class="play-trailer-overlay" target="_blank" aria-label="Play Movie {{ movie.title }}">
                        <i class="fas fa-play"></i>
                    </a>
                    {% elif movie.video_link %}
                    <a href="{{ movie.video_link }}" class="play-trailer-overlay" target="_blank" aria-label="Play Trailer for {{ movie.title }}">
                        <i class="fas fa-play"></i>
                    </a>
                    {% endif %}
                </div>
                {% endif %}

                <!-- Additional Information -->
                <div class="content-wrap">
                    <h1 class="movie-title">{{ movie.title }} <span class="release-year">({{ movie.release_date }})</span></h1>
                    <h2 class="original-title">Originaltitel: <em>{{ movie.original_title }}</em></h2>

                    <div class="movie-info">
                        <!-- Info Items -->
                        {% if movie.directors %}
                        <div class="info-item">
                            <i class="fas fa-video"></i>
                            <span class="director">
                                {% for director in movie.directors %}
                                <a href="#" 
                                   class="person-link" 
                                   data-person-name="{{ director.name }}" 
                                   data-person-id="{{ director.tmdb_id }}">{{ director.name }}</a>{% if not loop.last %}, {% endif %}
                              {% endfor %}                                
                            </span>
                        </div>
                        {% endif %}
                        <div class="info-item">
                            <i class="fas fa-clock"></i>
                            <span class="info-text">{{ movie.runtime }} Minuten</span>
                        </div>
                        <div class="info-item">
                            <i class="fas fa-star"></i>
                            <span class="info-text">
                                <a href="https://www.imdb.com/title/tt{{ movie.imdb_id }}" target="_blank">{{ movie.rating }}</a>
                            </span>
                        </div>
                        <div class="info-item">
                            <i class="fas fa-tags"></i>
                            <span class="info-text">
                                {% for genre in movie.genres %}
                                    <a href="#" class="genre-filter" data-genre="{{ genre }}">{{ genre }}</a>{% if not loop.last %}, {% endif %}
                                {% endfor %}
                            </span>
                        </div>
                        <div class="info-item">
                            <i class="fas fa-globe"></i>
                            <span class="info-text">
                                {% for country in movie.countries %}
                                    <a href="#" class="country-filter" data-country="{{ country }}">{{ country }}</a>{% if not loop.last %}, {% endif %}
                                {% endfor %}
                            </span>
                        </div>
                        <div class="info-item">
                            <i class="fas fa-map-marker-alt"></i>
                            <span class="info-text">
                                {{ movie.standort}}
                            </span>
                        </div>
                        <!-- Awards -->
                        {% if movie.awards %}
                        <div class="info-item">
                            <i class="fas fa-trophy"></i>
                            <span class="info-text">
                                {{ movie.awards | join(', ') }}
                            </span>
                        </div>
                        {% endif %}

                        <!-- Spoken Languages -->
                        {% if movie.spoken_languages %}
                        <div class="info-item">
                            <i class="fas fa-language"></i>
                            <span class="info-text">
                                {{ movie.spoken_languages | join(', ') }}
                            </span>
                        </div>
                        {% endif %}
                        <!-- Formats -->
                        {% if movie.formats %}
                        <div class="info-item">
                            <i class="fas fa-film"></i>
                            <span class="info-text">
                                {{ movie.formats }}
                            </span>
                        </div>
                        {% endif %}
                    </div>

                    <!-- Additional Movie Information -->
                    <div class="additional-info">
                        {% if movie.overview %}
                            <p class="overview">
                                {{ movie.overview }}
                            </p>
                        {% endif %}

                        {% if movie.actors %}
                            <p class="actors">
                                <strong>Schauspieler:</strong>
                                {% for actor in movie.actors %}
                                <a href="#" 
                                   class="person-link" 
                                   data-person-name="{{ actor.name }}" 
                                   data-person-id="{{ actor.tmdb_id }}">{{ actor.name }}</a>{% if not loop.last %}, {% endif %}
                              {% endfor %}
                            </p>
                        {% endif %}
                        {% if movie.keywords %}
                        <p class="keyword-list">
                            <strong>SchlagwÃ¶rter:</strong>
                            {% set kw_list = movie.keywords.split(',') %}
                            {% for kw in kw_list %}
                                {% set kw_trimmed = kw.strip() %}
                                <a href="{{ url_for('catalog') }}?search={{ kw_trimmed|urlencode }}">{{ kw_trimmed }}</a>{% if not loop.last %}, {% endif %}
                            {% endfor %}
                        </p>
                        {% endif %}                        

                        {% if movie.wiki_critics %}
                            <p class="wiki-critics">
                                <strong>Kritiken:</strong>
                                {{ movie.wiki_critics }}
                            </p>
                        {% endif %}
                        {% if movie.wiki_background %}
                            <p class="wiki-background">
                                <strong>Hintergrund:</strong>
                                {{ movie.wiki_background }}
                            </p>
                        {% endif %}
                    </div>
                    <div class="similar-movies-section">
                        <a href="{{ url_for('catalog') }}?similar={{ movie.movie_id }}" class="find-similar-button">
                            Ã„hnliche Filme suchen
                        </a>
                    </div>                   
                </div> <!-- End of content-wrap -->
            </div> <!-- End of poster-content-container -->

        </section>
    </main>
    <footer>
        <div class="footer-content">
            <p>&copy; 2024 FORMAT Filmkunst-Verleih e.V. Alle Rechte vorbehalten.</p>
        </div>
    </footer>
</div>


<script src="https://unpkg.com/swiper/swiper-bundle.min.js"></script>
<script src="{{ url_for('static', filename='js/navbar.js') }}"></script>
<script src="{{ url_for('static', filename='js/movie_details.js') }}"></script>

</body>
</html>

--- File: templates\movie_player.html ---
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>{{ filename }} - Movie Player</title>

    <!-- Include Font Awesome CSS -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" crossorigin="anonymous">

    <style>
        body {
            margin: 0;
            background-color: #000;
            overflow: hidden;
        }
        .video-container {
            position: relative;
            width: 100vw;
            height: 100vh;
            overflow: hidden;
        }
        video {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            max-width: 100%;
            max-height: 100%;
            width: auto;
            height: auto;
            background-color: #000;
        }
        #subtitleButton {
            position: absolute;
            top: 20px;
            right: 20px;
            z-index: 1000;
            background-color: rgba(0, 0, 0, 0.7);
            color: #fff;
            width: 50px;
            height: 50px;
            border: none;
            cursor: pointer;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            transition: background-color 0.3s ease, transform 0.3s ease;
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.5);
            border: 2px solid rgba(255, 255, 255, 0.5);
            font-size: 24px;
        }
        #subtitleButton:hover {
            background-color: rgba(255, 255, 255, 0.2);
            transform: scale(1.1);
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.7);
        }
        #subtitleMenu {
            display: none;
            position: absolute;
            top: 60px;
            right: 20px;
            background-color: rgba(0, 0, 0, 0.9);
            padding: 10px;
            border-radius: 5px;
            z-index: 1000;
        }
        #subtitleMenu ul {
            list-style: none;
            margin: 0;
            padding: 0;
        }
        #subtitleMenu li {
            margin-bottom: 5px;
        }
        #subtitleMenu button {
            background: none;
            border: none;
            color: #fff;
            cursor: pointer;
            font-size: 1em;
        }
        #subtitleMenu button:hover {
            text-decoration: underline;
        }
    </style>
</head>
<body>
    <div class="video-container">
        <!-- 
            1) The <video> references our /play_movie route, 
               which actually streams the MP4 file from disk.
        -->
        <video id="moviePlayer" controls autoplay tabindex="0">
            <source src="{{ url_for('play_movie', movie_file_path=movie_file_path) }}" type="video/mp4">
            Your browser does not support the video tag.
        </video>

        <!-- 
            2) Subtitle Selection (only shown if subtitles are present).
        -->
        {% if subtitles|length > 0 %}
        <button id="subtitleButton" aria-label="Toggle Subtitles">
            <i class="fas fa-closed-captioning"></i>
        </button>
        <div id="subtitleMenu">
            <ul>
                {% for subtitle in subtitles %}
                <li>
                    <!-- 
                        Instead of embedding {{ folder_name }} in a string, we pass it 
                        via function argument loadSubtitle(folder_name, subtitleFile).
                    -->
                    <button onclick="loadSubtitle('{{ folder_name }}','{{ subtitle }}')">
                        {{ subtitle }}
                    </button>
                </li>
                {% endfor %}
                <li>
                    <button onclick="removeSubtitles()">Disable Subtitles</button>
                </li>
            </ul>
        </div>
        {% endif %}
    </div>

    <script>
        // JavaScript for subtitle handling
        const subtitleButton = document.getElementById('subtitleButton');
        const subtitleMenu = document.getElementById('subtitleMenu');
        const videoPlayer = document.getElementById('moviePlayer');

        if (subtitleButton) {
            subtitleButton.addEventListener('click', (event) => {
                event.stopPropagation();
                subtitleMenu.style.display = subtitleMenu.style.display === 'block' ? 'none' : 'block';
            });
        }

        // 
        // loadSubtitle(folder, subtitleFile)
        //   - dynamically adds a <track> for the chosen subtitle
        //
        function loadSubtitle(folder, subtitleFile) {
            // Remove any existing <track>
            const tracks = videoPlayer.getElementsByTagName('track');
            for (let i = tracks.length - 1; i >= 0; i--) {
                videoPlayer.removeChild(tracks[i]);
            }
            // Create new track element
            const track = document.createElement('track');
            track.kind = 'subtitles';
            track.label = subtitleFile;
            track.srclang = 'en';
            // Use /subtitle/folderName/subtitleFile
            track.src = `/subtitle/${encodeURIComponent(folder)}/${encodeURIComponent(subtitleFile)}`;
            track.default = true;
            videoPlayer.appendChild(track);

            // Hide menu after choosing
            subtitleMenu.style.display = 'none';
        }

        // removeSubtitles() - removes any <track> from the <video>
        function removeSubtitles() {
            const tracks = videoPlayer.getElementsByTagName('track');
            for (let i = tracks.length - 1; i >= 0; i--) {
                videoPlayer.removeChild(tracks[i]);
            }
            subtitleMenu.style.display = 'none';
        }

        // Hide the subtitle menu when clicking outside
        document.addEventListener('click', function(event) {
            if (subtitleMenu.style.display === 'block' && !subtitleMenu.contains(event.target) 
                && event.target !== subtitleButton) {
                subtitleMenu.style.display = 'none';
            }
        });

        // Keyboard controls
        const keyActions = {
            32: 'togglePlay',        // Spacebar
            37: 'seekBackward',      // Left arrow
            39: 'seekForward',       // Right arrow
            38: 'volumeUp',          // Up arrow
            40: 'volumeDown',        // Down arrow
            77: 'toggleMute',        // 'M' key
            70: 'toggleFullscreen',  // 'F' key
        };

        document.addEventListener('keydown', function(event) {
            // Avoid interfering with input fields
            if (event.target.tagName.toLowerCase() === 'input' || event.target.isContentEditable) {
                return;
            }
            const action = keyActions[event.keyCode];
            if (action) {
                event.preventDefault();
                handleAction(action);
            }
        });

        function handleAction(action) {
            switch(action) {
                case 'togglePlay':
                    if (videoPlayer.paused) {
                        videoPlayer.play();
                    } else {
                        videoPlayer.pause();
                    }
                    break;
                case 'seekBackward':
                    videoPlayer.currentTime = Math.max(videoPlayer.currentTime - 5, 0);
                    break;
                case 'seekForward':
                    videoPlayer.currentTime = Math.min(videoPlayer.currentTime + 5, videoPlayer.duration);
                    break;
                case 'volumeUp':
                    videoPlayer.volume = Math.min(videoPlayer.volume + 0.1, 1);
                    break;
                case 'volumeDown':
                    videoPlayer.volume = Math.max(videoPlayer.volume - 0.1, 0);
                    break;
                case 'toggleMute':
                    videoPlayer.muted = !videoPlayer.muted;
                    break;
                case 'toggleFullscreen':
                    toggleFullscreen();
                    break;
            }
        }

        function toggleFullscreen() {
            if (!document.fullscreenElement) {
                if (videoPlayer.requestFullscreen) {
                    videoPlayer.requestFullscreen();
                } else if (videoPlayer.webkitRequestFullscreen) {
                    videoPlayer.webkitRequestFullscreen();
                } else if (videoPlayer.msRequestFullscreen) {
                    videoPlayer.msRequestFullscreen();
                }
            } else {
                if (document.exitFullscreen) {
                    document.exitFullscreen();
                } else if (document.webkitExitFullscreen) {
                    document.webkitExitFullscreen();
                } else if (document.msExitFullscreen) {
                    document.msExitFullscreen();
                }
            }
        }
    </script>
</body>
</html>

