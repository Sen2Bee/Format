=== Code Summary Generated at 2024-10-25 20:49:51 ===

=== Project Folder Structure ===

Format/
    static/
        assets/
            fonts/
                Spacia Heavy.ttf
        css/
            main.css
            base/
                reset.css
                responsive.css
                typography.css
                variables.css
            components/
                autocomplete.css
                buttons.css
                cards.css
                carousel.css
                dropdown.css
                filter.css
                forms.css
                pagination.css
                progress_indicator.css
                search.css
                toggle_view.css
            layout/
                footer.css
                hero.css
                navbar.css
            pages/
                about.css
                catalog.css
                contact.css
                events.css
        images/
            backdrop_1.jpg
            backdrop_2.jpg
            backdrop_3.jpg
            backdrop_4.jpg
            dd_bg_years.jpeg
            dd_bg_years.webp
            default_movie.png
            default_person.png
            event1.jpg
            event2.jpg
            event3.jpg
            logo.png
            movie1.jpg
            movie2.jpg
            team1.jpg
            team2.jpg
        js/
            carousel.js
            catalog.js
            entry.js
            filter.js
            hero.js
            main.js
            navbar.js
            pagination.js
            theme_toggle.js
    templates/
        catalog.html
        index.html

=== File Contents ===

--- File: static\css\main.css ---
/* main.css */

/* Import Base Styles */
@import url('./base/reset.css');
@import url('./base/variables.css');
@import url('./base/typography.css');
@import url('./base/responsive.css');

/* Import Layout Styles */
@import url('./layout/navbar.css');
@import url('./layout/footer.css');
@import url('./layout/hero.css');

/* Import Component Styles */
@import url('./components/progress_indicator.css');
@import url('./components/carousel.css');
@import url('./components/cards.css');
@import url('./components/buttons.css');
@import url('./components/forms.css');
@import url('./components/pagination.css');
@import url('./components/search.css');
@import url('./components/dropdown.css');
@import url('./components/autocomplete.css');

/* Import Page-Specific Styles */
@import url('./pages/catalog.css');
@import url('./pages/about.css');
@import url('./pages/contact.css');
@import url('./pages/events.css');



--- File: static\css\base\reset.css ---
/* reset.css */

/* Refined Reset */
*, *::before, *::after {
    margin: 0;
    padding: 0;
    box-sizing: inherit;
}

/* Apply box-sizing globally */
html {
    box-sizing: border-box;
}

/* Normalize link styles but allow color */
a {
    text-decoration: none;
    color: inherit;
}

/* Images should not exceed their container */
img {
    max-width: 100%;
    height: auto;
}

/* Lists should not have default styles */
ul, ol {
    list-style: none;
    margin-left: 0;
}

/* Prevent overflow issues */
html, body {
    overflow-x: hidden;
    font-family: 'Open Sans', sans-serif;
    background-color: var(--background-dark);
}

/* Screen-reader only text */
.sr-only {
    position: absolute;
    width: 1px;
    height: 1px;
    padding: 0;
    margin: -1px;
    overflow: hidden;
    clip: rect(0,0,0,0);
    white-space: nowrap;
    border: 0;
}

--- File: static\css\base\responsive.css ---
/* Mobile-First Base Styles */

/* Ensure all elements are responsive by default */

/* Extra Small Devices (Mobile Phones, <480px) */
@media (max-width: var(--breakpoint-xs)) {
    /* Navbar */
    header .container {
        flex-direction: column;
        align-items: flex-start;
        height: auto;
        padding: 10px;
    }

    nav ul {
        flex-direction: column;
        width: 100%;
    }

    nav ul li {
        width: 100%;
    }

    nav ul li a {
        padding: 10px 0;
        width: 100%;
        display: block;
    }

    /* Search Bar */
    .search-bar {
        width: 100%;
        margin-top: 10px;
    }

    .search-bar input {
        width: 100%;
    }

    /* Hero Carousel */
    .hero-carousel {
        height: 50vh;
    }

    .hero-carousel .overlay {
        bottom: 10%;
        left: 5%;
        max-width: 90%;
    }

    /* Sidebar */
    .sidebar {
        display: none; /* Hide sidebar on mobile */
    }

    /* Movie Grid */
    .movie-listing {
        padding: 0;
    }

    .view-toggle {
        display: flex;
        justify-content: flex-end;
        margin-bottom: 10px;
    }

    .movies.grid-view {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(150px, 1fr));
        gap: 15px;
    }

    .movie-card {
        flex-direction: column;
    }

    /* Footer */
    footer .container {
        flex-direction: column;
        align-items: flex-start;
    }

    footer .footer-links ul {
        flex-direction: column;
    }

    footer .footer-social {
        margin-top: 10px;
    }
}

/* Small Devices (Tablet Portrait, 480px - 767px) */
@media (min-width: var(--breakpoint-xs)) and (max-width: var(--breakpoint-sm)) {
    /* Navbar */
    header .container {
        flex-direction: row;
        justify-content: space-between;
    }

    nav ul {
        flex-direction: row;
    }

    nav ul li {
        width: auto;
    }

    /* Search Bar */
    .search-bar {
        width: 60%;
    }

    /* Hero Carousel */
    .hero-carousel {
        height: 60vh;
    }

    /* Sidebar */
    .sidebar {
        width: 200px;
    }

    /* Movie Grid */
    .movies.grid-view {
        grid-template-columns: repeat(auto-fill, minmax(160px, 1fr));
        gap: 20px;
    }
}

/* Medium Devices (Tablet Landscape, 768px - 1023px) */
@media (min-width: var(--breakpoint-sm)) and (max-width: var(--breakpoint-md)) {
    /* Navbar */
    header .container {
        padding: 15px;
    }

    /* Search Bar */
    .search-bar {
        width: 50%;
    }

    /* Hero Carousel */
    .hero-carousel {
        height: 65vh;
    }

    /* Sidebar */
    .sidebar {
        display: block;
        width: var(--sidebar-width);
    }

    /* Movie Grid */
    .movies.grid-view {
        grid-template-columns: repeat(auto-fill, minmax(180px, 1fr));
        gap: 25px;
    }
}

/* Large Devices (Desktop, 1024px - 1199px) */
@media (min-width: var(--breakpoint-md)) and (max-width: var(--breakpoint-lg)) {
    /* Navbar */
    header .container {
        padding: 20px;
    }

    /* Search Bar */
    .search-bar {
        width: 40%;
    }

    /* Hero Carousel */
    .hero-carousel {
        height: 70vh;
    }

    /* Movie Grid */
    .movies.grid-view {
        grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
        gap: 30px;
    }
}

/* Extra Large Devices (Large Desktop, â‰¥1200px) */
@media (min-width: var(--breakpoint-lg)) {
    /* Navbar */
    header .container {
        padding: 25px;
    }

    /* Search Bar */
    .search-bar {
        width: 30%;
    }

    /* Hero Carousel */
    .hero-carousel {
        height: 80vh;
    }

    /* Movie Grid */
    .movies.grid-view {
        grid-template-columns: repeat(auto-fill, minmax(220px, 1fr));
        gap: 35px;
    }
}

--- File: static\css\base\typography.css ---
/* typography.css */

/* Import Fonts */
@import url('https://fonts.googleapis.com/css2?family=Playfair+Display:wght@400;700&family=Roboto:wght@400;700&display=swap');

/* Typography Styles */
body {
    font-family: var(--font-body);
    color: var(--text-light);
    background-color: var(--background-dark);
    line-height: 1.6;
}

/* Headings */
h1, h2, h3, h4, h5, h6 {
    font-family: var(--secondary-text-color);
    color: var(--text-light);
    /* margin-bottom: 15px; */
}

/* Paragraphs */
p {
    margin-bottom: 15px;
    color: var(--secondary-text-color);
    font-size: 1.1em;
}

/* Links */
a {
    color: var(--link-color);
    transition: color var(--transition-duration) ease;
}

a:hover {
    color: var(--link-hover-color);
}

/* Buttons inside forms and other components */
button {
    font-family: var(--font-body);
}

--- File: static\css\base\variables.css ---
:root {
    /* Color Variables */
    --primary-color: #FAF8F6; /* Soft off-white */
    --secondary-color: #3D3D3D; /* Dark charcoal gray */
    --background-color: #FFFDFB; /* Very light beige */
    --text-color: #2C2C2C; /* Dark gray for text */
    --header-background: #EFEDEA; /* Slightly darker than background */
    --footer-background: #EFEDEA; /* Matching header */
    --button-hover: #E0DED9; /* Hover effect */

    /* Additional Color Variables */
    --button-background: #FFFFFF; /* White */
    --background-dark: #DAD7D2; /* Darker background for sections */
    --secondary-text-color: #FFFFFF; /* White text on dark backgrounds */
    --secondary-secondary-text-color: #B5B2AD; /* Subtle light gray */
    --accent-color: #846c1e; /* Muted terracotta */
    --dropdown-background: #FFFFFF; /* Dropdown background */
    --highlight-color: #846c1e; /* Same as accent */
    --movie-card-background: #FFFFFF; /* Movie card background */
    --movie-card-hover-shadow: rgba(0, 0, 0, 0.1); /* Soft shadow */
    --overlay-background: rgba(0, 0, 0, 0.5); /* Overlay background */
    --tooltip-background: #3D3D3D; /* Dark tooltip background */
    --tooltip-text-color: #FFFFFF; /* Tooltip text color */
    --missing-poster-border: #846c1e; /* Accent color */

    /* Font Variables */
    --font-family: 'Lato', sans-serif; /* Lato as the main font */
    --font-body: 'Lato', sans-serif; /* Body font family */
    --font-heading: 'Cardo', serif; /* Heading font family */
    --font-cursive: 'Pinyon Script', cursive;

    --font-size-base: 16px; /* Base font size */
    --font-size-lg: 1.25rem; /* Large font size */
    --font-size-sm: 0.875rem; /* Small font size */
    --meta-data-font-size: clamp(0.9rem, 1.2vw, 1.2rem); /* Adaptive font size */

    /* Layout Variables */
    --header-height: 60px; /* Header height */
    --footer-height: 200px; /* Footer height */
    --sidebar-width: 250px; /* Sidebar width */
    --big-button-height: 50px; /* Height for larger buttons or dropdown headers */

    /* Transition Variables */
    --transition-duration: 0.3s; /* Standard transition duration */

    /* Responsive Breakpoints */
    --breakpoint-xs: 480px; /* Extra Small Devices */
    --breakpoint-sm: 768px; /* Small Devices */
    --breakpoint-md: 1024px; /* Medium Devices */
    --breakpoint-lg: 1200px; /* Large Devices */

    /* Toggle Button Variables */
    --toggle-button-size: 24px;
    --toggle-button-color: var(--secondary-color);
    --toggle-button-active-color: var(--accent-color);

    /* Spacing Variables */
    --spacing-small: 8px;
    --spacing-medium: 16px;
    --spacing-large: 24px;

    /* Border Radius Variables */
    --border-radius-small: 4px;
    --border-radius-medium: 8px;
    --border-radius-large: 10px;

    /* Button-Specific Color Variables */
    --button-border-color: #CCCCCC; /* Light Gray */
    --button-text-color: #2C2C2C; /* Dark Gray */
    --button-hover-background: #E0DED9; /* Very Light Gray */
    --button-active-background: #D3D0CB; /* Light Gray */

    --poster-width: 70%;
    --catalog-width: 1200px;
}
[data-theme="dark"] {
    /* Override Color Variables for Dark Theme */
    --primary-color: #1A1A1A; /* Dark charcoal */
    --secondary-color: #EAEAEA; /* Light gray text */
    --background-color: #121212; /* Near black */
    --text-color: #D6D6D6; /* Light gray */
    --header-background: #151515; /* Slight variation */
    --footer-background: #151515; /* Matching header */
    --button-hover: #2A2A2A; /* Button hover */

    /* Additional Color Variables */
    --button-background: #1F1F1F; /* Dark button background */
    --background-dark: #1C1C1C; /* For dark sections */
    --secondary-text-color: #FFFFFF; /* White text */
    --secondary-secondary-text-color: #A0A0A0; /* Light gray */
    --accent-color: #B58B4B; /* Muted gold */
    --dropdown-background: #1A1A1A; /* Dropdown background */
    --highlight-color: #B58B4B; /* Same as accent */
    --movie-card-background: #1F1F1F; /* Movie card background */
    --movie-card-hover-shadow: rgba(255, 255, 255, 0.1); /* Light shadow */
    --overlay-background: rgba(0, 0, 0, 0.7); /* Overlay */
    --tooltip-background: #EAEAEA; /* Light tooltip background */
    --tooltip-text-color: #1A1A1A; /* Tooltip text color */
    --missing-poster-border: #B58B4B; /* Accent color */

    /* Toggle Button Variables */
    --toggle-button-color: var(--secondary-color);
    --toggle-button-active-color: var(--accent-color);

    /* Button-Specific Color Variables */
    --button-border-color: #444444; /* Dark Gray */
    --button-text-color: #D6D6D6; /* Light Gray */
    --button-hover-background: #2A2A2A; /* Dark Gray */
    --button-active-background: #333333; /* Slightly lighter gray */

    /* Update other variables as needed */
}

--- File: static\css\components\autocomplete.css ---
/* autocomplete.css */

/* Autocomplete Styles */
#autocomplete-list {
    position: absolute;
    top: 100%;
    left: 0;
    right: 0;
    background-color: var(--background-dark);
    /* border: 1px solid #ccc; */
    border-radius: 0 0 5px 5px;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.3);
    max-height: 300px;
    overflow-y: auto;
    scrollbar-width: thin; /* Firefox */
    -ms-overflow-style: none; /* IE and Edge */

    /* Hide scrollbar for Firefox */
    scrollbar-width: none;
    
    /* Hide scrollbar for Internet Explorer and Edge Legacy */
    -ms-overflow-style: none;    
}

#autocomplete-list::-webkit-scrollbar {
    display: none; /* Hide scrollbar in WebKit browsers */
}

/* Rest of your autocomplete styles */

.autocomplete-item {
    padding: 10px;
    color: #f5f5f5;
    cursor: pointer;
    transition: background-color var(--transition-duration), color var(--transition-duration);
}

.autocomplete-item:hover {
    background-color: var(--button-hover-background);
    color: #fff;
}

.autocomplete-item strong {
    font-weight: bold;
    color: var(--accent-color);
}

.autocomplete-item small {
    color: var(--secondary-text-color);
    font-size: 0.9em;
}

--- File: static\css\components\buttons.css ---
/* File: static/css/components/buttons.css */

/* Filter Buttons Container */
.filter-buttons-container {
    display: flex;
    flex-wrap: wrap;
    gap: 15px;
    width: 100%;
    max-height: 500px;
    overflow-y: auto;
    scrollbar-width: none;
    -ms-overflow-style: none;
    position: relative;
    font-family: var(--font-body);
}

.filter-buttons-container::-webkit-scrollbar {
    display: none;
}

/* Filter Buttons */
.filter-button {
    background-color: var(--button-background); /* #ffffff */
    color: var(--button-text-color); /* #333333 */
    border: 1px solid var(--button-border-color); /* #CCCCCC */
    border-radius: 25px;
    cursor: pointer;
    transition: background-color var(--transition-duration), transform var(--transition-duration);
    font-size: clamp(0.9em, 1.5vw, 1.3em); /* Responsive font size */
    flex: 1 0 calc(33.33% - 15px);
    text-align: center;
    box-sizing: border-box;
    font-family: var(--font-body);
    height: 30px; /* Example height */
}

.filter-button.selected,
.filter-button:hover {
    background-color: var(--button-hover-background); /* #f0f0f0 */
    color: var(--button-text-color); /* #333333 */
    border: 1px solid var(--button-border-color); /* #CCCCCC */
}

/* Filters Buttons Row */
.filters-buttons-row {
    padding-top: 10px;
    display: flex;
    justify-content: flex-start;
    align-items: flex-start;
    gap: 10px;
    font-family: var(--font-body);
}

/* Filter Action Button */
.filter-action-button {
    display: flex;
    align-items: center;
    background-color: var(--background-dark); /* #ffffff */
    color: var(--text-color); /* #333333 */
    padding: 10px 20px;
    margin: 5px;
    border: 1px solid var(--button-border-color); /* #CCCCCC */
    border-radius: 3px;
    font-size: 1em;
    cursor: pointer;
    transition: background-color var(--transition-duration), box-shadow var(--transition-duration) ease;
    font-family: var(--font-body);
    line-height: 1;
    min-height: var(--big-button-height);
    align-self: center;
    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.3); /* Subtle shadow for depth */
}

.filter-action-button:hover {
    background-color: var(--button-hover-background); /* #f0f0f0 */
    color: var(--button-text-color); /* #333333 */
    border: 1px solid var(--button-border-color); /* #CCCCCC */
}

.filter-action-button:disabled {
    background-color: #ccc;
    cursor: not-allowed;
    opacity: 0.6;
}

/* Navigation Arrows */
.filter-nav-arrow {
    position: absolute;
    top: 65%;
    transform: translateY(-50%);
    width: var(--arrow-button-size);
    height: var(--arrow-button-size);
    background: transparent;
    border: none;
    color: var(--button-border-color); /* #CCCCCC */
    font-size: 1.5em;
    cursor: pointer;
    z-index: 5000;
    display: flex;
    align-items: center;
    justify-content: center;
    border-radius: 50%;
    transition: background-color 0.3s ease;
}

.filter-nav-arrow:hover {
    background-color: rgba(108, 107, 107, 0.6);
}

.filter-nav-arrow.left {
    left: 0;
}

.filter-nav-arrow.right {
    right: 0;
}

/* Hide arrows when not needed */
.filter-nav-arrow.hidden {
    display: none;
}

--- File: static\css\components\cards.css ---
/* General Movie Card Container */
.movie-card {
    display: flex;
    flex-direction: column; /* Default for grid view, stacks content vertically */
    background-color: var(--movie-card-background);
    color: var(--secondary-text-color);
    border-radius: var(--border-radius-medium);
    overflow: hidden;
    box-shadow: 0 4px 8px var(--movie-card-hover-shadow);
    transition: transform var(--transition-duration) ease, box-shadow var(--transition-duration) ease;
    position: relative;
    background-size: cover;
    background-position: center;
    background-repeat: no-repeat;
    height: 100%; /* Ensure all cards have equal height */
}

/* List View Styling */
.movie-listings.list-view .movie-card {
    flex-direction: row; /* Change layout to side-by-side in list view */
    align-items: stretch; /* Stretch items to match the card's height */
    height: 450px; /* Adjust as needed */
}

/* Overlay for Improved Text Visibility */
.movie-card::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: var(--overlay-background);
    opacity: 0;
    transition: opacity var(--transition-duration) ease;
    z-index: 1;
}

.movie-card:hover::before {
    opacity: 1;
}

/* Movie Content Wrapper (Metadata and Title) */
.movie-content-wrapper {
    flex: 1;
    display: flex;
    flex-direction: column;
    justify-content: space-between; /* Ensure items align top and bottom */
    gap: var(--spacing-small);
    padding: var(--spacing-medium);
    background: rgba(0, 0, 0, 0.7); /* Semi-transparent dark background */
    z-index: 2;
    border-radius: var(--border-radius-medium);
    position: relative;
}

.movie-listings.list-view .movie-content-wrapper {
    padding: var(--spacing-small); /* Reduce padding in list view if needed */
    background: rgba(0, 0, 0, 0.8); /* Slightly more opaque in list view */
    flex-direction: row;
}

/* Dedicated Info Wrapper */
.info-wrapper {
    display: flex;
    flex-direction: column; /* Default for grid view (vertical stack) */
    justify-content: flex-start; /* Ensure content stacks from top */
    flex: 1;
}

.movie-listings.list-view .info-wrapper {
    display: flex;
    flex-direction: column; /* Keep info stacked */
    justify-content: space-between; /* Title & metadata at the top, overview at the bottom */
    flex: 1;
}

/* Image Container */
.image-container {
    position: relative;
    width: var(--poster-width);
    aspect-ratio: 2 / 3; /* Keep the aspect ratio */
    overflow: hidden;
    border-radius: var(--border-radius-medium);
    transition: transform var(--transition-duration) ease;
}

.movie-listings.list-view .image-container {
    width: auto; /* Fixed width for list view */
    aspect-ratio: auto; /* Let the height fill based on the container */
    flex-shrink: 0;
    height: 100%; /* Match the height of the card */
    margin-right: var(--spacing-medium); /* Space between image and text */
}

.image-container img {
    width: 100%;
    height: 100%;
    object-fit: cover;
    border-radius: var(--border-radius-medium);
    transition: transform var(--transition-duration) ease;
}

.movie-card:hover .image-container img {
    transform: scale(1.05); /* Zoom-in effect on hover */
}

/* Hover Title */
.hover-title {
    position: absolute;
    font-size: var(--meta-data-font-size); /* Responsive font size */
    bottom: 0;
    left: 0;
    width: 100%;
    background: var(--overlay-background);
    color: var(--secondary-text-color);
    text-align: center;
    padding: var(--spacing-small);
    opacity: 0;
    transition: opacity var(--transition-duration) ease-in-out;
}

.image-container:hover .hover-title {
    opacity: 1;
}

/* Info Section */
.info-section {
    display: flex;
    flex-direction: column;
    justify-content: flex-start;
    width: 100%; /* Ensure full width below the poster */
    z-index: 2;
}

.movie-listings.list-view .info-section {
    flex: 1; /* Take remaining space in list view */
}

.header-section h2 {
    margin: 0;
    font-size: clamp(1rem, 2vw, 1.5rem); /* Ensure font-size adapts to screen size */
    color: var(--text-color);
    text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.8);
    font-family: var(--font-heading);
    text-transform: uppercase;
    white-space: nowrap; /* Prevents wrapping */
    overflow: hidden; /* Hides overflowed text */
    text-overflow: ellipsis; /* Adds ellipsis ("...") to indicate overflow */
    max-width: 100%; /* Ensure it fits within the available space */
}

/* Metadata Section */
.metadata {
    display: flex;
    flex-direction: column;
    gap: var(--spacing-small);
    font-size: var(--meta-data-font-size); /* Adaptive font size */
    color: var(--secondary-secondary-text-color);
    background-color: rgba(0, 0, 0, 0.6); /* Semi-transparent dark background */
    padding: var(--spacing-medium);
    border-radius: var(--border-radius-small);
}

.movie-listings.list-view .metadata {
    padding: var(--spacing-small); /* Reduce padding in list view */
}

.metadata p {
    margin: 5px 0;
    color: var(--secondary-text-color);
    text-shadow: 1px 1px 3px rgba(0, 0, 0, 0.8);
}

/* Updated styles for inline-meta */
.inline-meta {
    display: flex;
    flex-wrap: wrap;
    gap: var(--spacing-small);
    padding-top: var(--spacing-small);
    opacity: 0.5;
}

.meta-item {
    display: flex;
    align-items: center;
    font-size: var(--meta-data-font-size);
    margin-right: var(--spacing-small);
}

.meta-item i {
    margin-right: 5px;
}

.meta-item span {
    font-size: var(--meta-data-font-size);
    color: var(--secondary-text-color);
}

/* Adjust font size for smaller screens if necessary */
@media (max-width: var(--breakpoint-sm)) {
    .meta-item {
        font-size: 0.9em;
    }
}

/* Grid View: Position inline-meta inside image-container */
.movie-listings:not(.list-view) .movie-card .inline-meta {
    display: flex;
    flex-direction: column;
    position: absolute; 
    top: 20%; 
    right: 10px; 
    transform: translateY(-50%);
    background: rgba(0, 0, 0, 0.6); 
    padding: var(--spacing-small);
    border-radius: var(--border-radius-small);
    z-index: 3;
    width: 25%;
}

/* Ensure image-container is position: relative to contain absolute children */
.movie-listings:not(.list-view) .movie-card .image-container {
    position: relative;
}

/* List View: Keep inline-meta in its original position */
.movie-listings.list-view .movie-card .inline-meta {
    position: static; /* Revert to default positioning */
    background: none; /* Remove background if necessary */
    border: none; /* Remove border if necessary */
    padding-top: 5px; /* Remove padding if necessary */
    padding-bottom: 5px; /* Remove padding if necessary */
    margin: 0; /* Remove margin if necessary */
    width: 100%; /* Ensure it takes full width in list view */
    border-top: 1px solid var(--button-border-color);
    border-bottom: 1px solid var(--button-border-color);
    /* border-bottom: 1px solid var(--button-border-color); */
}

/* Adjustments for .inline-meta content in Grid View */
.movie-listings:not(.list-view) .movie-card .inline-meta .meta-item {
    margin-bottom: var(--spacing-small); /* Space between meta items */
}

.movie-listings:not(.list-view) .movie-card .inline-meta .meta-item span {
    font-size: 0.9em; /* Reduce font size slightly if needed */
}

/* Tooltip container for countries */
.country-tooltip {
    position: relative;
    display: inline-block;
    cursor: help;
}

/* Tooltip text for countries */
.country-tooltip::before {
    content: attr(data-country);
    visibility: hidden;
    opacity: 0;
    background-color: var(--tooltip-background);
    color: var(--tooltip-text-color);
    text-align: center;
    border-radius: var(--border-radius-small);
    padding: 8px 12px;
    font-size: var(--meta-data-font-size);
    position: absolute;
    z-index: 1000;
    bottom: 125%;
    left: 50%;
    transform: translateX(-50%);
    white-space: nowrap;
    box-shadow: 0px 4px 8px rgba(0, 0, 0, 0.3);
    transition: opacity var(--transition-duration) ease-in-out;
    max-width: 200px;
    word-wrap: break-word;
}

/* Show tooltip on hover */
.country-tooltip:hover::before {
    visibility: visible;
    opacity: 1;
}

/* Optional arrow under the tooltip for countries */
.country-tooltip::after {
    content: "";
    position: absolute;
    bottom: 100%;
    left: 50%;
    transform: translateX(-50%);
    border-width: 5px;
    border-style: solid;
    border-color: transparent transparent var(--tooltip-background) transparent;
    opacity: 0;
    transition: opacity var(--transition-duration) ease-in-out;
}

.country-tooltip:hover::after {
    opacity: 1;
}

/* Tooltip container for persons */
.person-tooltip {
    color: var(--accent-color);
    text-decoration: underline dotted;
    cursor: pointer;
}

/* Optional: Style the content inside Tippy.js tooltips */
.tooltip-person-content {
    display: flex;
    flex-direction: column;
    align-items: center;
}

.tooltip-person-content img {
    width: 100%;
    height: auto;
    border-radius: var(--border-radius-small);
    margin-bottom: 8px;
    object-fit: cover;
}

.tooltip-person-content .tooltip-name {
    display: block;
    font-weight: bold;
    font-size: 1.1em;
    text-transform: capitalize;
}

/* Location/Standort */
.standort {
    font-size: var(--meta-data-font-size);
    color: var(--secondary-secondary-text-color);
    margin-top: var(--spacing-small);

    padding-top: var(--spacing-small);
    text-shadow: 1px 1px 3px rgba(0, 0, 0, 0.8);
}

/* Overview Section */
.overview-section {
    font-size: var(--meta-data-font-size);
    padding: 15px;
    background-color: rgba(0, 0, 0, 0.7); /* Dark semi-transparent background */
    border-radius: var(--border-radius-small);
    color: var(--secondary-secondary-text-color);
    line-height: 1.4;
    transition: font-weight var(--transition-duration) ease;
    position: relative;
    text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.9);
}

.overview-section p {
    margin: 0;
    color: var(--secondary-secondary-text-color);
}

.overview-section a {
    color: var(--accent-color);
    text-decoration: none;
    font-weight: bold;
    text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.9);
}

.overview-section a:hover {
    text-decoration: underline;
}

/* Responsive Styles */

/* Tablet (Max Width: 1024px) */
@media (max-width: var(--breakpoint-md)) {
    .movie-listings {
        max-width: 1000px;
    }

    .movie-card {
        gap: 15px;
    }
}

/* Mobile (Max Width: 768px) */
@media (max-width: var(--breakpoint-sm)) {
    .movie-listings {
        grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
    }

    .movie-card {
        gap: 10px;
    }

    .info-section,
    .overview-section {
        padding: 10px;
    }

    .header-section h2 {
        font-size: 1.2em;
    }

    .metadata {
        padding: 0;
    }
}

/* Very Small Mobile (Max Width: 480px) */
@media (max-width: var(--breakpoint-xs)) {
    .movie-listings {
        grid-template-columns: repeat(auto-fill, minmax(150px, 1fr));
    }

    .movie-card {
        gap: 8px;
    }

    .header-section h2 {
        font-size: 1em;
    }

    .movie-listings.list-view .movie-card {
        flex-direction: column; /* Stack vertically again for small screens */
        align-items: center;
    }

    .movie-listings.list-view .image-container {
        margin-right: 0;
        margin-bottom: var(--spacing-small);
        height: auto; /* Allow height to adjust */
    }
}

/* Missing Poster Styling */
.missing-poster {
    border: 2px dashed var(--missing-poster-border);
    opacity: 0.6;
}

--- File: static\css\components\carousel.css ---
/* Movie Carousel Section */
.movie-carousel-section {
    padding-top: 70px;
    background-color: var(--background-dark);
    text-align: center;
    position: relative;
}

.movie-carousel-section h2 {
    font-size: 1.2em;
    font-weight: 100;
    color: var(--text-light);
    z-index: 1;
    position: relative;
    font-family: var(--font-heading);
}

/* Swiper Container */
.swiper-container {
    width: 100%;
    padding-bottom: 10px;
    scrollbar-width: none;
    -ms-overflow-style: none;
}

.swiper-wrapper {
    display: flex;
    align-items: center;
}

/* Swiper Slides */
.swiper-slide {
    display: flex;
    justify-content: center;
    align-items: center;
    padding: 0 5px;
}
.swiper-button-next, .swiper-button-prev {
    --swiper-navigation-color: var(--accent-color); /* Replace with your desired color */
    --swiper-theme-color: var(--background-dark); /* Replace with your desired color */
}


/* Featured Movie Card */
.featured-movie-card {
    position: relative;
    width: 180px; /* Default size for larger screens */
    overflow: hidden;
    border-radius: 8px;
    transition: width 0.3s ease-in-out; /* Smooth resizing */
}

.featured-movie-card img {
    width: 100%;
    height: 100%;
    object-fit: cover;
    transition: transform var(--transition-duration);
}

.featured-movie-card:hover img {
    transform: scale(1.05);
}

.featured-movie-overlay {
    position: absolute;
    bottom: 0;
    left: 0;
    width: 100%;
    background: rgba(0, 0, 0, 0.6);
    color: var(--secondary-text-color);
    padding: 10px;
    box-sizing: border-box;
    opacity: 0;
    transition: opacity var(--transition-duration);
}

.featured-movie-card:hover .featured-movie-overlay {
    opacity: 1;
}

.featured-movie-overlay h3 {
    margin: 0;
    font-size: 1em;
}

.featured-movie-overlay .btn-secondary {
    display: inline-block;
    padding: 5px 10px;
    background-color: var(--accent-color);
    color: var(--text-light);
    border-radius: 4px;
    text-decoration: none;
    font-size: 0.8em;
    transition: background-color var(--transition-duration);
}

.featured-movie-overlay .btn-secondary:hover {
    background-color: var(--link-hover-color);
    color: var(--secondary-text-color);
}

/* Swiper Pagination Adjustment */
.swiper-pagination {
    position: absolute;
    bottom: 10px;
    left: 0;
    width: 100%;
    text-align: center;
    z-index: 10;
}

/* Responsive Adjustments */
@media (max-width: 1200px) {
    .featured-movie-card {
        width: 150px; /* Slightly smaller size on medium screens */
    }

    .movie-carousel-section h2 {
        font-size: 1.1em;
    }
}

@media (max-width: 768px) {
    .featured-movie-card {
        width: 120px; /* Smaller size on tablets */
    }

    .movie-carousel-section h2 {
        font-size: 1em;
    }

    .featured-movie-overlay h3 {
        font-size: 0.9em;
    }

    .featured-movie-overlay .btn-secondary {
        font-size: 0.75em;
    }
}

@media (max-width: 480px) {
    .featured-movie-card {
        width: 100px; /* Smallest size for mobile screens */
    }

    .movie-carousel-section h2 {
        font-size: 0.9em;
    }

    .featured-movie-overlay h3 {
        font-size: 0.8em;
    }

    .featured-movie-overlay .btn-secondary {
        font-size: 0.7em;
        padding: 4px 8px; /* Reduce padding for small screens */
    }
}

/* theme-fonts.css */
.theme-action { font-family: 'Impact', sans-serif; font-weight: bold; color: #ff4d4d; }
.theme-comedy { font-family: 'Comic Sans MS', cursive; color: #ffcc00; }
.theme-drama { font-family: 'Times New Roman', Times, serif; font-style: italic; color: #993300; }
.theme-sci-fi { font-family: 'Courier New', Courier, monospace; color: #00ccff; }
.theme-romance { font-family: 'Georgia', serif; color: #cc0066; }
.theme-horror { font-family: 'Creepster', cursive; color: #cc0000; }
.theme-thriller { font-family: 'Arial Black', sans-serif; color: #666666; }
.theme-animated { font-family: 'Chalkduster', cursive; color: #3399ff; }
.theme-family { font-family: 'Verdana', sans-serif; color: #66cc66; }
.theme-adventure { font-family: 'Trebuchet MS', sans-serif; color: #ff6600; }
.theme-crime { font-family: 'Lucida Console', Monaco, monospace; color: #333399; }
.theme-fantasy { font-family: 'Papyrus', sans-serif; color: #663399; }
.theme-mystery { font-family: 'Garamond', serif; color: #9933cc; }
.theme-documentary { font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #999999; }
.theme-biography { font-family: 'Palatino', 'Palatino Linotype', 'Book Antiqua', serif; color: #cc9900; }
.theme-war { font-family: 'Stencil Std', 'Stencil', sans-serif; color: #666600; }
.theme-western { font-family: 'Rockwell', serif; color: #cc6633; }
.theme-musical { font-family: 'Brush Script MT', cursive; color: #ff66cc; }
.theme-sport { font-family: 'Copperplate Gothic Bold', sans-serif; color: #009999; }
.theme-history { font-family: 'Baskerville', serif; color: #660000; }

--- File: static\css\components\dropdown.css ---
/* dropdown.css */

/* Main Filters Container */
.main-filters-container {
    display: flex;
    flex-direction: row;
    justify-content: flex-start;
    align-items: center;
    gap: 10px;
    overflow-x: auto;
    width: 100%;
    box-sizing: border-box;
    font-family: var(--font-body);
    scrollbar-width: none;
    -ms-overflow-style: none;
}

.main-filters-container::-webkit-scrollbar {
    display: none;
}

/* Custom Dropdowns */
.custom-dropdown {
    flex: 1 1 180px;
    min-width: 150px;
    max-width: 800px;
    position: relative;
    font-family: var(--font-body);
    background-color: var(--button-background);
    border-radius: 3px;
    /* border: 1px solid var(--button-background); */
}

/* Dropdown Header */
.dropdown-header {
    display: flex;
    justify-content: flex-start; /* Aligns the clear icon and badge to the left */
    flex-direction: column; /* For two-row layout */
    background-color: var(--background-dark); /* Adjust background color */
    color: var(--text-color); /* Use lighter text for better contrast */
    cursor: pointer;
    font-size: clamp(0.9em, 1.5vw, 1.3em); /* Responsive font size */
    transition: background-color 0.3s ease, box-shadow 0.3s ease;
    font-family: var(--font-body);
    position: relative;
    height: var(--big-button-height); /* Let height adjust based on content */
    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.3); /* Subtle shadow for depth */
    white-space: nowrap; /* Prevents wrapping inside the header */
    overflow: hidden; /* Prevents content from overflowing */
    z-index: 4000; /* Ensure this is lower than the autocomplete list */
}


.dropdown-header:hover {
    border: 1px solid var(--accent-color);
}

.custom-dropdown.dropdown-open .dropdown-header {
    border-color: var(--accent-color);
}

/* Dropdown Header Icon and Text */
.dropdown-header .header-label {
    display: inline-flex;
    align-items: center;
    margin-bottom: 2px;
    font-size: clamp(0.8em, 1vw, 1.1em);
}

.dropdown-header .header-label i {
    padding: 5px 5px;
    font-size: clamp(1.7em, 2vw, 1.2em); /* Icon size is defined here */
    margin-right: 5px;
}


.dropdown-header .header-label span {
    font-size: clamp(1.2em, 0vw, 1.5em);
    font-weight: 100;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
    max-width: 150px;
}

/* Dropdown Arrow */
.dropdown-header::after {
    visibility: visible;
    content: '\f078'; /* FontAwesome Unicode for down arrow (chevron) */
    font-family: 'Font Awesome 5 Free'; /* Ensure FontAwesome is used */
    font-weight: 900; /* Necessary to display the correct solid version of FontAwesome */
    font-size: clamp(1.1em, 1vw, 1.3em);
    color: var(--secondary-text-color);
    position: absolute;
    right: 12px;
    transition: transform var(--transition-duration) ease, color var(--transition-duration) ease;
}

.dropdown-header[aria-expanded="true"]::after {
    transform: rotate(180deg);
    color: var(--accent-color);
}

.selection-clear-container {
    display: flex;
    justify-content: space-between;
    align-items: center; /* This ensures the badge aligns with the center */
    width: 100%;
    position: relative; /* Added to contain the absolutely positioned badge */
}

/* Clear Icon */
.clear-icon {
    font-size: 1.4em;
    bottom: -10px; /* Aligns it vertically in the middle of the header */
    cursor: pointer;
    color: var(--accent-color);
    flex-shrink: 0; /* Prevent shrinking */
    position: absolute;
    right: 10px; /* Align to the far right */
    visibility: hidden;
    opacity: 0;
    transition: opacity 0.3s ease, visibility 0.3s ease;
}

.clear-icon.visible {
    visibility: visible;
    opacity: 1;
}

/* Selection Badge */
.selection-badge {
    position: absolute;
    bottom: 5px; /* Aligns it vertically in the middle of the header */
    right: 35px; /* Adjust distance from the right to make more space for the clear icon */
    color: var(--accent-color);
    font-size: 0.8em;
    /* border-radius: 12px; */
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
    line-height: 1; /* Ensure the text is vertically centered */
    z-index: 4500; /* Ensure it appears above other elements */
}



/* Show Clear Icon and Badge When Items Are Selected */
.dropdown-header.has-selection .clear-icon,
.dropdown-header.has-selection .selection-badge {
    visibility: visible;
    opacity: 1;
}

/* Dropdown Lists Container */
.dropdown-lists-container {
    position: absolute; /* Position absolutely within the container */

    left: 0;
    width: 100%;
    background-color: var(--dropdown-background);
    z-index: 7000; /* Ensure it appears above other elements */
    box-sizing: border-box; /* Ensure consistent box model */
}

/* Dropdown List */
.dropdown-list {
    position: relative; /* Relative to the .dropdown-lists-container */
    width: 100%;
    max-height: 300px;
    overflow-y: auto;
    background-color: var(--dropdown-background);
    border-radius: 5px;
    box-shadow: 0 4px 8px rgba(0,0,0,0.3);
    z-index: 8000; /* Ensure it's above other elements */
    display: none; /* Hidden by default */
    transition: max-height 0.3s ease, opacity 0.3s ease;
    opacity: 0; /* Start with invisible state */
}

/* Show the dropdown list when active */
.dropdown-list.show {
    display: block;
    max-height: 500px; /* Adjust as needed */
    opacity: 1;
}

.dropdown-list::-webkit-scrollbar {
    display: none;
}

--- File: static\css\components\filter.css ---
/* filter.css */

.sidebar {
    width: var(--sidebar-width);
    padding: 20px;
    background-color: #fff;
    border-radius: 8px;
    box-shadow: 0 2px 8px rgba(0,0,0,0.1);
    margin-right: 20px;
}

.filter-section {
    margin-bottom: 30px;
}

.filter-section h4 {
    margin-bottom: 15px;
    font-size: 1.1rem;
    color: var(--secondary-color);
}

.filter-section ul {
    list-style: none;
}

.filter-section ul li {
    margin-bottom: 10px;
}

.filter-section ul li input[type="checkbox"] {
    margin-right: 10px;
    cursor: pointer;
}

.filter-section input[type="range"] {
    width: 100%;
    margin: 10px 0;
}

.filter-section span {
    display: block;
    text-align: right;
    font-size: 0.9rem;
    color: #666;
}

/* Responsive Adjustments handled in responsive.css */

--- File: static\css\components\forms.css ---
/* forms.css */

/* General Form Styles */
input[type="text"],
input[type="email"],
select,
textarea {
    width: 100%;
    padding: 12px 15px;
    border: 1px solid #bdc3c7;
    border-radius: 6px;
    background-color: #fff;
    font-size: 1rem;
    color: var(--text-color);
    transition: border-color 0.3s ease, box-shadow 0.3s ease;
}

input[type="text"]:focus,
input[type="email"]:focus,
select:focus,
textarea:focus {
    outline: none;
    border-color: var(--accent-color);
    box-shadow: 0 0 5px rgba(231, 76, 60, 0.5);
}

label {
    display: block;
    margin-bottom: 8px;
    color: var(--primary-color);
    font-weight: 600;
}

label span.required {
    color: #e74c3c; /* Red color for required fields */
}

.contact-form .form-group {
    margin-bottom: 20px;
}

--- File: static\css\components\pagination.css ---
/* pagination.css */

/* General Pagination Container */
.pagination {
    display: flex;
    justify-content: center;
    align-items: center;
    background-color: var(--background-dark);
    padding: 10px 0; /* Added padding for spacing */
    color: var(--text-light);
    border-top: 0.5px solid var(--button-background);
}


/* Pagination Navigation List */
.pagination nav ul {
    display: flex;
    justify-content: center;
    align-items: center;
    list-style: none;
    padding: 0;
    margin: 0;
}

/* Pagination Item Styling */
.pagination nav ul li {
    margin: 0 5px; /* Reduced spacing between items */
}

/* Pagination Links and Buttons */
.pagination nav ul li a,
.pagination nav ul li span {
    display: inline-block;
    padding: 8px 5px;
    background-color: var(--primary-color);
    color: var(--text-color);
    border-radius: 4px;
    text-decoration: none;
    transition: background-color var(--transition-duration), transform var(--transition-duration);
    min-width: 32px; /* Consistent button sizing */
    text-align: center;
    font-size: 1rem;
}

/* Hover and Active State */
.pagination nav ul li a:hover,
.pagination nav ul li span:hover {
    background-color: var(--accent-color);
    color: var(--text-color);
    transform: translateY(-2px); /* Subtle lift effect */
}

/* Active State for Current Page */
.pagination nav ul li.active span {
    background-color: var(--accent-color);
    color: var(--secondary-text-color);
    font-weight: bold;
    cursor: default;
}

/* Disabled State for Non-clickable Items */
.pagination nav ul li.disabled span,
.pagination ul li.disabled a {
    background-color: var(--secondary-color); /* Muted color for disabled state */
    color: var(---secondary-text-color);
    cursor: not-allowed;
    border: 1px solid var(--border-color);
    pointer-events: none; /* Prevent interaction */
}

/* Optional: Ellipsis Styling */
.pagination nav ul li.ellipsis span {
    background: none;
    color: var(--secondary-text-color);
    cursor: default;
}

/* Highlighting for Previous and Next */
.pagination nav ul li a.prev,
.pagination nav ul li a.next {
    font-weight: bold;
    background-color: var(--accent-color);
}

.pagination nav ul li a.prev:hover,
.pagination nav ul li a.next:hover {
    background-color: var(--button-hover-bg);
    color: var(--text-light);
}

/* Responsive Adjustments */
@media (max-width: 768px) {
    .pagination nav ul li {
        margin: 0 3px; /* Reduced spacing on mobile */
    }

    .pagination nav ul li a,
    .pagination nav ul li span {
        padding: 6px 10px;
        font-size: 0.9rem;
    }
}

--- File: static\css\components\progress_indicator.css ---
/* Import the Google Font Anton */
@import url('https://fonts.googleapis.com/css?family=Anton');

/* Progress Indicator Styles */
.progress-indicator {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0.6); /* Semi-transparent overlay */
    display: none; /* Hidden by default */
    justify-content: center;
    align-items: center;
    flex-direction: column;
    z-index: 10000; /* Ensure it's on top of other elements */
}

/* Pulsing Loader */
.loader {
    width: 100px;
    height: 100px;
    border-radius: 50%;
    background: #FF6347; /* Use the accent color */
    box-shadow: 0 0 0 rgba(255, 99, 71, 0.4);
    animation: pulse 2s infinite;
}

@keyframes pulse {
    0% {
        transform: scale(0.95);
        box-shadow: 0 0 0 0 rgba(255, 99, 71, 0.7);
    }
    70% {
        transform: scale(1);
        box-shadow: 0 0 0 10px rgba(255, 99, 71, 0);
    }
    100% {
        transform: scale(0.95);
        box-shadow: 0 0 0 0 rgba(255, 99, 71, 0);
    }
}

/* Progress Indicator Text */
.progress-indicator p {
    margin-top: 15px;
    color: #ffffff; /* White text for better readability */
    font-size: 1.2em;
    text-align: center;
    font-family: 'Anton', sans-serif; /* Custom font */
    text-transform: uppercase;
    letter-spacing: 1px;
}

--- File: static\css\components\search.css ---
/* search.css */
/* File: static/css/components/search.css */

/* Search Dropdown Container */
.search-dropdown-container {
    position: relative; /* Ensure it's positioned */
    display: flex;
    flex-direction: column;
    align-items: stretch;
    width: 100%;
    background-color: var(--background-dark);
    padding: 10px;
    box-sizing: border-box;
    box-shadow: inset 0 0 10px rgba(0,0,0,0.5);
    backdrop-filter: blur(5px);
    transition: all var(--transition-duration) ease;
    font-family: var(--font-body);
    border-bottom: 1px solid var(--button-background);
    /* Ensure overflow is visible to allow dropdowns to appear */
    overflow: visible;
}

/* Search Box */
.search-container {
    position: relative;
    width: 100%;
    height: 45px;
    margin-bottom: 15px;
    border: none;
    border-radius: 10px;
    background-color: rgba(255, 255, 255, 0.1);
    backdrop-filter: blur(5px);
    box-shadow: inset 0 0 5px rgba(0,0,0,0.5);
    font-family: var(--font-body);
}

.search-container .search-icon {
    position: absolute;
    left: 20px;
    top: 50%;
    transform: translateY(-50%);
    color: var(--accent-color);
    font-size: 1.2em;
    pointer-events: none;
    transition: color var(--transition-duration) ease;
}

#search-box {
    width: 100%;
    height: 100%;
    padding: 0 50px;
    font-size: 1em;
    background: transparent;
    color: var(--text-color);
    border: none;
    border-radius: 10px;
    box-sizing: border-box;
    font-family: var(--font-body);
}

#search-box::placeholder {
    color: var(--text-color);
    font-style: italic;
}

#search-box:focus {
    outline: none;
    background-color: rgba(255, 255, 255, 0.2);
    transition: background-color var(--transition-duration) ease;
}

#clear-search {
    position: absolute;
    right: 20px;
    top: 50%;
    transform: translateY(-50%);
    font-size: 1.2em;
    cursor: pointer;
    color: var(--accent-color);
    visibility: hidden;
    opacity: 0;
    transition: visibility var(--transition-duration) ease, opacity var(--transition-duration) ease;
}

#clear-search.visible {
    visibility: visible;
    opacity: 1;
}
--- File: static\css\components\toggle_view.css ---
/* File: static/css/components/toggle-view.css */

/* Theme Toggle Button Styling */
.theme-toggle-btn {
    background-color: var(--button-background); /* #ffffff or #333333 in dark mode */
    color: var(--button-text-color); /* #333333 or #e0e0e0 in dark mode */
    border: 1px solid var(--button-border-color); /* #CCCCCC or #555555 in dark mode */
    border-radius: 5px;
    padding: 8px 12px;
    cursor: pointer;
    font-size: var(--toggle-button-size);
    transition: background-color var(--transition-duration) ease, color var(--transition-duration) ease, border-color var(--transition-duration) ease;
    display: flex;
    align-items: center;
    justify-content: center;
    margin-left: 20px; /* Adjust spacing as needed */
}

.theme-toggle-btn.active {
    background-color: var(--button-hover-background); /* #f0f0f0 or #444444 in dark mode */
    color: var(--button-text-color); /* #333333 or #e0e0e0 in dark mode */
    border-color: var(--button-border-color); /* #CCCCCC or #555555 in dark mode */
}

.theme-toggle-btn:hover {
    background-color: var(--button-hover-background); /* #f0f0f0 or #444444 in dark mode */
    color: var(--button-text-color); /* #333333 or #e0e0e0 in dark mode */
    border-color: var(--button-border-color); /* #CCCCCC or #555555 in dark mode */
}

.theme-toggle-btn:focus {
    outline: 2px solid var(--accent-color); /* Retain accent color for focus */
    outline-offset: 2px;
}

--- File: static\css\layout\footer.css ---
/* footer.css */

footer {
    background-color: var(--footer-background);
    color: #fff;
    padding: 40px 0;
    margin-top: 40px;
}

footer .container {
    display: flex;
    justify-content: space-between;
    flex-wrap: wrap;
    gap: 20px;
}

.footer-about,
.footer-links,
.footer-social {
    flex: 1 1 200px;
}

.footer-about h3 {
    font-size: 1.5rem;
    margin-bottom: 10px;
}

.footer-about p {
    font-size: 1rem;
    color: #ccc;
}

.footer-links ul {
    display: flex;
    flex-direction: column;
    gap: 10px;
}

.footer-links ul li a {
    color: #ccc;
    transition: color 0.3s;
}

.footer-links ul li a:hover {
    color: var(--primary-color);
}

.footer-social a {
    color: #ccc;
    font-size: 1.5rem;
    margin-right: 10px;
    transition: color 0.3s;
}

.footer-social a:hover {
    color: var(--primary-color);
}

.footer-bottom {
    text-align: center;
    margin-top: 20px;
    font-size: 0.9rem;
    color: #999;
}

/* Responsive Adjustments handled in responsive.css */

--- File: static\css\layout\hero.css ---
/* hero.css */

.hero-carousel {
    margin-top: var(--header-height);
    position: relative;
    height: 70vh;
}

.hero-carousel .swiper-container {
    width: 100%;
    height: 100%;
}

.hero-carousel .swiper-slide {
    position: relative;
    background-size: cover;
    background-position: center;
    display: flex;
    align-items: center;
    justify-content: center;
}

.hero-carousel .overlay {
    background: rgba(0, 0, 0, 0.5);
    padding: 20px;
    border-radius: 8px;
    max-width: 500px;
    color: #fff;
    text-align: left;
}

.hero-carousel .overlay h2 {
    font-size: 2rem;
    margin-bottom: 10px;
}

.hero-carousel .overlay p {
    font-size: 1rem;
    margin-bottom: 15px;
}

.hero-carousel .overlay .btn {
    background-color: var(--primary-color);
    color: #fff;
    padding: 10px 20px;
    border-radius: 4px;
    transition: background-color 0.3s;
}

.hero-carousel .overlay .btn:hover {
    background-color: var(--button-hover);
}

/* Swiper Navigation Buttons */
.swiper-button-next,
.swiper-button-prev {
    color: #fff;
}

.swiper-pagination-bullet {
    background: #fff;
    opacity: 0.7;
}

.swiper-pagination-bullet-active {
    opacity: 1;
}

/* Responsive Adjustments handled in responsive.css */

--- File: static\css\layout\navbar.css ---
/* General Navbar Styles */
.navbar {
    display: flex;
    justify-content: space-between;
    align-items: center;
    background-color: var(--footer-background);  /* Use defined primary color */
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    width: 100%;
    height: 60px;  /* Default height */
    padding: 0 20px;
    z-index: 1000;
    transition: height var(--transition-duration), top var(--transition-duration), box-shadow var(--transition-duration);
    box-shadow: 0 4px 8px var(--shadow-color);  /* Use defined shadow color */
    font-family: var(--font-body);  /* Use body font */
}



.theme-title {
    font-size: 1.0rem;  /* Adjust font size for the theme title */
    color: var(--accent-color);  /* Use defined accent color */
    text-transform: lowercase;
    transition: color var(--transition-duration);  /* Smooth color transition */
}

/* Shrunk State */
.navbar.shrunk {
    height: 40px;  /* Smaller height when shrunk */
}

.nav-center-title .theme-title {
    font-size: 1.2rem;  /* Reduce size when navbar is shrunk */
}

/* Hidden State */
.navbar.hidden {
    top: -60px;  /* Move navbar off-screen to hide */
}

/* Navbar Toggle Button for Mobile */
.menu-toggle {
    display: none;  /* Hide by default */
    cursor: pointer;
    transition: transform var(--transition-duration);  /* Smooth rotation animation */
}

.menu-toggle i {
    color: var(--text-light);
    font-size: 1.5em;
}

/* Main Logo Styling */
.logo {
    display: flex;
    align-items: center;
}

.logo span {
    font-size: 2.5rem;  /* Adjust main logo size for better readability */
    color: var(--text-color);  /* Use defined light text color */
    font-family: var(--font-heading);  /* Use heading font */
    text-transform: lowercase;
    margin-right: 5px;
    transition: font-size var(--transition-duration);  /* Smooth logo size transition */
}

.sub-logo span {
    font-size: 1.5rem;  /* Adjust sub-logo size */
    color: var(--accent-color);  /* Use defined accent color */
    text-transform: lowercase;
}

/* Navigation Links */
.nav-links {
    color: var(--text-color);  /* Use defined light text color */
    display: flex;
    gap: 20px;
    list-style: none;
    padding: 0;
    margin: 0;
}

.nav-links li {
    margin-left: 20px;
}

/* Navigation Link Styling */
.nav-links li a {
    text-decoration: none;
    color: var(--text-light);  /* Use defined light text color */
    font-size: 1rem;
    transition: color var(--transition-duration), transform var(--transition-duration);
    font-family: var(--font-body);  /* Use body font */
}

.nav-links li a:hover {
    color: var(--link-color);  /* Use defined link hover color */
    transform: translateY(-2px);
}

/* Active Link */
.nav-links li a.active {
    color: var(--link-color);  /* Use defined link color */
    font-weight: bold;
}

/* Responsive Styles */
@media (max-width: 768px) {
    /* Show the toggle button on smaller screens */
    .menu-toggle {
        display: block;
    }

    .nav-links {
        display: none;  /* Hide links by default */
        flex-direction: column;
        align-items: center;
        position: absolute;
        top: 50px;  /* Position below the navbar */
        right: 0;
        width: 100%;
        background-color: var(--primary-color);  /* Use defined primary color */
        z-index: 999;
        box-shadow: 0 4px 8px var(--shadow-color);  /* Use defined shadow color */
        padding: 10px 0;
    }

    .nav-links li {
        margin: 10px 0;
    }

    /* Toggle the display of the navigation menu */
    .nav-links.show {
        display: flex;
    }

    /* Reduce the size of the main and sub-logos */
    .logo span {
        font-size: 2rem;  /* Smaller size for mobile */
    }

    .sub-logo span {
        font-size: 1.4rem;
    }

    /* Center the theme title for mobile screens */
    .nav-center-title {
        position: relative;  /* Position relative for smaller screens */
        left: auto;
        transform: none;
        margin: 10px 0;  /* Add spacing */
}
    /* Centered Theme Title in Navbar */
    .nav-center-title {
        font-size: 1.0rem;  /* Adjust the title size for very small screens */
    }  


}

/* Shrinking & Hiding Behavior for Mobile */
@media (max-width: 768px) {
    .navbar {
        height: 50px;  /* Default height for smaller screens */
    }

    .navbar.shrunk {
        height: 35px;  /* Smaller height when shrunk */
    }

    .navbar.hidden {
        top: -50px;  /* Move navbar off-screen */
    }
}

/* Responsive Styles for Very Small Screens */
@media (max-width: 480px) {
    .logo span {
        font-size: 1.6rem;  /* Smaller size for very small screens */
    }

    .sub-logo span {
        font-size: 1.2rem;  /* Adjust sub-logo size */
    }

    .nav-links li a {
        font-size: 1.2rem;  /* Larger link font size for better readability */
    }

    .theme-title {
        font-size: 1.2rem;  /* Adjust the title size for very small screens */
    }
  
}

/* Animation for Navbar Visibility */
.navbar {
    will-change: transform;  /* Optimize for smooth animations */
}

.navbar.show {
    transform: translateY(0);  /* Slide-in animation */
}

.navbar.hide {
    transform: translateY(-100%);  /* Slide-out animation */
}

/* Animation for Menu Toggle Button */
.menu-toggle.active {
    transform: rotate(90deg);  /* Rotate when active */
}

/* Mobile Footer Link Styling */
.mobile-footer-link {
    display: none;  /* Hidden by default */
}

@media (max-width: 768px) {
    .mobile-footer-link {
        display: block;
        background-color: var(--primary-color);  /* Use defined primary color */
        text-align: center;
        padding: 10px 0;
    }

    .mobile-footer-link a {
        color: var(--text-light);  /* Use defined light text color */
        font-size: 1rem;
        text-decoration: none;
    }
}
--- File: static\css\pages\about.css ---
/* about.css */

/* About Us Page Sections */
.about-history,
.about-mission,
.about-team,
.about-testimonials {
    padding: 60px 20px;
    background-color: #f9f9f9;
    text-align: center;
}

.about-history h2,
.about-mission h2,
.about-team h2,
.about-testimonials h2 {
    text-align: center;
    font-family: 'Cinzel', serif;
    margin-bottom: 30px;
    color: var(--primary-color);
}

.about-history p,
.about-mission p {
    max-width: 800px;
    margin: 0 auto 40px auto;
    line-height: 1.8;
    color: var(--secondary-text-color);
    font-size: 1.1rem;
}

.about-team {
    display: flex;
    flex-wrap: wrap;
    gap: 30px;
    justify-content: center;
}

.team-member {
    width: 220px;
    text-align: center;
    transition: transform 0.3s ease, box-shadow 0.3s ease;
}

.team-member:hover {
    transform: translateY(-5px);
    box-shadow: 0 6px 12px rgba(0, 0, 0, 0.2);
}

.team-member img {
    width: 100%;
    height: 220px;
    object-fit: cover;
    border-radius: 50%;
    margin-bottom: 15px;
    border: 3px solid var(--accent-color);
}

.team-member h3 {
    font-family: 'Cinzel', serif;
    margin-bottom: 5px;
    color: var(--primary-color);
    font-size: 1.4rem;
}

.team-member p {
    color: var(--secondary-text-color);
    font-size: 1rem;
}

.about-testimonials blockquote {
    max-width: 800px;
    margin: 40px auto;
    padding: 25px 20px;
    background-color: #fdfdfd;
    border-left: 5px solid var(--accent-color);
    position: relative;
    border-radius: 5px;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
}

.about-testimonials blockquote::before {
    content: "\201C"; /* Left double quotation mark */
    font-size: 3rem;
    position: absolute;
    left: 10px;
    top: -10px;
    color: var(--accent-color);
}

.about-testimonials p {
    margin-bottom: 10px;
    color: var(--secondary-text-color);
    font-size: 1.1rem;
}

.about-testimonials cite {
    display: block;
    text-align: right;
    color: #777;
    font-size: 1rem;
    margin-top: 10px;
}

/* Responsive Styles */
@media (max-width: 768px) {
    .about-history,
    .about-mission,
    .about-team,
    .about-testimonials {
        padding: 40px 15px;
    }

    .team-member {
        width: 180px;
    }

    .team-member img {
        height: 180px;
    }

    .about-testimonials blockquote {
        padding: 20px 15px;
    }
}

@media (max-width: 480px) {
    .about-history,
    .about-mission,
    .about-team,
    .about-testimonials {
        padding: 30px 10px;
    }

    .team-member {
        width: 150px;
    }

    .team-member img {
        height: 150px;
    }

    .about-testimonials blockquote {
        padding: 15px 10px;
    }

    .about-testimonials blockquote::before {
        font-size: 2rem;
        left: 5px;
        top: -5px;
    }

    .about-testimonials p {
        font-size: 1rem;
    }
}

--- File: static\css\pages\catalog.css ---
/* catalog.css */

/* Container for Movie Listings */
.movie-listings {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));
    gap: 20px;
    padding: 0 20px;
    max-width: var(--catalog-width); /* Adjust as needed */
    margin: 0 auto;
    transition: all var(--transition-duration) ease;
    background-color: var(--background-dark); /* Black/gray background */
}

/* Media Query to Limit to 4 Columns on Large Screens */
@media (min-width: var(--breakpoint-lg)) {
    .movie-listings {
        grid-template-columns: repeat(4, 1fr);
    }
}

/* List View Styling */
.movie-listings.list-view {
    display: flex;
    flex-direction: column;
    gap: 20px;
}

/* Responsive Styles */

/* Tablet (Max Width: 1024px) */
@media (max-width: var(--breakpoint-md)) {
    .movie-listings {
        max-width: 1000px;
    }
}

/* Mobile (Max Width: 768px) */
@media (max-width: var(--breakpoint-sm)) {
    .movie-listings {
        grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
    }
}

/* Very Small Mobile (Max Width: 480px) */
@media (max-width: var(--breakpoint-xs)) {
    .movie-listings {
        grid-template-columns: repeat(auto-fill, minmax(150px, 1fr));
    }
}

/* Toggle View Section */
.view-toggle-section {
    padding: 20px;
    max-width: var(--catalog-width); /* Adjust as needed */;
    margin: 0 auto;
    display: flex;
    justify-content: space-between;
    align-items: right;
}

/* Headline Styling */
.view-toggle-headline h2{
    font-size: 1.7rem;
    color: var(--text-color); /* White text */
    margin: 0;
    /* text-transform: uppercase; */
}

/* Toggle Buttons Container */
.view-toggle-container {
    display: flex;
    gap: 10px;
}

/* Toggle Button Styles */
.view-toggle-btn {
    background-color: var(--button-background); /* Button background */
    color: var(--button-text-color); /* Icon/text color */
    border: none;
    padding: 10px 15px;
    border-radius: var(--border-radius-medium);
    font-size: 1.5rem;
    cursor: pointer;
    transition: background-color 0.3s ease, color 0.3s ease;
}

/* Active/Pressed Button */
.view-toggle-btn.active,
.view-toggle-btn[aria-pressed="true"] {
    background-color: var(--highlight-color); /* Highlight for active button */
    color: var(--secondary-text-color); /* Ensure contrasting text color */
}

/* Button Hover & Focus States */
.view-toggle-btn:hover,
.view-toggle-btn:focus {
    background-color: var(--button-hover-background);
    outline: none;
}

/* Responsive Styles */
@media (max-width: 768px) {
    .view-toggle-section {
        flex-direction: column;
        align-items: flex-start;
    }

    .view-toggle-container {
        margin-top: 10px;
    }

    .view-toggle-headline h2 {
        font-size: 1.5rem;
    }
}


--- File: static\css\pages\contact.css ---
/* contact.css */

/* Contact Information Section */
.contact-info {
    padding: 60px 20px;
    background-color: #fff;
    text-align: center;
}

.contact-info h2 {
    font-family: 'Cinzel', serif;
    margin-bottom: 30px;
    color: var(--primary-color);
    font-size: 2rem;
}

.contact-details {
    display: flex;
    flex-direction: column;
    gap: 20px;
    align-items: center;
    margin-bottom: 40px;
}

.contact-item {
    display: flex;
    align-items: center;
    gap: 15px;
    color: var(--secondary-text-color);
    font-size: 1.1rem;
}

.contact-item i {
    color: var(--accent-color);
    font-size: 1.8em;
}

.contact-map {
    max-width: 800px;
    margin: 0 auto;
    border: 2px solid #ddd;
    border-radius: 8px;
    overflow: hidden;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
}

/* Contact Form Section */
.contact-form-section {
    padding: 60px 20px;
    background-color: var(--background-color);
    text-align: center;
}

.contact-form-section h2 {
    font-family: 'Cinzel', serif;
    margin-bottom: 30px;
    color: var(--primary-color);
    font-size: 2rem;
}

.contact-form {
    max-width: 600px;
    margin: 0 auto;
    text-align: left;
}

.contact-form .form-group {
    margin-bottom: 25px;
}

.contact-form label {
    display: block;
    margin-bottom: 8px;
    color: var(--primary-color);
    font-weight: 600;
}

.contact-form label span.required {
    color: #e74c3c; /* Red color for required fields */
}

.contact-form input,
.contact-form textarea {
    width: 100%;
    padding: 12px 15px;
    border: 1px solid #bdc3c7;
    border-radius: 6px;
    background-color: #fff;
    font-size: 1rem;
    color: var(--text-color);
    transition: border-color 0.3s ease, box-shadow 0.3s ease;
}

.contact-form input:focus,
.contact-form textarea:focus {
    outline: none;
    border-color: var(--accent-color);
    box-shadow: 0 0 5px rgba(231, 76, 60, 0.5);
}

.contact-form button {
    width: 100%;
    padding: 12px 20px;
    background-color: var(--primary-color);
    color: #fff;
    border: none;
    cursor: pointer;
    font-weight: 600;
    border-radius: 8px;
    transition: background-color 0.3s ease, transform 0.3s ease;
    font-size: 1.1rem;
}

.contact-form button:hover {
    background-color: #555;
    transform: translateY(-2px);
}

--- File: static\css\pages\events.css ---
/* events.css */

/* Events Calendar Section */
.events-calendar {
    padding: 60px 20px;
    background-color: #fff;
}

.events-calendar h2 {
    text-align: center;
    font-family: 'Cinzel', serif;
    margin-bottom: 40px;
    color: var(--primary-color);
    font-size: 2rem;
}

.event {
    border: 1px solid #ddd;
    padding: 25px 20px;
    margin-bottom: 25px;
    border-radius: 8px;
    background-color: #fdfdfd;
    transition: transform 0.3s ease, box-shadow 0.3s ease;
}

.event:hover {
    transform: translateY(-5px);
    box-shadow: 0 6px 12px rgba(0, 0, 0, 0.2);
}

.event h3 {
    margin-bottom: 15px;
    color: var(--primary-color);
    font-family: 'Cinzel', serif;
    font-size: 1.6rem;
}

.event p {
    margin-bottom: 10px;
    color: var(--secondary-text-color);
    font-size: 1.1rem;
}

.event .btn {
    margin-top: 15px;
    background-color: var(--primary-color);
    color: #fff;
    padding: 10px 20px;
    border: none;
    cursor: pointer;
    font-weight: 600;
    border-radius: 6px;
    transition: background-color 0.3s ease, transform 0.3s ease;
    font-size: 1rem;
}

.event .btn:hover {
    background-color: #555;
    transform: translateY(-2px);
}

/* Calendar View Section */
.calendar-view {
    padding: 60px 20px;
    background-color: var(--background-color);
    text-align: center;
}

.calendar-view h2 {
    font-family: 'Cinzel', serif;
    margin-bottom: 30px;
    color: var(--primary-color);
    font-size: 2rem;
}

#calendar {
    background-color: #fff;
    border: 1px solid #ddd;
    padding: 40px;
    border-radius: 8px;
    color: var(--secondary-text-color);
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
}

/* Responsive Styles */
@media (max-width: 768px) {
    .events-calendar {
        padding: 40px 15px;
    }

    .event {
        padding: 20px 15px;
    }

    .calendar-view {
        padding: 40px 15px;
    }

    #calendar {
        padding: 30px;
    }
}

@media (max-width: 480px) {
    .events-calendar {
        padding: 30px 10px;
    }

    .event {
        padding: 15px 10px;
    }

    .calendar-view {
        padding: 30px 10px;
    }

    #calendar {
        padding: 20px;
    }
}

--- File: static\js\carousel.js ---
// File: static/js/carousel.js

import { carouselTitle, genreFontMapping } from './entry.js';
import { getSelectedValues } from './filter.js';

export function initializeSwiper() {
    const swiperContainer = document.querySelector('.swiper-container');
    if (!swiperContainer) {
        console.error("initializeSwiper: Swiper container not found.");
        return;
    }

    const totalSlides = swiperContainer.querySelectorAll('.swiper-slide').length;
    const slidesPerViewDesktop = 7; // Base number for desktop

    const swiper = new Swiper('.swiper-container', {
        loop: totalSlides > slidesPerViewDesktop,
        autoplay: {
            delay: 5000,
            disableOnInteraction: false,
        },
        navigation: {
            nextEl: '.swiper-button-next',
            prevEl: '.swiper-button-prev',
        },
        slidesPerView: 1, // Set default slides per view
        spaceBetween: 10,
        watchOverflow: true, // Disable Swiper if not enough slides

        simulateTouch: true,
        touchRatio: 1,
        touchAngle: 45,
        longSwipes: true,
        longSwipesRatio: 0.5,
        longSwipesMs: 300,
        followFinger: true,
        allowTouchMove: true,

        // Responsive breakpoints
        breakpoints: {
            2200: {
                slidesPerView: 13,
                spaceBetween: 10,
            },
            2000: {
                slidesPerView: 10,
                spaceBetween: 10,
            },
            1800: {
                slidesPerView: 9,
                spaceBetween: 10,
            },
            1600: {
                slidesPerView: 8,
                spaceBetween: 10,
            },
            1400: {
                slidesPerView: 6.5,
                spaceBetween: 10,
            },
            1200: {
                slidesPerView: 6,
                spaceBetween: 6,
            },
            1024: {
                slidesPerView: 5,
                spaceBetween: 8,
            },
            900: {
                slidesPerView: 4,
                spaceBetween: 10,
            },
            768: {
                slidesPerView: 3,
                spaceBetween: 12,
            },
            640: {
                slidesPerView: 2.5,
                spaceBetween: 14,
            },
            0: {
                slidesPerView: 2.5,
                spaceBetween: 16,
            },
        },

        on: {
            resize: function () {
                this.update(); // Update Swiper on window resize
            },
            init: function () {
                if (totalSlides <= this.params.slidesPerView) {
                    this.loopDestroy(); // Disable loop if not enough slides
                }
            },
        },
    });
}

/**
 * Function to update the carousel title based on selected genre
 */
export function updateCarouselTitle() {
    const selectedGenres = getSelectedValues('genre-dropdown-list');
    if (selectedGenres.length === 1) {
        const genre = selectedGenres[0];
        carouselTitle.textContent = genreFontMapping[genre] ? `${genre} Filmtitel` : `${genre} Filme`;
        // Apply the corresponding font
        carouselTitle.style.fontFamily = genreFontMapping[genre] || "'Open Sans', sans-serif";
    } else if (selectedGenres.length > 1) {
        carouselTitle.textContent = "Verschiedene Genres";
        carouselTitle.style.fontFamily = "'Open Sans', sans-serif";
    } else {
        carouselTitle.textContent = "Hervorgehobene Filme";
        carouselTitle.style.fontFamily = "'Cinzel', serif";
    }
}

--- File: static\js\catalog.js ---
// catalog.js

function getIconSizeByType(typeval, type = "rating") {
    // Define the minimum and maximum sizes for the icon
    const minSize = 1;   // 1em for the smallest value
    const maxSize = 2.5;   // 3em for the largest value

    let minVal, maxVal;

    // Set value ranges based on the type
    if (type === "rating") {
        minVal = 5;   // IMDb rating starts at 0
        maxVal = 10;  // IMDb rating goes up to 10
    } else if (type === "fsk") {
        minVal = 0;   // FSK can start from 0
        maxVal = 18;  // FSK goes up to 18
    } else if (type === "runtime") {
        minVal = 60;   // Minimum runtime is 60 minutes (1 hour)
        maxVal = 180;  // Maximum runtime is 180 minutes (3 hours)
    } else {
        console.warn(`Unknown type: ${type}. Using default rating scale.`);
        minVal = 0;  // Default to the rating scale
        maxVal = 10;
    }

    // Clamp the value within the min and max range
    const clampedVal = Math.max(minVal, Math.min(typeval, maxVal));

    // Calculate the size as a ratio between the value and the value range
    const size = minSize + (clampedVal - minVal) * (maxSize - minSize) / (maxVal - minVal);

    // Return the size in 'em' units, rounded to two decimal places
    return `${size.toFixed(2)}em`;
}







function getIconSizeByFsk(fsk) {
    if (fsk <= 6) {
        return '1em';  // Small size for lower FSK values
    } else if (fsk <= 12) {
        return '1.5em';  // Medium size for mid-range FSK values
    } else if (fsk <= 16) {
        return '2em';  // Large size for higher FSK values
    } else if (fsk === 18) {
        return '2.5em';  // Extra large size for FSK 18
    } else {
        return '1em';  // Default size
    }
}
export function updateMovieListings(movies) {
    const movieContainer = document.querySelector('.movie-listings');
    if (!movieContainer) {
        console.error("updateMovieListings: movieContainer element not found.");
        return;
    }

    // Check if we are in list view or raster (grid) view
    const isListView = movieContainer.classList.contains('list-view');

    movieContainer.innerHTML = "";  // Clear existing entries
    if (movies.length > 0) {
        const promises = movies.map(movie => {
            const imagePath = `/movie_images/${encodeURIComponent(movie.folder_name || 'default')}/poster/poster_1.avif`;
            const defaultImagePath = '/static/images/default_movie.png';

            const movieCard = document.createElement('div');
            movieCard.className = 'movie-card';

            let formatRuntimeHtml = '';
            const runtimeIconSize = getIconSizeByType(movie.runtime, "runtime");
            formatRuntimeHtml = `
                <div class="meta-item">
                    <i class="fas fa-clock" style="font-size:${runtimeIconSize};"></i>
                    <span>${movie.runtime}</span>
                </div>
            `;  
            let formatFskHtml = '';
            const fskIconSize = getIconSizeByType(movie.format_fsk, "fsk");
            formatFskHtml = `
                <div class="meta-item">
                    <i class="fas fa-child" style="font-size:${fskIconSize};"></i>
                    <span>${movie.format_fsk}</span>
                </div>
            `;     
            let formatRatingHtml = '';
            const ratingIconSize = getIconSizeByType(movie.imdb_rating, "rating"); // Returns a size in 'em', like '2.125em'  
            console.log("movie.imdb_rating", ratingIconSize, movie.imdb_rating)
            formatRatingHtml = `
                <div class="meta-item">
                    <i class="fas fa-star" style="font-size:${ratingIconSize};"></i>
                    <span>${movie.imdb_rating}</span>
                </div>
            `;                    

            // Fetch available person images from the backend
            return fetch(`/get_person_images/${encodeURIComponent(movie.folder_name)}`)
                .then(response => response.json())
                .then(data => {
                    const availableImages = data.images;

                    // Function to get person image by matching the name in availableImages
                    function getPersonImage(person) {
                        for (const image of availableImages) {
                            if (image.startsWith(person.trim())) {
                                return `/movie_images/${encodeURIComponent(movie.folder_name)}/person/${encodeURIComponent(image)}`;
                            }
                        }
                        return '/static/images/default_person.png'; // Fallback to default person image
                    }

                    // Unified Tooltip Class for Directors and Actors
                    const renderPersonTooltip = (person, role) => {
                        const personImage = getPersonImage(person);
                        const personName = person.split('_')[0].replace(/_/g, ' '); // Replace underscores with spaces for display

                        const tooltipContent = `
                            <div class="tooltip-person-content">
                                <img src="${personImage}" alt="${personName}" onerror="this.onerror=null; this.src='/static/images/default_person.png';">
                                <span class="tooltip-name">${personName}</span>
                            </div>
                        `;

                        return `
                            <span 
                                class="person-tooltip" 
                                tabindex="0" 
                                aria-label="${role}: ${personName}"
                                data-tippy-content="${tooltipContent.replace(/"/g, '&quot;')}" 
                            >
                                ${personName}
                            </span>
                        `;
                    };

                    // Map directors with their tooltip images
                    const directors = Array.isArray(movie.director) && movie.director.length > 0 
                        ? movie.director.map(director => renderPersonTooltip(director, "Director")).join(', ') 
                        : "Unknown Director";

                    // Process actors
                    let actors = "Unknown Actors";
                    if (movie.actors) {
                        if (Array.isArray(movie.actors)) {
                            actors = movie.actors.map(actor => renderPersonTooltip(actor, "Actor")).join(', ');
                        } else if (typeof movie.actors === 'string') {
                            // Split the string into an array by commas
                            const actorArray = movie.actors.split(',').map(actor => actor.trim()).filter(actor => actor.length > 0);
                            actors = actorArray.map(actor => renderPersonTooltip(actor, "Actor")).join(', ');
                        }
                    }

                    // Limit the number of displayed actors
                    const maxActorsToShow = 5;
                    if (Array.isArray(movie.actors)) {
                        if (movie.actors.length > maxActorsToShow) {
                            const displayedActors = movie.actors.slice(0, maxActorsToShow).map(actor => renderPersonTooltip(actor, "Actor")).join(', ');
                            const remainingCount = movie.actors.length - maxActorsToShow;
                            actors = `${displayedActors}, ...`;
                        }
                    } else if (typeof movie.actors === 'string') {
                        const actorArray = movie.actors.split(',').map(actor => actor.trim()).filter(actor => actor.length > 0);
                        if (actorArray.length > maxActorsToShow) {
                            const displayedActors = actorArray.slice(0, maxActorsToShow).map(actor => renderPersonTooltip(actor, "Actor")).join(', ');
                            const remainingCount = actorArray.length - maxActorsToShow;
                            actors = `${displayedActors}, ...`;
                        }
                    }

                    const countries = Array.isArray(movie.countries) && movie.countries.length > 0
                        ? movie.countries.map(country => {
                            const match = country.match(/(.*?)\s\((.*?)\)/); 
                            const fullName = match ? match[1] : country;
                            const shortCode = match ? match[2] : country;
                            return `<span class="country-tooltip" data-country="${fullName}">${shortCode}</span>`;
                        }).join(', ')
                        : "Unknown Countries";

                    const genres = Array.isArray(movie.genres) && movie.genres.length > 0 ? movie.genres.join(', ') : "Unknown Genres";


                    // Determine the overview truncation length based on view type
                    let content = movie.format_inhalt ? movie.format_inhalt : (movie.format_inhalt ? movie.format_inhalt : "Keine Inhaltsangabe verfÃ¼gbar.");
                    const maxLength = isListView ? 300 : 150; // 300 characters for list view, 150 for raster view
                    if (content.length > maxLength) {
                        content = content.substring(0, maxLength) + '...';
                    }                    


                    movieCard.innerHTML = `
                        <div class="movie-content-wrapper">
                            <div class="image-container">
                                <img src="${imagePath}" alt="${movie.main_title}" onerror="this.onerror=null; this.src='${defaultImagePath}';" loading="lazy">
                                <div class="hover-title">
                                    <span><i class="fas fa-file-alt"></i> ${movie.original_title}</span>
                                </div>
                            </div>
                            <div class="info-wrapper">
                                <div class="info-section">
                                    <h2>${movie.main_title}</h2>
                                    <div class="metadata">
                                        <p><strong><i class="fas fa-video"></i></strong> ${directors}</p>
                                        <p><strong><i class="fas fa-users"></i></strong> ${actors}</p>
                                        <!-- Inline Meta in List View -->
                                        <div class="inline-meta">
                                            ${formatRuntimeHtml}                                        
                                            ${formatFskHtml}                                        
                                            ${formatRatingHtml}
                                        </div>
                                        <p class="standort"><strong><i class="fas fa-map-marker-alt"></i></strong> ${movie.format_standort || 'N/A'} | <i class="fas fa-disc"></i></strong>${movie.formats}</p>
                                        <p class="countries"><strong><i class="fas fa-globe"></i></strong> ${countries} | ${new Date(movie.release_date).getFullYear()}</p>
                                        <p class="genres"><strong><i class="fas fa-film"></i></strong> ${genres}</p>
                                    </div>
                                </div>
                                <div class="overview-section">
                                    <p>${content} <a href="/movie/${movie.movie_id}" class="more-link">mehr</a></p>
                                </div>
                            </div>
                        </div>
                    `;

                    movieContainer.appendChild(movieCard);
                })
                .catch(err => console.error('Error fetching person images:', err));
        });

        // Wait for all movie cards to be appended, then initialize Tippy.js
        Promise.all(promises).then(() => initializeTippyTooltips());
    } else {
        movieContainer.innerHTML = `<p class="no-movies-message">No movies match the selected filters.</p>`;
    }

    // Initialize Tippy.js after all movie cards have been appended
    initializeTippyTooltips();
}

// Function to initialize Tippy.js tooltips
function initializeTippyTooltips() {
    if (typeof tippy === 'undefined') {
        console.error("Tippy.js is not loaded.");
        return;
    }

    tippy('.person-tooltip', {
        allowHTML: true,
        interactive: true,
        theme: 'light-border',
        placement: 'top',
        arrow: true,
    });
}


// toggle-view.js

export function toggleViews() {
    const gridViewBtn = document.getElementById('grid-view-btn');
    const listViewBtn = document.getElementById('list-view-btn');
    const movieListings = document.querySelector('.movie-listings');

    if (!gridViewBtn || !listViewBtn || !movieListings) {
        console.error("toggleViews: One or more elements not found.");
        return;
    }

    // Function to activate Grid View
    const activateGridView = () => {
        movieListings.classList.remove('list-view');
        gridViewBtn.classList.add('active');
        listViewBtn.classList.remove('active');
        gridViewBtn.setAttribute('aria-pressed', 'true');
        listViewBtn.setAttribute('aria-pressed', 'false');
        updateMovieListingsUI();
    };

    // Function to activate List View
    const activateListView = () => {
        movieListings.classList.add('list-view');
        listViewBtn.classList.add('active');
        gridViewBtn.classList.remove('active');
        listViewBtn.setAttribute('aria-pressed', 'true');
        gridViewBtn.setAttribute('aria-pressed', 'false');
        updateMovieListingsUI();
    };

    // Event Listeners for Toggle Buttons
    gridViewBtn.addEventListener('click', () => {
        activateGridView();
        localStorage.setItem('movieView', 'grid');
    });

    listViewBtn.addEventListener('click', () => {
        activateListView();
        localStorage.setItem('movieView', 'list');
    });

    // Function to update movie listings UI based on view type
    const updateMovieListingsUI = () => {
        // Assuming you have a function or way to re-fetch and re-render movies
        // For example:
        fetch('/get_movies') // Replace with your actual endpoint
            .then(response => response.json())
            .then(data => {
                updateMovieListings(data.movies);
            })
            .catch(err => console.error('Error fetching movies:', err));
    };

    // Optional: Persist User Preference using LocalStorage
    // Check if user has a saved preference
    const savedView = localStorage.getItem('movieView');

    if (savedView === 'list') {
        activateListView();
    } else {
        activateGridView();
    }
}

--- File: static\js\entry.js ---
// File: static/js/entry.js

/** Cache Elements and Buttons */
export const clearSearchBtn = document.getElementById('clear-search');
export const searchBox = document.getElementById('search-box');
export const movieContainer = document.querySelector('.movie-listings');
export const topPaginationContainer = document.querySelector('.top-pagination nav ul');
export const bottomPaginationContainer = document.querySelector('.bottom-pagination nav ul');
export const progressIndicator = document.getElementById('progress-indicator');
export const carouselTitle = document.getElementById('carousel-title');
export const toggleFiltersButton = document.getElementById('toggle-filters-button');
export const searchDropdownContainer = document.querySelector('.search-dropdown-container');
export const clearAllFiltersButton = document.getElementById('clear-all-filters-button');
// New elements for advanced filters
export const toggleAdvancedFiltersButton = document.getElementById('toggle-advanced-filters-button');
export const advancedFiltersContainer = document.getElementById('advanced-filters-container');

/** Genre to Font Mapping */
export const genreFontMapping = {
    "Action": "'Anton', sans-serif",
    "Drama": "'Playfair Display', serif",
    "Family": "'Baloo 2', cursive", 
    "Comedy": "'Comic Sans MS', cursive, sans-serif",
    "Thriller": "'Roboto Slab', serif",
    "Horror": "'Creepster', cursive",
    "Sci-Fi": "'Orbitron', sans-serif",
    "Romance": "'Great Vibes', cursive",
    "Documentary": "'Merriweather', serif",
    "Fantasy": "'Goudy Bookletter 1911', serif"
};

/**
 * Function to show the progress indicator
 */
export function showProgressIndicator() {
    if (progressIndicator) {
        progressIndicator.style.display = 'flex'; // Show the Progress Indicator
        progressIndicator.setAttribute('aria-hidden', 'false');
    } else {
        console.error("showProgressIndicator: Progress Indicator Element not found.");
    }
}

/**
 * Function to hide the progress indicator
 */
export function hideProgressIndicator() {
    if (progressIndicator) {
        progressIndicator.style.display = 'none'; // Hide the Progress Indicator
        progressIndicator.setAttribute('aria-hidden', 'true');
    } else {
        console.error("hideProgressIndicator: Progress Indicator Element not found.");
    }
}

--- File: static\js\filter.js ---
// File: static/js/filter.js

// Import necessary elements and functions
import {
    searchBox,
    clearSearchBtn,
    toggleFiltersButton,
    searchDropdownContainer,
    clearAllFiltersButton,
    movieContainer,
    toggleAdvancedFiltersButton,
    advancedFiltersContainer
} from './entry.js';
import { updateCarouselTitle } from './carousel.js';
import { showProgressIndicator, hideProgressIndicator } from './entry.js';
import { updateMovieListings } from './catalog.js';
import { updatePagination } from './pagination.js';

let debounceTimer = null;
const AUTOCOMPLETE_DEBOUNCE_DELAY = 500; // milliseconds
const AUTOCOMPLETE_MIN_DIGITS = 2;

/**
 * Initialize the toggle functionality for the filter panel and advanced filters
 */
export function initializeFilterPanelToggle() {
    // Advanced Filters Toggle is now handled within the main filters
}

/**
 * Clear all filters and reset selections
 */
export function clearAllFilters() {
    // Clear selections in all dropdowns

    const filterButtons = document.querySelectorAll('.dropdown-list .filter-button.selected');
    filterButtons.forEach(button => button.classList.remove('selected'));

    // Hide clear icons
    const clearIcons = document.querySelectorAll('.clear-icon');
    clearIcons.forEach(icon => {
        icon.classList.remove('visible');
    });

    // Reset and hide selection badges
    const selectionBadges = document.querySelectorAll('.selection-badge');
    selectionBadges.forEach(badge => {
        badge.textContent = '';
        badge.classList.remove('visible');
    });

    // For single-select dropdowns, ensure "Random" or first option is selected
    const singleSelectDropdowns = document.querySelectorAll('.dropdown-list.single-select');
    singleSelectDropdowns.forEach(dropdownList => {
        const buttonsContainer = dropdownList.querySelector('.filter-buttons-container');
        const optionsArray = Array.from(buttonsContainer.children).map(btn => btn.dataset.value);
        const defaultOption = optionsArray.find(label => label.toLowerCase() === 'zufall');
        const buttonToSelect = defaultOption
            ? buttonsContainer.querySelector(`.filter-button[data-value="${defaultOption}"]`)
            : buttonsContainer.firstElementChild;

        if (buttonToSelect) {
            buttonToSelect.classList.add('selected');
            const badge = dropdownList.parentElement.querySelector('.selection-badge');
            updateSelectionBadge([buttonToSelect.dataset.value], badge, dropdownList.id);
        }
    });

    // Clear search box
    if (searchBox) {
        searchBox.value = '';
        clearSearchBtn.classList.remove('visible');
        hideAutocompleteSuggestions();
    }

    // Trigger a filter update
    triggerDropdownChangeEvent();
}

/**
 * Initialize event listeners for action buttons like "Clear All"
 */
export function initializeFilterActionButtons() {
    // Attach event listener to "Clear All" button
    if (clearAllFiltersButton) {
        clearAllFiltersButton.addEventListener('click', () => {
            clearAllFilters();
        });

        // Ensure the button is accessible via keyboard
        clearAllFiltersButton.addEventListener('keydown', (event) => {
            if (event.key === 'Enter' || event.key === ' ') {
                event.preventDefault();
                clearAllFilters();
            }
        });
    } else {
        console.error("initializeFilterActionButtons: clearAllFiltersButton element not found.");
    }
}

/**
 * Function to initialize dropdowns and attach necessary event listeners
 */
export function initializeFilterDropdowns() {
    // Handle filter updates triggered by custom dropdowns
    document.addEventListener('dropdownChange', () => {
        updateFilters();
    });

    // Search box input event with debouncing
    if (searchBox) {
        searchBox.addEventListener('input', () => {
            // Toggle visibility of the clear icon
            if (searchBox.value.length > 0) {
                clearSearchBtn.classList.add('visible');
            } else {
                clearSearchBtn.classList.remove('visible');
            }
            clearTimeout(debounceTimer);
            debounceTimer = setTimeout(() => {
                if (searchBox.value.length >= AUTOCOMPLETE_MIN_DIGITS) {
                    handleAutocomplete();
                } else {
                    hideAutocompleteSuggestions();
                }
            }, AUTOCOMPLETE_DEBOUNCE_DELAY);
        });
    } else {
        console.error("initializeFilterDropdowns: searchBox element not found.");
    }

    // Clear search box and trigger update
    if (clearSearchBtn && searchBox) {
        clearSearchBtn.addEventListener('click', () => {
            searchBox.value = '';
            clearSearchBtn.classList.remove('visible');
            triggerDropdownChangeEvent();
            hideAutocompleteSuggestions();
        });

        // Ensure the clear button is accessible via keyboard
        clearSearchBtn.addEventListener('keydown', (event) => {
            if (event.key === 'Enter' || event.key === ' ') {
                event.preventDefault();
                searchBox.value = '';
                clearSearchBtn.classList.remove('visible');
                triggerDropdownChangeEvent();
                hideAutocompleteSuggestions();
            }
        });
    } else {
        console.error("initializeFilterDropdowns: clearSearchBtn or searchBox element not found.");
    }

    

    // Attach event listeners to dropdowns using event delegation
    attachDropdownEventDelegation();

    // Initialize filter navigation arrows
    initializeFilterNavigationArrows();

    // Initial filter update
    triggerDropdownChangeEvent();


}

/**
 * Function to attach event listeners to dropdowns using event delegation
 */
export function attachDropdownEventDelegation() {
    const dropdownHeaders = document.querySelectorAll('.dropdown-header');
    const dropdownLists = document.querySelectorAll('.dropdown-list');

    // Function to handle dropdown toggling
    function toggleDropdown(targetDropdown, header) {
        const isVisible = targetDropdown.classList.contains('show');
        if (isVisible) {
            targetDropdown.classList.remove('show');
            header.setAttribute('aria-expanded', 'false');
        } else {
            // Close other open dropdowns
            document.querySelectorAll('.dropdown-list.show').forEach(list => {
                list.classList.remove('show');
                document.querySelector(`.dropdown-header[data-target="${list.id}"]`)?.setAttribute('aria-expanded', 'false');
            });
            targetDropdown.classList.add('show');
            header.setAttribute('aria-expanded', 'true');
        }
    }

    // Function to handle selection of dropdown items
    function handleDropdownSelection(dropdownList, target) {
        const isSingleSelect = dropdownList.classList.contains('single-select');
        const dropdownHeader = document.querySelector(`.dropdown-header[data-target="${dropdownList.id}"]`);
        const selectionBadge = dropdownHeader.querySelector('.selection-badge');
        const clearButton = dropdownHeader.querySelector('.clear-icon');

        if (isSingleSelect) {
            dropdownList.querySelectorAll('.filter-button').forEach(btn => btn.classList.remove('selected'));
            target.classList.add('selected');
        } else {
            target.classList.toggle('selected');
        }

        // Update the selection badge
        const selectedButtons = dropdownList.querySelectorAll('.filter-button.selected');
        const selectedValues = Array.from(selectedButtons).map(btn => btn.dataset.value);
        updateSelectionBadge(selectedValues, selectionBadge, dropdownList.id);

        // Update the visibility of the clear button
        if (isSingleSelect) {
            if (clearButton) clearButton.style.display = 'none';
        } else {
            if (selectedValues.length > 0) {
                clearButton.classList.add('visible');
            } else {
                clearButton.classList.remove('visible');
            }
        }

        // Trigger filter update
        triggerDropdownChangeEvent();
    }

    // Function to clear selected items in a dropdown
    function clearDropdownSelection(dropdownList) {
        const dropdownHeader = document.querySelector(`.dropdown-header[data-target="${dropdownList.id}"]`);
        const selectionBadge = dropdownHeader.querySelector('.selection-badge');
        const clearButton = dropdownHeader.querySelector('.clear-icon');

        // Deselect all buttons
        dropdownList.querySelectorAll('.filter-button.selected').forEach(button => button.classList.remove('selected'));

        // Clear the badge and hide clear button
        updateSelectionBadge([], selectionBadge, dropdownList.id);
        if (clearButton) clearButton.classList.remove('visible');

        // Trigger filter update
        triggerDropdownChangeEvent();
    }

    // Attach event listeners to dropdown headers
    dropdownHeaders.forEach(header => {
        header.addEventListener('click', (event) => {
            event.stopPropagation();
            const targetDropdownId = header.getAttribute('data-target');
            const targetDropdown = document.getElementById(targetDropdownId);
            toggleDropdown(targetDropdown, header);
        });

        // Allow keyboard accessibility
        header.addEventListener('keydown', (event) => {
            if (event.key === 'Enter' || event.key === ' ') {
                event.preventDefault();
                const targetDropdownId = header.getAttribute('data-target');
                const targetDropdown = document.getElementById(targetDropdownId);
                toggleDropdown(targetDropdown, header);
            }
        });
    });

    // Handle button clicks within the dropdowns using event delegation
    dropdownLists.forEach(dropdownList => {
        dropdownList.addEventListener('click', (event) => {
            const target = event.target;
            if (target && target.classList.contains('filter-button')) {
                event.preventDefault();
                handleDropdownSelection(dropdownList, target);
            }
        });

        // Handle clear button (only for multi-select dropdowns)
        const dropdownHeader = document.querySelector(`.dropdown-header[data-target="${dropdownList.id}"]`);
        const clearButton = dropdownHeader?.querySelector('.clear-icon');

        if (clearButton) {
            clearButton.addEventListener('click', (event) => {
                event.stopPropagation();
                clearDropdownSelection(dropdownList);
            });

            // Ensure the clear button is accessible via keyboard
            clearButton.addEventListener('keydown', (event) => {
                if (event.key === 'Enter' || event.key === ' ') {
                    event.preventDefault();
                    clearDropdownSelection(dropdownList);
                }
            });
        }
    });

    // Close dropdowns when clicking outside
    document.addEventListener('click', (event) => {
        dropdownLists.forEach(dropdownList => {
            const header = document.querySelector(`.dropdown-header[data-target="${dropdownList.id}"]`);
            if (!dropdownList.contains(event.target) && !header.contains(event.target)) {
                dropdownList.classList.remove('show');
                header.setAttribute('aria-expanded', 'false');
            }
        });
    });
}

/**
 * Function to update selection badges based on selected values
 * @param {Array} selectedValues - Array of selected values
 * @param {HTMLElement} badgeElement - The badge element to update
 * @param {string} dropdownListId - ID of the dropdown list
 */
export function updateSelectionBadge(selectedValues, badgeElement, dropdownListId) {
    if (!badgeElement) return; // Early return if badgeElement is not provided

    if (selectedValues.length > 0) {
        badgeElement.textContent = selectedValues.join(', ');
        badgeElement.classList.add('visible');
        badgeElement.style.display = 'inline-block';
    } else {
        badgeElement.textContent = '';
        badgeElement.classList.remove('visible');
        badgeElement.style.display = 'none';
    }
    checkSelections();
}

/**
 * Function to check if any selections exist and enable/disable the "Clear All" button
 */
function checkSelections() {
    const selectedButtons = document.querySelectorAll('.dropdown-list .filter-button.selected');
    
    if (selectedButtons.length > 0) {
        clearAllFiltersButton.removeAttribute('disabled');  // Enable the button
    } else {
        clearAllFiltersButton.setAttribute('disabled', 'true');  // Disable the button
    }
}

/**
 * Helper function to get selected values from a specific dropdown list
 * @param {string} dropdownListId - The ID of the dropdown list element
 * @returns {Array} - An array of selected values
 */
export function getSelectedValues(dropdownListId) {
    const buttons = document.querySelectorAll(`#${dropdownListId} .filter-button.selected`);
    return Array.from(buttons).map(btn => btn.dataset.value);
}

/**
 * Function to handle autocomplete for cast and director names
 */
function handleAutocomplete() {
    const searchQuery = searchBox.value.trim();

    if (searchQuery.length >= AUTOCOMPLETE_MIN_DIGITS) {
        showProgressIndicator(); // Show the progress indicator before starting the fetch

        fetch(`/autocomplete?query=${encodeURIComponent(searchQuery)}`)
            .then(response => {
                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }
                return response.json();
            })
            .then(data => {
                showAutocompleteSuggestions(data); // Populate autocomplete suggestions
            })
            .catch(error => {
                console.error('Error fetching autocomplete suggestions:', error);
                hideAutocompleteSuggestions(); // Hide suggestions on error
            })
            .finally(() => {
                hideProgressIndicator(); // Always hide the progress indicator
            });
    } else {
        hideAutocompleteSuggestions(); // Hide suggestions if query is too short
    }
}

/**
 * Function to show autocomplete suggestions
 * @param {Array} suggestions - Array of suggestion objects
 */
function showAutocompleteSuggestions(suggestions) {
    let autocompleteList = document.getElementById('autocomplete-list');
    if (!autocompleteList) {
        autocompleteList = document.createElement('div');
        autocompleteList.id = 'autocomplete-list';
        autocompleteList.className = 'autocomplete-items';
        document.body.appendChild(autocompleteList);
    }

    // Position the autocompleteList under the searchBox
    const searchBoxRect = searchBox.getBoundingClientRect();
    autocompleteList.style.position = 'absolute';
    autocompleteList.style.top = `${searchBoxRect.bottom + window.scrollY}px`;
    autocompleteList.style.left = `${searchBoxRect.left + window.scrollX}px`;
    autocompleteList.style.width = `${searchBoxRect.width}px`;
    autocompleteList.style.zIndex = '10000'; // Ensure it's on top

    autocompleteList.innerHTML = '';

    suggestions.forEach(item => {
        const suggestionItem = document.createElement('div');
        suggestionItem.className = 'autocomplete-item';
        suggestionItem.innerHTML = `<strong>${item.name}</strong> <small>(${item.type})</small>`;
        suggestionItem.dataset.name = item.name;
        suggestionItem.dataset.type = item.type;

        suggestionItem.addEventListener('click', () => {
            searchBox.value = item.name;
            hideAutocompleteSuggestions();
            triggerDropdownChangeEvent();
        });

        autocompleteList.appendChild(suggestionItem);
    });
}

/**
 * Function to hide autocomplete suggestions
 */
function hideAutocompleteSuggestions() {
    const autocompleteList = document.getElementById('autocomplete-list');
    if (autocompleteList) {
        autocompleteList.parentNode.removeChild(autocompleteList);
    }
    hideProgressIndicator();
}

/**
 * Function to populate dropdown lists with options
 * @param {string} dropdownListId - The ID of the dropdown list element
 * @param {Object|Array} options - An object with option labels as keys and counts as values or an array of labels
 * @param {Array} selectedValues - An array of currently selected option values
 * @param {boolean} singleSelect - If true, only one option can be selected
 * @param {boolean} showCounts - If true, display counts alongside labels
 */
export function populateDropdown(dropdownListId, options, selectedValues = [], singleSelect = false, showCounts = true) {
    const dropdownList = document.getElementById(dropdownListId);
    if (!dropdownList) {
        console.error(`populateDropdown: Element with ID '${dropdownListId}' not found.`);
        return;
    }

    dropdownList.innerHTML = "";

    // Add 'single-select' class if applicable
    if (singleSelect) {
        dropdownList.classList.add('single-select');
    } else {
        dropdownList.classList.remove('single-select');
    }

    let optionsArray = [];

    if (typeof options === 'object' && !Array.isArray(options)) {
        optionsArray = Object.entries(options).map(([label, count]) => ({ label, count }));
    } else if (Array.isArray(options)) {
        optionsArray = options.map(label => ({ label }));
    } else {
        console.error(`populateDropdown: 'options' should be an object or array. Received:`, options);
        return;
    }

    // Conditionally sort the options alphabetically, but skip sorting for "sort-dropdown-list"
    if (dropdownListId !== 'sort-dropdown-list') {
        optionsArray.sort((a, b) => a.label.localeCompare(b.label));
    }

    // For "sort-dropdown-list", implement ascending and descending options, excluding "Random"
    if (dropdownListId === 'sort-dropdown-list') {
        const extendedOptionsArray = [];
        optionsArray.forEach(option => {
            if (option.label.toLowerCase() === 'zufall') { // 'zufall' means 'random' in German
                // Add "Random" without icons
                extendedOptionsArray.push({
                    label: option.label,
                    value: `${option.label}`
                });
            } else {
                // Add options with ascending and descending icons
                extendedOptionsArray.push({
                    value: option.label,
                    label: option.label.includes("asc") ? `${option.label} <i class="fa fa-sort-amount-up"></i>` : `${option.label} <i class="fa fa-sort-amount-down"></i>`,
                });
            }
        });

        optionsArray = extendedOptionsArray;
    }

    // Create a container for the filter buttons
    const buttonsContainer = document.createElement('div');
    buttonsContainer.className = 'filter-buttons-container';

    // Render buttons
    optionsArray.forEach(option => {
        const button = document.createElement("button");
        button.type = "button";
        button.className = "filter-button";

        if (showCounts && option.count !== undefined) {
            button.innerHTML = `${option.label} (${option.count})`;
        } else {
            button.innerHTML = option.label;
        }

        button.dataset.value = option.value || option.label;

        if (selectedValues.includes(option.value || option.label)) {
            button.classList.add('selected');
        }
        buttonsContainer.appendChild(button);
    });

    dropdownList.appendChild(buttonsContainer);

    // Update the Selection Badge for normal filters
    const dropdownHeader = document.querySelector(`.dropdown-header[data-target="${dropdownListId}"]`);
    const selectionBadge = dropdownHeader.querySelector('.selection-badge');
    const selectedButtons = dropdownList.querySelectorAll('.filter-button.selected');
    const selectedValuesUpdated = Array.from(selectedButtons).map(btn => btn.dataset.value);
    updateSelectionBadge(selectedValuesUpdated, selectionBadge, dropdownList.id);
    
    // Hide the clear icon for single-select dropdowns
    const clearButton = dropdownHeader.querySelector('.clear-icon');
    if (singleSelect) {
        if (clearButton) {
            clearButton.style.display = 'none';
        }
    } else {
        if (clearButton) {
            clearButton.style.display = '';
        }
    }
}

/**
 * Function to update filters based on selected criteria and search query
 * @param {number} page - The current page number for pagination
 */
export function updateFilters(page = 1) {
    const selectedYears = getSelectedValues('year-dropdown-list');
    const selectedGenres = getSelectedValues('genre-dropdown-list');
    const selectedCountries = getSelectedValues('country-dropdown-list');
    const selectedStandorte = getSelectedValues('standort-dropdown-list');
    const selectedMedia = getSelectedValues('medium-dropdown-list');
    const selectedSortByValues = getSelectedValues('sort-dropdown-list');
    const selectedSortBy = selectedSortByValues.length > 0 ? selectedSortByValues : ["Zufall"]; // 'Zufall' means 'Random'

    const searchQuery = searchBox ? searchBox.value.trim() : '';





    const params = new URLSearchParams();
    if (selectedYears.length) {
        params.append('years', selectedYears.join(','));
    }
    if (selectedGenres.length) {
        params.append('genres', selectedGenres.join(','));
    }
    if (selectedCountries.length) {
        params.append('countries', selectedCountries.join(','));
    }
    if (selectedStandorte.length) {
        params.append('standorte', selectedStandorte.join(','));
    }
    if (selectedMedia.length) {
        params.append('media', selectedMedia.join(','));
    }
    if (selectedSortBy.length) {
        params.append('sort_by', selectedSortBy[0]);
    }

    // Include search query regardless of length
    if (searchQuery.length > 0) {
        params.append('search', searchQuery);
    }

    params.append('page', page);
    let total_movies = 0;
    // Show the progress indicator before starting the fetch
    showProgressIndicator();

    fetch(`/filter_movies?${params.toString()}`)
        .then(response => response.json())
        .then(data => {
            const { years, genres, countries, standorte, media, sort_options, movies, current_page, total_pages, total_movies } = data;

            // Determine number of columns per row based on total_movies
            let columnsPerRow = 1; // Default to 1 column

            if (total_movies > 100) {
                columnsPerRow = 5;
            } else if (total_movies > 60) {
                columnsPerRow = 4;
            } else if (total_movies > 20) {
                columnsPerRow = 3;
            } else {
                columnsPerRow = 1;
            }

            // Populate dropdowns based on the filtered data
            populateDropdown('year-dropdown-list', years, selectedYears);
            populateDropdown('genre-dropdown-list', genres, selectedGenres);
            populateDropdown('country-dropdown-list', countries, selectedCountries);
            populateDropdown('standort-dropdown-list', standorte, selectedStandorte);
            populateDropdown('medium-dropdown-list', media, selectedMedia);
            populateDropdown('sort-dropdown-list', sort_options, selectedSortBy, true, false);
                
            // Update the movie listings with the current number of movies
            updateMovieListings(movies);

            // Update the layout by adding a class based on columnsPerRow
            setGridLayout(columnsPerRow);

            // Update pagination
            updatePagination(current_page, total_pages, total_movies, columnsPerRow);

            updateHeadline(selectedGenres, 
                selectedYears, 
                selectedCountries, 
                selectedStandorte,
                selectedMedia, 
                selectedSortByValues,
                searchQuery, 
                total_movies); // Pass selected genres and years

        })
        .catch(error => {
            console.error('Error fetching filter data:', error);
            if (movieContainer) {
                movieContainer.innerHTML = `<p class="no-movies-message">An error occurred. Please try again later.</p>`;
            }
        })
        .finally(() => {
            hideProgressIndicator();

        });
}

/**
 * Function to set the grid layout based on the number of columns
 * @param {number} columns - Number of columns per row
 */
function setGridLayout(columns) {
    if (!movieContainer) return;

    // Remove existing column classes
    movieContainer.classList.remove('columns-1', 'columns-3', 'columns-4', 'columns-5');

    // Add the appropriate column class
    switch (columns) {
        case 3:
            movieContainer.classList.add('columns-3');
            break;
        case 4:
            movieContainer.classList.add('columns-4');
            break;
        case 5:
            movieContainer.classList.add('columns-5');
            break;
        default:
            movieContainer.classList.add('columns-1');
            break;
    }
}

/**
 * Initialize filter navigation arrows
 */
function initializeFilterNavigationArrows() {
    const leftArrow = document.querySelector('.filter-nav-arrow.left');
    const rightArrow = document.querySelector('.filter-nav-arrow.right');
    const mainFiltersContainer = document.querySelector('.main-filters-container');

    if (!leftArrow || !rightArrow || !mainFiltersContainer) {
        console.error("Filter navigation arrows or main filters container not found.");
        return;
    }

    leftArrow.addEventListener('click', () => {
        mainFiltersContainer.scrollBy({
            left: -200,
            behavior: 'smooth'
        });
    });

    rightArrow.addEventListener('click', () => {
        mainFiltersContainer.scrollBy({
            left: 200,
            behavior: 'smooth'
        });
    });

    // Update arrow visibility on scroll
    mainFiltersContainer.addEventListener('scroll', () => {
        updateFilterNavigationArrowsVisibility();
    });

    // Update arrow visibility on window resize
    window.addEventListener('resize', () => {
        updateFilterNavigationArrowsVisibility();
    });

    // Initial check
    updateFilterNavigationArrowsVisibility();
}

/**
 * Update visibility of filter navigation arrows based on scroll position
 */
function updateFilterNavigationArrowsVisibility() {
    const leftArrow = document.querySelector('.filter-nav-arrow.left');
    const rightArrow = document.querySelector('.filter-nav-arrow.right');
    const mainFiltersContainer = document.querySelector('.main-filters-container');

    if (!leftArrow || !rightArrow || !mainFiltersContainer) {
        return;
    }

    const scrollLeft = mainFiltersContainer.scrollLeft;
    const maxScrollLeft = mainFiltersContainer.scrollWidth - mainFiltersContainer.clientWidth;

    if (scrollLeft <= 0) {
        leftArrow.classList.add('hidden');
    } else {
        leftArrow.classList.remove('hidden');
    }

    if (scrollLeft >= maxScrollLeft - 1) {
        rightArrow.classList.add('hidden');
    } else {
        rightArrow.classList.remove('hidden');
    }
}

/**
 * Function to trigger a custom event to notify filter.js of dropdown changes
 */
export function triggerDropdownChangeEvent() {
    const event = new CustomEvent('dropdownChange');
    console.log("Dispatching dropdownChange event");
    document.dispatchEvent(event);
}


export function updateHeadline(
    selectedGenres = [], 
    selectedYears = [], 
    selectedCountries = [], 
    selectedStandorte = [], 
    selectedMedia = [], 
    selectedSortByValues = [], 
    searchQuery,
    total_movies
) {
    let headlineText = 'Auswahl: ';
    console.log("total_movies", total_movies)

    // Clear existing headline content
    const headlineElement = document.querySelector('.view-toggle-title');
    if (!headlineElement) {
        console.error('Element with class .view-toggle-title not found');
        return;
    }
    headlineElement.innerHTML = '';  // Clear existing content

    // Helper function to add text with icon
    const appendTextWithIcon = (iconClass, text) => {
        const span = document.createElement('span');
        const icon = document.createElement('i');
        icon.className = iconClass;  // Assign Font Awesome class
        span.appendChild(icon);      // Add the icon to span
        span.innerHTML += ` ${text}`; // Add text after the icon
        if (headlineElement.innerHTML) {
            headlineElement.innerHTML += ' | '; // Add separator if there is existing content
        }
        headlineElement.appendChild(span); // Append the span to the headline
    };

    // Add search query if present
    if (searchQuery) {
        appendTextWithIcon('fa fa-search', searchQuery);
    }

    // Add genres if present
    if (selectedGenres.length > 0) {
        appendTextWithIcon('fa fa-film', selectedGenres.join(', '));
    }

    // Add years if present
    if (selectedYears.length > 0) {
        appendTextWithIcon('fa fa-calendar-alt', selectedYears.join(', '));
    }

    // Add countries if present
    if (selectedCountries.length > 0) {
        appendTextWithIcon('fa fa-globe', selectedCountries.join(', '));
    }

    // Add standorte (locations) if present
    if (selectedStandorte.length > 0) {
        appendTextWithIcon('fa fa-map-marker-alt', selectedStandorte.join(', '));
    }

    // Add media formats if present
    if (selectedMedia.length > 0) {
        appendTextWithIcon('fa fa-compact-disc', selectedMedia.join(', '));
    }

    // Add sort options if present
    if (selectedSortByValues.length > 0) {
        appendTextWithIcon('fa fa-sort', selectedSortByValues.join(', '));
    }

    // Add total movie count with thousand separators
    if (total_movies !== undefined && total_movies > 0) {
        const formattedTotalMovies = total_movies.toLocaleString('de-DE'); // German locale for dot as thousand separator
        appendTextWithIcon('fa fa-film', `${formattedTotalMovies} ${formattedTotalMovies === '1' ? 'Film gefunden' : 'Filme gefunden'}`);

    }

    // Default text if nothing is selected
    if (!searchQuery && 
        selectedGenres.length === 0 && 
        selectedYears.length === 0 && 
        selectedCountries.length === 0 && 
        selectedStandorte.length === 0 && 
        selectedMedia.length === 0 && 
        selectedSortByValues.length === 0 && 
        total_movies === 0) {
        headlineElement.textContent = '';  // Set to empty if nothing is selected
    }
}

--- File: static\js\hero.js ---
document.addEventListener('DOMContentLoaded', function () {
 
    // Call the wrapper function after the DOM content is fully loaded
    initializeHeroSectionIfPresent();

    // Call truncateText function for overview sections
    truncateText('.info-section.overview p', 500);

    // Call the function on initial load and resize
    adjustTitleFontSize();
    window.addEventListener('resize', adjustTitleFontSize);

    // Call the function on initial load and window resize
    adjustMetadataWidth();
    window.addEventListener('resize', adjustMetadataWidth);

    // Call the function on initial load and window resize
    updateMovieCardBackground();
    window.addEventListener('resize', updateMovieCardBackground);

});


// Wrapper function to check the presence of hero section before initializing
function initializeHeroSectionIfPresent() {
    function manageHeroAndTaglines() {
        // Taglines array for the hero section
        const taglines = [
            "Entdecke unsere Sammlung von fast 20.000 Filmen.",
            "Finde deine Lieblingsfilme und entdecke neue Perlen.",
            "Tauche ein in cineastische Meisterwerke.",
            "Erlebe das Beste aus Arthouse- und klassischem Kino.",
            "Dein Zugang zu zeitlosen Filmen.",
            "Die Filmsammlung des FORMAT Filmkunst-Verleihs.",
            "FÃ¼r eine Handvoll Dollar kannst du von den MÃ¶glichkeiten profitieren.",
            "Ãœber 19.000 Filme - die grÃ¶ÃŸte private Filmsammlung Mitteldeutschlands.",
            "Independent- und Arthouse-Filme auf DVD, Blu-ray und 3D-Blu-ray.",
            "'Unendliche Weiten' an Informationen zu den Filmen.",
            "Cineastische RaritÃ¤ten, Arthouse und Blockbuster - alles unter einem Dach.",
            "FILMKUNST-Verleih seit Ã¼ber 18 Jahren."
        ];
    
        // Hero images array
        const heroImages = [
            '/static/images/backdrop_1.jpg',
            '/static/images/backdrop_2.jpg',
            '/static/images/backdrop_3.jpg',
            '/static/images/backdrop_4.jpg'
        ];
    
        // Elements for the hero section
        const taglineElement = document.getElementById('dynamic-tagline');
        const heroImageElement = document.querySelector('.hero-image img');
        const logoElement = document.querySelector('.logo span');
    
        // Check for the presence of critical elements before proceeding
        if (!taglineElement || !heroImageElement || !logoElement) {
            console.info("Hero elements not found on this page. Skipping hero section initialization.");
            return; // Exit the function if elements are not found
        }
    
        // Initial setup for tagline and hero image
        let currentTaglineIndex = Math.floor(Math.random() * taglines.length);
        taglineElement.textContent = taglines[currentTaglineIndex];
        taglineElement.classList.add('fade-in');
    
        // Set a random hero image
        const randomImage = heroImages[Math.floor(Math.random() * heroImages.length)];
        heroImageElement.src = randomImage;
    
        // Change taglines periodically
        setInterval(() => {
            taglineElement.classList.remove('fade-in');
            taglineElement.classList.add('fade-out');
    
            setTimeout(() => {
                currentTaglineIndex = (currentTaglineIndex + 1) % taglines.length;
                taglineElement.textContent = taglines[currentTaglineIndex];
                taglineElement.classList.remove('fade-out');
                taglineElement.classList.add('fade-in');
    
                // Randomly change logo color
                const randomChance = Math.random();
                logoElement.style.color = randomChance < 0.3 ? 'red' : 'white';
            }, 1000); // Matches transition duration
        }, 5000);
    }    
    // Run the hero management code only if the relevant elements exist on the page
    const heroSectionExists = document.querySelector('.hero-image img') && document.getElementById('dynamic-tagline') && document.querySelector('.logo span');
    
    if (heroSectionExists) {
        manageHeroAndTaglines(); // Initialize only if hero section elements are present
    } else {
        console.info("Hero section elements not found on this page. Skipping hero management.");
    }
}

// Truncate text for overview sections
function truncateText(selector, maxLength) {
    const elements = document.querySelectorAll(selector);
    elements.forEach(element => {
        const originalText = element.textContent;
        if (originalText.length > maxLength) {
            const truncatedText = originalText.substring(0, maxLength).trim() + '...';
            element.textContent = truncatedText;
        }
    });
}
// Adjust title font size dynamically based on overflow
function adjustTitleFontSize() {
    const movieCards = document.querySelectorAll('.movie-card');
    movieCards.forEach(card => {
        const titleContainer = card.querySelector('.titles');
        if (titleContainer) {
            const mainTitle = titleContainer.querySelector('.main-title');
            const releaseYear = titleContainer.querySelector('.release-year');
            
            if (mainTitle && releaseYear) {
                // Reset to default size
                mainTitle.style.fontSize = '1.6em';
                releaseYear.style.fontSize = '0.8em';
                
                // Check if the title overflows
                if (titleContainer.scrollWidth > titleContainer.clientWidth) {
                    let fontSize = parseFloat(window.getComputedStyle(mainTitle).fontSize);
                    while (titleContainer.scrollWidth > titleContainer.clientWidth && fontSize > 0.8) {
                        fontSize -= 0.1;
                        mainTitle.style.fontSize = fontSize + 'em';
                        releaseYear.style.fontSize = (fontSize * 0.7) + 'em';  // Adjust year proportionally
                    }
                }
            }
        }
    });
}

// Adjust the width of metadata elements dynamically
function adjustMetadataWidth() {
    const metadataElements = document.querySelectorAll('.movie-metadata');
    metadataElements.forEach(metadata => {
        const parentWidth = metadata.parentElement.clientWidth;
        metadata.style.maxWidth = parentWidth + 'px';
    });
}


// Function to update movie card background images based on screen size
function updateMovieCardBackground() {
const movieCards = document.querySelectorAll('.movie-card.poster-background');
movieCards.forEach(card => {
    const mobileImage = card.getAttribute('data-mobile-image');
    const desktopImage = card.getAttribute('data-desktop-image');

    // Set the correct background based on the screen size
    if (window.innerWidth >= 1024) {
        if (desktopImage) {
            card.style.backgroundImage = `url(${desktopImage})`;
        }
    } else {
        if (mobileImage) {
            card.style.backgroundImage = `url(${mobileImage})`;
        }
    }
});
}
--- File: static\js\main.js ---
// File: static/js/main.js

import { initializeSwiper } from './carousel.js';  // Example import
import { initializeFilterDropdowns, initializeFilterPanelToggle, initializeFilterActionButtons } from './filter.js'; 
import { toggleViews } from './catalog.js'; 
import { themeToggle } from './theme_toggle.js'; 

document.addEventListener('DOMContentLoaded', function () {
    initializeFilterDropdowns();  // Initialize dropdowns on page load
    initializeSwiper(); // Initialize Swiper Carousel
    initializeFilterPanelToggle(); // Initialize filter panel toggle
    initializeFilterActionButtons(); // Initialize "Clear All" and "Show All Results" buttons
    toggleViews();
    themeToggle();

});

--- File: static\js\navbar.js ---
document.addEventListener('DOMContentLoaded', function () {
    const navbar = document.querySelector('.navbar'); // Select the navbar element
    let lastScrollTop = 0; // Track the previous scroll position
    let debounceTimer = null; // Timer for debounce to limit function calls

    // Function to handle scroll events
    function handleScroll() {
        const currentScroll = window.pageYOffset || document.documentElement.scrollTop;

        // Show navbar at the top of the page
        if (currentScroll <= 20) {
            navbar.classList.remove('hide');
            navbar.classList.add('show');
        }
        // Hide navbar on scroll down
        else if (currentScroll > lastScrollTop) {
            navbar.classList.add('hide');
            navbar.classList.remove('show');
        }
        // Show navbar on scroll up
        else {
            navbar.classList.remove('hide');
            navbar.classList.add('show');
        }

        lastScrollTop = currentScroll <= 0 ? 0 : currentScroll; // Update lastScrollTop
    }

    // Debounce function to limit the number of scroll events fired
    function debounce(func, delay) {
        return function (...args) {
            clearTimeout(debounceTimer); // Clear the previous timer
            debounceTimer = setTimeout(() => func.apply(this, args), delay); // Set a new timer
        };
    }

    // Listen to scroll events with debounce applied
    window.addEventListener('scroll', debounce(handleScroll, 100));
});

--- File: static\js\pagination.js ---
// File: static/js/pagination.js

import { topPaginationContainer, bottomPaginationContainer } from './entry.js';  // Import pagination containers
import { updateFilters } from './filter.js';  // Import the updateFilters function

/**
 * Function to handle pagination updates for both top and bottom paginations
 */
export function updatePagination(currentPage, totalPages, totalMovies, columnsPerRow) {
    [topPaginationContainer, bottomPaginationContainer].forEach(paginationContainer => {
        if (!paginationContainer) return;

        paginationContainer.innerHTML = "";  // Clear existing pagination buttons

        // Create the "Previous" Button
        let prevDisabledClass = currentPage <= 1 ? 'disabled' : '';
        let prevDisabledAttr = currentPage <= 1 ? 'aria-disabled="true"' : '';
        paginationContainer.innerHTML += `<li class="${prevDisabledClass}"><a href="#" data-page="${currentPage - 1}" ${prevDisabledAttr}>&laquo; ZurÃ¼ck</a></li>`;

        // Determine if ellipsis is needed
        const showStartEllipsis = currentPage > 3;
        const showEndEllipsis = currentPage < totalPages - 2;

        // Add first page and ellipsis if needed
        if (showStartEllipsis) {
            paginationContainer.innerHTML += `<li><a href="#" data-page="1">1</a></li>`;
            paginationContainer.innerHTML += `<li class="ellipsis"><span>...</span></li>`;
        }

        // Generate page numbers around the current page
        let startPage = Math.max(1, currentPage - 2);
        let endPage = Math.min(totalPages, currentPage + 2);
        for (let p = startPage; p <= endPage; p++) {
            if (p === currentPage) {
                paginationContainer.innerHTML += `<li class="active"><span>${p}</span></li>`;  // Use <span> for active page
            } else {
                paginationContainer.innerHTML += `<li><a href="#" data-page="${p}">${p}</a></li>`;
            }
        }

        // Add ellipsis and last page if needed
        if (showEndEllipsis) {
            paginationContainer.innerHTML += `<li class="ellipsis"><span>...</span></li>`;
            paginationContainer.innerHTML += `<li><a href="#" data-page="${totalPages}">${totalPages}</a></li>`;
        }

        // Create the "Next" Button
        let nextDisabledClass = currentPage >= totalPages ? 'disabled' : '';
        let nextDisabledAttr = currentPage >= totalPages ? 'aria-disabled="true"' : '';
        paginationContainer.innerHTML += `<li class="${nextDisabledClass}"><a href="#" data-page="${currentPage + 1}" ${nextDisabledAttr}>NÃ¤chste &raquo;</a></li>`;
    });

    attachPaginationEventListeners(columnsPerRow);
}

/**
 * Function to attach click event listeners for pagination buttons
 */
export function attachPaginationEventListeners(columnsPerRow) {
    const paginationLinks = document.querySelectorAll('.pagination nav ul li a[data-page]');
    paginationLinks.forEach(link => {
        link.addEventListener('click', function (event) {
            event.preventDefault();
            if (this.parentElement.classList.contains('disabled')) {
                return;  // Ignore clicks on disabled buttons
            }
            const page = parseInt(this.getAttribute('data-page'));
            if (!isNaN(page)) updateFilters(page);  // Trigger filter update with selected page
        });
    });
}

--- File: static\js\theme_toggle.js ---
// File: static/js/theme-toggle.js

export function themeToggle() {
    const themeToggleBtn = document.getElementById('theme-toggle-btn');
    const currentTheme = localStorage.getItem('theme') || 'light';

    // Function to apply theme
    const applyTheme = (theme) => {
        document.documentElement.setAttribute('data-theme', theme);
        if (theme === 'dark') {
            themeToggleBtn.classList.add('active');
            themeToggleBtn.innerHTML = '<i class="fas fa-sun"></i>'; // Change icon
        } else {
            themeToggleBtn.classList.remove('active');
            themeToggleBtn.innerHTML = '<i class="fas fa-moon"></i>'; // Change icon
        }
    };

    // Initial theme application
    applyTheme(currentTheme);

    // Toggle theme on button click
    themeToggleBtn.addEventListener('click', () => {
        const newTheme = document.documentElement.getAttribute('data-theme') === 'dark' ? 'light' : 'dark';
        applyTheme(newTheme);
        localStorage.setItem('theme', newTheme);
    });

    // Keyboard Accessibility for Theme Toggle Button
    themeToggleBtn.addEventListener('keydown', (e) => {
        if (e.key === 'Enter' || e.key === ' ') {
            e.preventDefault();
            themeToggleBtn.click();
        }
    });
}

--- File: templates\catalog.html ---
<!-- File: templates/catalog.html -->
<!DOCTYPE html>
<html lang="de">
<head>
    <meta charset="UTF-8">
    <title>Katalog - FORMAT Filmkunst-Verleih</title>
    <!-- Responsive Meta Tag -->
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <!-- Fonts and Stylesheets -->
    <link href="https://fonts.googleapis.com/css2?family=Cinzel:wght@400;700&family=Open+Sans&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="{{ url_for('static', filename='css/main.css') }}?v=1.0">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" crossorigin="anonymous">
    <link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Lato">
    <!-- Swiper.js CSS for Carousel -->
    <link rel="stylesheet" href="https://unpkg.com/swiper/swiper-bundle.min.css" />
    <!-- Tippy.js CSS -->
    <link rel="stylesheet" href="https://unpkg.com/tippy.js@6/dist/tippy.css" />
    <!-- Popper.js (required by Tippy.js) -->
    <script src="https://unpkg.com/@popperjs/core@2"></script>
    <!-- Tippy.js JS -->
    <script src="https://unpkg.com/tippy.js@6"></script>

</head>
<body>
    <header>
        <nav class="navbar">
            <div class="logo">
                <a href="{{ url_for('index') }}"><span>FORMAT</span></a>
                <a href="{{ url_for('catalog') }}" class="sub-logo"><span>Katalog</span></a>
            </div>
            
            <!-- Centered theme title in the navbar -->
            <div class="nav-center-title">
                <span class="theme-title">...{{ selected_theme }}</span>
            </div>
            
            <div class="menu-toggle" aria-label="Toggle navigation menu" aria-expanded="false" role="button" tabindex="0">
                <i class="fas fa-bars"></i>
            </div>
            
            <ul class="nav-links">
                <li><a href="https://verein.format-filmkunstverleih.de/">filmkunst-verleih</a></li>
                <!-- Additional menu links can be placed here -->
            </ul>
            <!-- Add this inside the <nav class="navbar"> ... </nav> -->
            <button id="theme-toggle-btn" class="theme-toggle-btn" aria-label="Toggle Dark Mode" tabindex="0">
                <i class="fas fa-moon"></i>
            </button>
        </nav>
        <!-- Separate link for mobile users -->
        <div class="mobile-footer-link">
            <a href="https://verein.format-filmkunstverleih.de/">filmkunst-verleih</a>
        </div>
    </header>
    
    <main>
        <!-- Movie Carousel Section -->
        <section class="movie-carousel-section">
            <!-- Swiper.js Carousel -->
            <div class="swiper-container">
                <div class="swiper-wrapper">
                    {% for featured_movie in featured_movies %}
                    <div class="swiper-slide">
                        <div class="featured-movie-card">
                            <img src="{{ url_for('movie_images', filename=featured_movie['folder_name'] + '/poster/poster_1.avif') }}" 
                                 alt="{{ featured_movie['main_title'] }}" 
                                 onerror="this.onerror=null; this.src='{{ url_for('static', filename='images/default_movie.png') }}';" 
                                 loading="lazy">
                            <div class="featured-movie-overlay">
                                <h3>{{ featured_movie['main_title'] }}</h3>
                                <a href="{{ url_for('movie_details', movie_id=featured_movie['movie_id']) }}" class="btn btn-secondary">Mehr erfahren</a>
                            </div>
                        </div>
                    </div>
                    {% endfor %}
                </div>
                <!-- Add Pagination -->
                <div class="swiper-pagination"></div>
                <!-- Add Navigation -->
                <div class="swiper-button-prev"></div>
                <div class="swiper-button-next"></div>
            </div>
        </section>


        <div id="progress-indicator" class="progress-indicator" role="status" aria-live="polite" aria-hidden="true">
            <div class="spinner" aria-hidden="true"></div>
            <p>einen Moment bitte, lade Filme...</p>
        </div> 
            

        <!-- Catalog Search Section -->
        <section class="catalog-search"> 
            <div class="search-dropdown-container">
                <!-- Search Box Container -->
                <div class="search-container">
                    <i class="fas fa-search search-icon" aria-hidden="true"></i>
                    <input id="search-box" type="text" placeholder="Suche (mind. 4 Zeichen)" aria-label="Suchfeld">
                    <span id="clear-search" class="clear-icon" role="button" tabindex="0" aria-label="Suchfeld leeren">&times;</span>
                </div>

                <form id="filter-form">
                    <!-- Main Filters Container Wrapper -->
                    <div class="main-filters-container-wrapper">
                        <!-- Main Filters Container for Year, Genre, Country, Standort, Medium, Sort -->
                        <div class="main-filters-container">
                            <!-- Left Navigation Arrow -->
                            <button class="filter-nav-arrow left hidden" aria-label="Scroll Left">
                                <i class="fas fa-chevron-left" aria-hidden="true"></i>
                            </button>
                            <!-- Year Filter -->
                            <div class="custom-dropdown" data-dropdown="year-dropdown">
                                <div class="dropdown-header" data-target="year-dropdown-list" aria-label="Jahre" role="button" tabindex="0" aria-haspopup="true" aria-expanded="false">
                                    <div class="dropdown-header-top">
                                        <div class="header-label">
                                            <i class="fas fa-calendar-alt" aria-hidden="true"></i>
                                            <span>Zeit</span>
                                        </div>
                                        <div class="dropdown-arrow">
                                            <!-- Arrow Icon -->
                                        </div>
                                    </div>
                                    <div class="dropdown-header-bottom">
                                        <span class="selection-badge">
                                            <span class="badge-label"></span>
                                        </span>
                                        <span class="clear-icon" role="button" tabindex="0" aria-label="Jahresfilter lÃ¶schen">&times;</span>
                                    </div>
                                </div>
                            </div>

                            <!-- Genre Filter -->
                            <div class="custom-dropdown" data-dropdown="genre-dropdown">
                                <div class="dropdown-header" data-target="genre-dropdown-list" aria-label="Genres" role="button" tabindex="0" aria-haspopup="true" aria-expanded="false">
                                    <div class="dropdown-header-top">
                                        <div class="header-label">
                                            <i class="fas fa-film" aria-hidden="true"></i>
                                            <span>Genre</span>
                                        </div>
                                        <div class="dropdown-arrow">
                                            <!-- Arrow Icon -->
                                        </div>
                                    </div>
                                    <div class="dropdown-header-bottom">
                                        <span class="selection-badge">
                                            <span class="badge-label"></span>
                                        </span>
                                        <span class="clear-icon" role="button" tabindex="0" aria-label="Genrefilter lÃ¶schen">&times;</span>
                                    </div>
                                </div>
                            </div>

                            <!-- Country Filter -->
                            <div class="custom-dropdown" data-dropdown="country-dropdown">
                                <div class="dropdown-header" data-target="country-dropdown-list" aria-label="LÃ¤nder" role="button" tabindex="0" aria-haspopup="true" aria-expanded="false">
                                    <div class="dropdown-header-top">
                                        <div class="header-label">
                                            <i class="fas fa-globe" aria-hidden="true"></i>
                                            <span>Land</span>
                                        </div>
                                        <div class="dropdown-arrow">
                                            <!-- Arrow Icon -->
                                        </div>
                                    </div>
                                    <div class="dropdown-header-bottom">
                                        <span class="selection-badge">
                                            <span class="badge-label"></span>
                                        </span>
                                        <span class="clear-icon" role="button" tabindex="0" aria-label="LÃ¤nderfilter lÃ¶schen">&times;</span>
                                    </div>
                                </div>
                            </div>

                            <!-- Standort Filter -->
                            <div class="custom-dropdown" data-dropdown="standort-dropdown">
                                <div class="dropdown-header" data-target="standort-dropdown-list" aria-label="Standort" role="button" tabindex="0" aria-haspopup="true" aria-expanded="false">
                                    <div class="dropdown-header-top">
                                        <div class="header-label">
                                            <i class="fas fa-map-marker-alt" aria-hidden="true"></i>
                                            <span>Regal</span>
                                        </div>
                                        <div class="dropdown-arrow">
                                            <!-- Arrow Icon -->
                                        </div>
                                    </div>
                                    <div class="dropdown-header-bottom">
                                        <span class="selection-badge">
                                            <span class="badge-label"></span>
                                        </span>
                                        <span class="clear-icon" role="button" tabindex="0" aria-label="Standortfilter lÃ¶schen">&times;</span>
                                    </div>
                                </div>
                            </div>

                            <!-- Medium Filter -->
                            <div class="custom-dropdown" data-dropdown="medium-dropdown">
                                <div class="dropdown-header" data-target="medium-dropdown-list" aria-label="Medium" role="button" tabindex="0" aria-haspopup="true" aria-expanded="false">
                                    <div class="dropdown-header-top">
                                        <div class="header-label">
                                            <i class="fas fa-compact-disc" aria-hidden="true"></i>
                                            <span>Medium</span>
                                        </div>
                                        <div class="dropdown-arrow">
                                            <!-- Arrow Icon -->
                                        </div>
                                    </div>
                                    <div class="dropdown-header-bottom">
                                        <span class="selection-badge">
                                            <span class="badge-label"></span>
                                        </span>
                                        <span class="clear-icon" role="button" tabindex="0" aria-label="Mediumfilter lÃ¶schen">&times;</span>
                                    </div>
                                </div>
                            </div>

                            <!-- Sort By Dropdown -->
                            <div class="custom-dropdown" data-dropdown="sort-dropdown">
                                <div class="dropdown-header" data-target="sort-dropdown-list" aria-label="Sortieren nach" role="button" tabindex="0" aria-haspopup="true" aria-expanded="false">
                                    <div class="dropdown-header-top">
                                        <div class="header-label">
                                            <i class="fas fa-sort" aria-hidden="true"></i>
                                            <span>Ordnung</span>
                                        </div>
                                        <div class="dropdown-arrow">
                                            <!-- Arrow Icon -->
                                        </div>
                                    </div>
                                    <div class="dropdown-header-bottom">
                                        <span class="selection-badge">
                                            <span class="badge-label"></span>
                                        </span>
                                        <!-- No clear icon for single-select dropdowns -->
                                    </div>
                                </div>
                            </div>
                            <!-- Clear All Filters Button -->
                            <button type="button" id="clear-all-filters-button" class="filter-action-button" aria-label="Alle Filter zurÃ¼cksetzen" tabindex="0">
                                <i class="fas fa-undo" aria-hidden="true"></i>
                                <span class="sr-only">Alle Filter zurÃ¼cksetzen</span>
                            </button>  

                        </div>
                        <!-- Right Navigation Arrow -->
                        <button class="filter-nav-arrow right hidden" aria-label="Scroll Right">
                            <i class="fas fa-chevron-right" aria-hidden="true"></i>
                        </button>
                    </div>
                </form>
            </div>

            <!-- Dropdown Lists Container -->
            <div class="dropdown-lists-container">
                <!-- Year Dropdown List -->
                <div class="dropdown-list" id="year-dropdown-list">
                    <!-- Buttons populated dynamically -->
                </div>
                <!-- Genre Dropdown List -->
                <div class="dropdown-list" id="genre-dropdown-list">
                    <!-- Buttons populated dynamically -->
                </div>
                <!-- Country Dropdown List -->
                <div class="dropdown-list" id="country-dropdown-list">
                    <!-- Buttons populated dynamically -->
                </div>
                <!-- Standort Dropdown List -->
                <div class="dropdown-list" id="standort-dropdown-list">
                    <!-- Buttons populated dynamically -->
                </div>
                <!-- Medium Dropdown List -->
                <div class="dropdown-list" id="medium-dropdown-list">
                    <!-- Buttons populated dynamically -->
                </div>
                <!-- Sort Dropdown List -->
                <div class="dropdown-list" id="sort-dropdown-list">
                    <!-- Buttons populated dynamically -->
                </div>
            </div>
        </section>



        <!-- Top Pagination Section -->
        <section class="pagination top-pagination">
         
            <nav>
                <ul>
                    <!-- Pagination will be populated dynamically here -->
                </ul>
            </nav>
        </section>
        
<!-- Toggle View Buttons Container with Headline -->
<section class="view-toggle-section" style="padding: 20px; max-width: 1200px; margin: 0 auto; display: flex; justify-content: space-between; align-items: center;">
    <!-- Headline Left of Toggle Buttons -->
    <div class="view-toggle-headline">
        <h2 class="view-toggle-title"></h2>
    </div>

    <!-- Toggle Buttons Right of Headline -->
    <div class="view-toggle-container">
        <button id="grid-view-btn" class="view-toggle-btn active" aria-label="Grid View" aria-pressed="true">
            <i class="fas fa-th"></i>
        </button>
        <button id="list-view-btn" class="view-toggle-btn" aria-label="List View" aria-pressed="false">
            <i class="fas fa-list"></i>
        </button>
    </div>
</section>


    
        <!-- Movie Listings Container -->
        <!-- <section class="movie-listings-container" style="position: relative; background-color: var(--background-color);"> -->
    
            <!-- Movie Listings Section -->
            <section class="movie-listings">
                <!-- Movie cards will be dynamically populated here -->
            </section>
        <!-- </section> -->

        <!-- Bottom Pagination Section -->
        <section class="pagination bottom-pagination">
            <nav>
                <ul>
                    <!-- Pagination will be populated dynamically here -->
                </ul>
            </nav>
        </section>
    </main>

    <footer>
        <div class="footer-content">
            <p>&copy; 2024 FORMAT Filmkunst-Verleih e.V.</p>
        </div>
    </footer>

    <!-- Swiper.js JS for Carousel -->
    <script src="https://unpkg.com/swiper/swiper-bundle.min.js"></script>
    <!-- Scripts -->
    <script type="module" src="{{ url_for('static', filename='js/main.js') }}"></script>

    <script src="{{ url_for('static', filename='js/navbar.js') }}"></script>
    <!-- Toggle View JS -->
    <script src="{{ url_for('static', filename='js/toggle-view.js') }}"></script>
</body>
</html>

--- File: templates\index.html ---
<!DOCTYPE html>
<html lang="de">
<head>
    <meta charset="UTF-8">
    <title>FORMAT Filmkunst-Verleih - Home</title>
    <!-- Responsive Meta Tag -->
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <!-- Google Fonts -->
    <link href="https://fonts.googleapis.com/css2?family=Cinzel:wght@400;700&family=Open+Sans&display=swap" rel="stylesheet">
    <!-- Font Awesome for Icons -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" crossorigin="anonymous" referrerpolicy="no-referrer" />
    <!-- Main CSS -->
    <link rel="stylesheet" href="{{ url_for('static', filename='css/main.css') }}">
</head>
<body>
    <header>
        <nav class="navbar">
            <div class="logo">
                <a href="{{ url_for('index') }}"><span>FORMAT</span></a>
                <a href="{{ url_for('catalog') }}" class="sub-logo"><span>Katalog</span></a>
            </div>
            <div class="menu-toggle" aria-label="Toggle navigation menu" aria-expanded="false" role="button" tabindex="0">
                <i class="fas fa-bars"></i>
            </div>
            <ul class="nav-links">
                <li><a href="https://verein.format-filmkunstverleih.de/">filmkunst-verleih</a></li>
                <!-- Additional menu links can be placed here -->
            </ul>
        </nav>
        <!-- Separate link for mobile users -->
        <div class="mobile-footer-link">
            <a href="https://verein.format-filmkunstverleih.de/">filmkunst-verleih</a>
        </div>
    </header>
    

    <main>
        <!-- Hero Section -->
        <section class="hero">
            <div class="hero-image">
                <img src="images/backdrop_1.jpg" alt="Hero Image">
            </div>
            <div class="hero-overlay">
                <h1 id="dynamic-tagline">FÃ¼r eine Handvoll Dollar kannst du von den MÃ¶glichkeiten profitieren.</h1>
            <!-- Place the button outside of the hero-overlay div -->
                <a href="{{ url_for('catalog') }}" class="btn btn-primary">Katalog</a>
            </div>

        </section>
        


    </main>

    <footer>
        <div class="footer-content">
            <p>&copy; 2024 FORMAT Filmkunst-Verleih e.V. Alle Rechte vorbehalten.</p>
        </div>
    </footer>

    <!-- Scripts -->
    <script src="{{ url_for('static', filename='js/hero.js') }}" type="module"></script>
</body>
</html>

