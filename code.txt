=== Code Summary Generated at 2024-10-08 17:23:21 ===

=== Project Folder Structure ===

Format/
    static/
        assets/
            custom_controls/
                custom_dropdown.js
                custom_dropdown_search.css
                custom_dropdown_search.scss
                search_container.css
            fonts/
                Spacia Heavy.ttf
        css/
            main.css
            base/
                reset.css
                typography.css
                variables.css
            components/
                buttons.css
                cards.css
                carousel.css
                filter.css
                forms.css
                pagination.css
                progress_indicator.css
            layout/
                footer.css
                hero.css
                navbar.css
            pages/
                about.css
                catalog.css
                contact.css
                events.css
        images/
            backdrop_1.jpg
            backdrop_2.jpg
            backdrop_3.jpg
            backdrop_4.jpg
            default_movie.png
            event1.jpg
            event2.jpg
            event3.jpg
            logo.png
            movie1.jpg
            movie2.jpg
            team1.jpg
            team2.jpg
        js/
            filter.js
            navbar.js
            scripts.js
    templates/
        catalog.html
        index.html

=== File Contents ===

--- File: static\assets\custom_controls\custom_dropdown.js ---
document.addEventListener('DOMContentLoaded', function () {
    console.log("Custom Dropdowns: DOM fully loaded");
    initializeCustomDropdowns(); // Initialize custom dropdowns when DOM is loaded
    initializeSearchBox();
});

// Function to initialize the search box clear button and its behavior
function initializeSearchBox() {
    const searchBox = document.getElementById('search-box');
    const clearSearchButton = document.getElementById('clear-search');

    if (!searchBox || !clearSearchButton) {
        console.error("Search box or clear button not found.");
        return;
    }

    console.log("Initializing search box listeners...");
    
    // Show/hide the clear button based on input value
    searchBox.addEventListener('input', () => {
        if (searchBox.value.length > 0) {
            clearSearchButton.style.visibility = 'visible';  // Show the clear button
        } else {
            clearSearchButton.style.visibility = 'hidden';   // Hide the clear button
        }
    });

    // Clear the search box when the clear button is clicked
    clearSearchButton.addEventListener('click', () => {
        searchBox.value = '';
        clearSearchButton.style.visibility = 'hidden';
        console.log("Search box cleared.");
        // Optionally trigger any search box reset logic here
    });

    console.log("Search box listeners attached successfully.");
}

// Stellen Sie sicher, dass beim Initialisieren der Dropdowns das Selection Badge ebenfalls aktualisiert wird
function initializeCustomDropdowns() {
    console.log("Initializing Custom Dropdowns...");

    // Retrieve the custom dropdown elements by their header and list classes
    const dropdownHeaders = document.querySelectorAll('.dropdown-header');
    const dropdownLists = document.querySelectorAll('.dropdown-list');
    const clearButtons = document.querySelectorAll('.clear-icon');

    // Check if all required elements are present
    if (dropdownHeaders.length !== dropdownLists.length) {
        console.error("Mismatch in dropdown elements. Headers, lists, or clear buttons are not matching in count.");
        console.log("Headers found: ", dropdownHeaders.length);
        console.log("Dropdown lists found: ", dropdownLists.length);
        console.log("Clear buttons found: ", clearButtons.length);
        return; // Exit initialization if element counts don't match
    }

    console.log("Attaching event listeners to custom dropdowns...");
    // Attach event listeners for each dropdown and clear button
    dropdownHeaders.forEach((header, index) => {
        const dropdownList = dropdownLists[index];
        const clearButton = header.querySelector('.clear-icon');
        const countElement = header.querySelector('.selected-count');
        const badgeElement = header.querySelector('.selection-badge');

        // Initial Update
        updateSelectedCount(dropdownList, countElement, clearButton);

        attachDropdownListeners(header, dropdownList, clearButton);
    });
}
// Function to attach listeners to dropdown header, checkboxes, and clear button
/**
 * Function to attach event listeners to dropdown headers and clear buttons
 */
function attachDropdownListeners() {
    const dropdownHeaders = document.querySelectorAll('.dropdown-header');

    dropdownHeaders.forEach(header => {
        const dropdownList = header.nextElementSibling; // Assumes .dropdown-list follows .dropdown-header
        const clearButton = header.querySelector('.clear-icon');
        const selectedCount = header.querySelector('.selected-count');

        if (!dropdownList) {
            console.error("attachDropdownEventListeners: Dropdown list not found for a header.");
            return;
        }

        if (!selectedCount) {
            console.error("attachDropdownEventListeners: Selected count element not found in a header.");
            return;
        }

        // Toggle dropdown visibility on header click
        header.addEventListener('click', (event) => {
            event.stopPropagation(); // Prevent event from bubbling up
            toggleDropdown(dropdownList, header);
        });

        // Close dropdown when clicking outside
        document.addEventListener('click', (event) => {
            if (!header.contains(event.target) && !dropdownList.contains(event.target)) {
                dropdownList.classList.remove('show');
                header.setAttribute('aria-expanded', 'false');
            }
        });

        // Clear all selections when the clear button is clicked
        clearButton.addEventListener('click', (event) => {
            event.stopPropagation(); // Prevent header dropdown toggle
            const checkboxes = dropdownList.querySelectorAll('input[type="checkbox"]');
            checkboxes.forEach(checkbox => (checkbox.checked = false)); // Uncheck all boxes
            updateSelectedCount(checkboxes, selectedCount, clearButton); // Update selection count
            triggerDropdownChangeEvent();  // Trigger a custom change event to update filters
        });
    });

    // Attach a single event listener for all dropdown lists (event delegation)
    const dropdownLists = document.querySelectorAll('.dropdown-list');
    dropdownLists.forEach(list => {
        list.addEventListener('change', (event) => {
            if (event.target && event.target.matches('input[type="checkbox"]')) {
                const dropdownList = event.currentTarget;
                const header = dropdownList.previousElementSibling; // Assumes .dropdown-header precedes .dropdown-list
                const selectedCount = header.querySelector('.selected-count');
                const clearButton = header.querySelector('.clear-icon');
                updateSelectedCount(dropdownList.querySelectorAll('input[type="checkbox"]'), selectedCount, clearButton);
                triggerDropdownChangeEvent();
            }
        });
    });
}


// Function to attach checkbox listeners
function attachCheckboxListeners(dropdownList, selectedCount, clearButton) {
    const checkboxes = dropdownList.querySelectorAll('input[type="checkbox"]');
    console.log(`Attaching checkbox listeners to ${dropdownList.id}...`);
    console.log("Checkboxes found:", checkboxes.length);

    checkboxes.forEach(checkbox => {
        checkbox.addEventListener('change', () => {
            console.log("Checkbox change detected in", dropdownList.id);
            updateSelectedCount(checkboxes, selectedCount, clearButton); // Update the selected count
            triggerDropdownChangeEvent();  // Trigger a custom change event to update filters
        });
    });
    console.log(`Checkbox listeners successfully attached to ${dropdownList.id}`);
}

// Function to populate dropdowns dynamically and attach checkbox listeners
function populateDropdown(dropdownListId, options, selectedValues = []) {
    const dropdownList = document.getElementById(dropdownListId);
    dropdownList.innerHTML = "";  // Clear any existing options

    // Separate Decades and Years
    const decades = [];
    const years = [];

    // Iterate through options and separate into decades and years
    Object.entries(options).forEach(([key, count]) => {
        if (key.includes("...")) {
            decades.push({ label: key, count: count });
        } else {
            years.push({ label: key, count: count });
        }
    });

    console.log("Decades:", decades);
    console.log("Years:", years);

    // Sort Decades in Ascending Order (e.g., 1910...1919, 1920...1929)
    decades.sort((a, b) => parseInt(a.label.split("...")[0]) - parseInt(b.label.split("...")[0]));

    // Sort Years in Descending Order (e.g., 2023, 2022, 2021)
    years.sort((a, b) => parseInt(b.label) - parseInt(a.label));

    // Combine Decades First and Years Below
    const sortedOptions = [...decades, ...years];

    // Render Sorted Options to the Dropdown
    sortedOptions.forEach(option => {
        const isChecked = selectedValues.includes(option.label) ? 'checked' : '';
        const label = document.createElement('label');
        label.innerHTML = `<input type="checkbox" value="${option.label}" ${isChecked}> ${option.label} (${option.count})`;
        dropdownList.appendChild(label);
    });



    // Attach Checkbox Listeners after the dropdown is populated
    const header = document.querySelector(`#${dropdownListId}-header`);
    console.log(`Dropdown ${dropdownListId} header: `, header);
    if (header) {
        const selectedCount = header.querySelector('.selected-count');
        const clearButton = header.querySelector('.clear-icon');

        // Attach checkbox listeners to handle selections and updates
        if (selectedCount && clearButton) {
            attachCheckboxListeners(dropdownList, selectedCount, clearButton);
        } else {
            console.error(`Dropdown ${dropdownListId}: Could not find header elements for attaching checkbox listeners.`);
        }
    } else {
        console.error(`Dropdown header not found for ${dropdownListId}`);
    }
}


// Function to show/hide dropdown
function toggleDropdown(dropdownList) {
    const isVisible = dropdownList.style.display === 'block';
    dropdownList.style.display = isVisible ? 'none' : 'block';
}


// Function to trigger a custom event to notify filter.js of dropdown changes
// Trigger a custom change event to update filters
function triggerDropdownChangeEvent() {
    const event = new CustomEvent('dropdownChange');
    console.log("Dispatching dropdownChange event");

    // Dispatch the custom dropdownChange event
    document.dispatchEvent(event);

    // Call the function to update the movie list and pagination
    updateMovieListAndPagination();
}

const searchBox = document.getElementById('search-box');
const clearSearchButton = document.getElementById('clear-search');

// Show/hide the clear button based on input value
searchBox.addEventListener('input', () => {
    if (searchBox.value.length > 0) {
        clearSearchButton.style.visibility = 'visible';  // Show the clear button
    } else {
        clearSearchButton.style.visibility = 'hidden';   // Hide the clear button
    }
});

// Clear the search box when the clear button is clicked
clearSearchButton.addEventListener('click', () => {
    searchBox.value = '';
    clearSearchButton.style.visibility = 'hidden';
    // Optionally trigger any search box reset logic here
});


--- File: static\assets\custom_controls\custom_dropdown_search.css ---
/* search_container.css */

/* Parent Container */
.search-dropdown-container {
    display: flex;
    flex-wrap: wrap;
    justify-content: center;
    align-items: center; /* Ensures vertical alignment */
    width: 90%;

    background-color: #444;
    padding: 20px;

    box-sizing: border-box;
    /* Remove debug borders */
    /* border: 2px solid blue; */
}

/* Form */
#filter-form {
    display: flex;
    flex-wrap: wrap;
    gap: 10px; /* Space between elements */
    width: 100%;
    justify-content: center;
    align-items: center;
}

/* Search Container and Dropdowns */
.search-container,
.custom-dropdown {
    flex: 1 1 200px; /* Grow and shrink as needed, with a minimum width */
    display: flex;
    align-items: center;
    position: relative;
    height: 40px; /* Ensure same height */
    /* Remove debug borders */
    /* border: 2px solid red; */
    margin: 10px;
}

/* Search Box */
#search-box {
    flex: 1;
    height: 100%;
    padding: 0 40px 0 18px;
    font-size: 1em;
    background: #333;
    color: #e0e0e0;
    border: 2px solid #333;
    border-radius: 5px;
    box-sizing: border-box;
}

#search-box:focus {
    outline: none;
    border-color: var(--accent-color);
}

#search-box::placeholder {
    color: #aaa;
}

/* Clear Icon for Search Box */
#clear-search {
    position: absolute;
    right: 10px;
    top: 50%;
    transform: translateY(-50%);
    width: 24px;
    height: 24px;
    font-size: 1.2em;
    line-height: 24px;
    border-radius: 50%;
    background: rgba(68, 68, 68, 0.6);
    color: rgba(255, 255, 255, 0.6);
    cursor: pointer;
    visibility: hidden;
    z-index: 2;
}

.search-container:hover #clear-search {
    visibility: visible; /* Show clear icon on hover */
}

/* Dropdowns */
.custom-dropdown {
    display: flex;
    flex-direction: column;
    position: relative;
    width: 100%;
    height: 40px; /* Same height as search-container */
}

.dropdown-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    background: #333;
    color: #fff;
    padding: 0 18px;
    border-radius: 5px;
    cursor: pointer;
    height: 100%;
    transition: background 0.2s ease-in-out, color 0.2s ease-in-out;
}

.dropdown-header:hover {
    background: #444;
}

.dropdown-title {
    font-size: 1.05em;
    font-weight: 600;
}

.header-controls {
    display: flex;
    align-items: center;
    gap: 8px;
}

.selected-count {
    color: var(--link-color);
    padding: 4px 8px;
    border-radius: 8px;
    font-size: 0.85em;
    display: flex;
    align-items: center;
}

.clear-icon {
    width: 24px;
    height: 24px;
    font-size: 1.2em;
    color: #fff;
    background: rgba(68, 68, 68, 0.6);
    border-radius: 50%;
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    visibility: hidden;
}

.dropdown-header:hover .clear-icon,
.header-controls:hover .clear-icon {
    visibility: visible; /* Show clear icons on hover */
}


/* Selection Badge Styling */
.selection-badge {
    /* display: none;  */
    background-color: var(--accent-color);
    color: #fff;
    border-radius: 12px;
    padding: 2px 8px;
    font-size: 0.8em;
    margin-left: 8px;
    transition: opacity 0.3s ease;
}

.dropdown-header .selection-badge.visible {
    display: inline-block;
}




/* Dropdown List */
.dropdown-list {
    display: none;
    background: #2c2c2c;
    color: #e0e0e0;
    position: absolute;
    top: 100%;
    left: 0;
    width: 100%;
    border-radius: 5px;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3);
    z-index: 1000;
    max-height: 250px;
    overflow-y: auto;
}

.dropdown-list label {
    display: flex;
    align-items: center;
    padding: 12px 18px;
    font-size: 1.05em;
    color: #f1f1f1;
    font-weight: 500;
    cursor: pointer;
}

.dropdown-list input[type="checkbox"] {
    margin-right: 12px;
    transform: scale(1.2);
}

.dropdown-list label:hover {
    background: #444;
    color: #fff;
}

/* Scrollbar Customization */
.dropdown-list::-webkit-scrollbar {
    width: 10px;
}

.dropdown-list::-webkit-scrollbar-track {
    background: #333;
}

.dropdown-list::-webkit-scrollbar-thumb {
    background-color: #555;
    border-radius: 5px;
}

/* forms.css */

/* Search Container Styles */
.search-container {
    position: relative; /* Establishes a positioning context for the icon and clear button */
    width: 100%;
    max-width: 400px; /* Adjust as needed for your layout */
    margin: 0 auto; /* Centers the search box horizontally */
}

/* Search Icon Styles */
.search-container .search-icon {
    position: absolute; /* Positions the icon relative to the search container */
    top: 50%; /* Vertically centers the icon */
    left: 10px; /* Positions the icon 10px from the left edge */
    transform: translateY(-50%); /* Corrects the vertical alignment */
    color: #aaa; /* Sets the icon color */
    pointer-events: none; /* Allows clicks to pass through to the input */
    font-size: 1.2em; /* Adjusts the icon size */
}

/* Search Input Field Styles */
.search-container input#search-box {
    width: 100%;
    padding: 10px 10px 10px 35px; /* Top, Right, Bottom, Left padding */
    border: 1px solid #bdc3c7;
    border-radius: 6px;
    font-size: 1rem;
    color: var(--text-color);
    transition: border-color 0.3s ease, box-shadow 0.3s ease;
}

/* Search Input Focus Styles */
.search-container input#search-box:focus {
    outline: none;
    border-color: var(--accent-color);
    box-shadow: 0 0 5px rgba(231, 76, 60, 0.5);
}

/* Clear Search Icon Styles */
.search-container .clear-icon {
    position: absolute; /* Positions the clear icon relative to the search container */
    top: 50%; /* Vertically centers the icon */
    right: 10px; /* Positions the icon 10px from the right edge */
    transform: translateY(-50%); /* Corrects the vertical alignment */
    cursor: pointer;
    color: #aaa;
    font-size: 1.2em; /* Adjusts the icon size */
    display: none; /* Hidden by default */
}

/* Show Clear Icon When Visible */
.search-container .clear-icon.visible {
    display: block;
}

/* Responsive Adjustments for Smaller Screens */
@media (max-width: 480px) {
    .search-container {
        max-width: 100%; /* Allows the search box to take full width on small screens */
        padding: 0 10px; /* Adds horizontal padding */
    }

    .search-container .search-icon,
    .search-container .clear-icon {
        left: 5px;
        right: 5px;
        font-size: 1em; /* Slightly smaller icons */
    }

    .search-container input#search-box {
        padding: 8px 8px 8px 30px; /* Adjust padding for smaller screens */
        font-size: 0.9rem; /* Slightly smaller text */
    }
}

/* Progress Indicator Styles */
.progress-indicator {
    position: fixed; /* Overlay the entire viewport */
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(44, 62, 80, 0.8); /* Semi-transparent dark background */
    color: #ecf0f1; /* Light text color */
    display: none; /* Hidden by default */
    align-items: center;
    justify-content: center; /* Center content vertically and horizontally */
    flex-direction: column;
    z-index: 1000; /* Ensure it appears above other elements */
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3);
}

/* Spinner Styles */
.spinner {
    border: 6px solid #f3f3f3; /* Light grey */
    border-top: 6px solid var(--accent-color); /* Accent color */
    border-radius: 50%;
    width: 40px;
    height: 40px;
    animation: spin 1s linear infinite;
    margin-bottom: 10px;
}

/* Spinner Animation */
@keyframes spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
}

/* Progress Indicator Text */
.progress-indicator p {
    font-size: 1.2em;
    margin-top: 10px;
}

--- File: static\assets\custom_controls\search_container.css ---
/* search_container.css */

/* Variables (Ensure these are defined in your variables.css or main.css) */
:root {
    --primary-color: #2c3e50; /* Dark Blue */
    --secondary-color: #34495e; /* Slightly Lighter Blue */
    --accent-color: #e74c3c; /* Vibrant Red */
    --link-color: #f1c40f; /* Gold */
    --secondary-text-color: #7f8c8d; /* Muted Text */
    --text-color: #ffffff; /* White Text for Dropdown */
    --placeholder-color: #bdc3c7; /* Placeholder Text Color */
    --background-color: #f9f9f9; /* Background Color for Container */
    --transition-duration: 0.3s;
}

/* Parent Container */
.search-dropdown-container {
    display: flex;
    flex-wrap: wrap;
    justify-content: center;
    align-items: center; /* Ensures vertical alignment */
    width: 90%;
    max-width: 1200px;
    background-color: var(--background-color);
    padding: 25px;
    margin: 25px auto; /* Center horizontally */
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    border-radius: 10px;
    box-sizing: border-box;
    /* border: 2px solid blue; */ /* Remove after debugging */
}

/* Form */
#filter-form {
    display: flex;
    flex-direction: row;
    align-items: center;
    gap: 20px; /* Space between elements */
    width: 100%;
    flex-wrap: wrap; /* Allow elements to wrap on smaller screens */
}

/* Search Container and Dropdowns */
.search-container,
.custom-dropdown {
    display: flex;
    align-items: center;
    position: relative;
    height: 50px; /* Increased height for better visibility */
    border-radius: 8px;
    flex: 1; /* Allow elements to grow */
    min-width: 200px; /* Minimum width to prevent shrinking too much */
}

/* Search Box */
.search-container {
    position: relative;
    max-width: 400px; /* Optional: Limit the maximum width */
    flex: 2; /* Allows the search box to take up more space */
}

.search-container input[type="text"],
#search-box {
    width: 100%;
    height: 100%; /* Ensures the input fills the container's height */
    padding: 0 40px; /* Adjust padding for icons */
    border: 1px solid #bdc3c7;
    border-radius: 8px;
    font-size: 1rem;
    background-color: #333; /* Dark background to match dropdowns */
    color: #fff; /* White text for contrast */
    transition: border-color var(--transition-duration), box-shadow var(--transition-duration);
    box-sizing: border-box; /* Ensures padding is included in width and height */
}

.search-container input[type="text"]:focus,
#search-box:focus {
    outline: none;
    border-color: var(--accent-color);
    box-shadow: 0 0 5px rgba(231, 76, 60, 0.5);
}

.search-container input[type="text"]::placeholder,
#search-box::placeholder {
    color: var(--placeholder-color);
}

/* Search Icon */
.search-icon {
    position: absolute;
    left: 15px;
    top: 50%;
    transform: translateY(-50%);
    color: var(--placeholder-color);
    font-size: 1rem;
}

/* Clear Icon for Search Box */
#clear-search {
    position: absolute;
    right: 15px;
    top: 50%;
    transform: translateY(-50%);
    width: 24px;
    height: 24px;
    font-size: 1.2rem;
    line-height: 24px;
    border-radius: 50%;
    background: rgba(231, 76, 60, 0.6);
    color: #fff;
    cursor: pointer;
    visibility: hidden;
    transition: background 0.3s ease, color 0.3s ease;
    display: flex;
    align-items: center;
    justify-content: center;
}

.search-container:hover #clear-search,
.search-container input[type="text"]:not(:placeholder-shown) + #clear-search {
    visibility: visible;
}

#clear-search:hover {
    background: var(--accent-color);
    color: #fff;
}

#clear-search:active {
    background: rgba(231, 76, 60, 1);
    color: #fff;
}

/* Custom Dropdown Styles */
.custom-dropdown {
    display: flex;
    flex-direction: column;
    position: relative; /* Necessary for absolute positioning of .dropdown-list */
    width: 200px; /* Fixed width for consistency */
    height: auto; /* Allow height to adjust based on content */
    border-radius: 8px; /* Consistent border radius */
    overflow: visible; /* Ensure dropdown list is visible outside the container */
    background-color: #333; /* Consistent background */
    transition: background-color var(--transition-duration), box-shadow var(--transition-duration);
    flex: 1; /* Allow dropdowns to grow equally */
}

.custom-dropdown:hover {
    background-color: #444;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.2);
}

/* Dropdown Header Styling */
.dropdown-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    background: var(--primary-color); /* Use CSS variable for background */
    color: var(--text-color); /* Use CSS variable for text color */
    padding: 0 18px;
    border-radius: 8px; /* Consistent border radius */
    cursor: pointer;
    height: 50px; /* Same height as search-container */
    transition: background var(--transition-duration), color var(--transition-duration);
}

.dropdown-header:hover {
    background: var(--secondary-color); /* Slightly lighter on hover */
}

/* Icon Styling */
.dropdown-header i {
    font-size: 1.2em; /* Adjust icon size as needed */
    margin-right: 8px; /* Space between icon and controls */
}

/* Header Controls Container */
.header-controls {
    display: flex;
    align-items: center;
    gap: 8px;
}

/* Selected Count Styling */
.selected-count {
    color: var(--link-color);
    padding: 4px 8px;
    border-radius: 8px;
    font-size: 0.85em;
    display: flex;
    align-items: center;
    background-color: rgba(255, 255, 255, 0.2); /* Subtle background for readability */
    transition: background-color var(--transition-duration);
}

.selected-count:hover {
    background-color: rgba(255, 255, 255, 0.3);
}

/* Clear Icon Styling */
.clear-icon {
    width: 24px;
    height: 24px;
    font-size: 1.2em;
    color: #fff;
    background: rgba(68, 68, 68, 0.6);
    border-radius: 50%;
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    visibility: hidden;
    transition: background var(--transition-duration), color var(--transition-duration);
}

.dropdown-header:hover .clear-icon,
.header-controls:hover .clear-icon {
    visibility: visible; /* Show clear icons on hover */
}

.clear-icon:hover {
    background: var(--accent-color);
    color: #fff;
}

.clear-icon:active {
    background: var(--secondary-text-color);
    color: #eee;
}

/* Dropdown List Styles */
.dropdown-list {
    display: none; /* Hidden by default */
    background: #2c2c2c; /* Dark background for contrast */
    color: #e0e0e0; /* Light text for readability */
    position: absolute; /* Position relative to the closest positioned ancestor */
    top: 100%; /* Position below the header */
    left: 0;
    width: 100%; /* Match the width of the dropdown container */
    border-radius: 0 0 8px 8px; /* Rounded corners at the bottom */
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3); /* Subtle shadow for depth */
    z-index: 1000; /* Ensure it appears above other elements */
    max-height: 250px; /* Maximum height with scrollbar */
    overflow-y: auto; /* Enable vertical scrolling if content exceeds max height */
    transition: opacity 0.3s ease, transform 0.3s ease; /* Smooth transition for visibility */
    transform: translateY(-10px); /* Slightly translate upwards when hidden */
    opacity: 0; /* Fully transparent when hidden */
}

/* Show Class to Display Dropdown */
.dropdown-list.show {
    display: block; /* Make it take up space */
    transform: translateY(0); /* Reset translation */
    opacity: 1; /* Fully opaque */
}

/* Dropdown List Items */
.dropdown-list label {
    display: flex;
    align-items: center;
    padding: 12px 18px;
    font-size: 1.05em;
    color: #f1f1f1;
    font-weight: 500;
    cursor: pointer;
    transition: background var(--transition-duration), color var(--transition-duration);
}

.dropdown-list input[type="checkbox"] {
    margin-right: 12px;
    transform: scale(1.2);
}

.dropdown-list label:hover {
    background: #444;
    color: #ffffff;
}

/* Scrollbar Customization */
.dropdown-list::-webkit-scrollbar {
    width: 8px;
}

.dropdown-list::-webkit-scrollbar-track {
    background: #333;
    border-radius: 4px;
}

.dropdown-list::-webkit-scrollbar-thumb {
    background-color: #555;
    border-radius: 4px;
    transition: background-color var(--transition-duration);
}

.dropdown-list::-webkit-scrollbar-thumb:hover {
    background-color: var(--accent-color);
}

/* Responsive Adjustments for Mobile */
@media (max-width: 768px) {
    .catalog-search {
        flex-direction: column; /* Stack everything vertically */
        align-items: center;
        width: 100%; /* Full width */
        padding: 10px 0; /* Add some padding */
    }
    .search-dropdown-container {
        flex-direction: column; /* Stack search box and dropdowns */
        width: 100%; /* Use full width */
        padding: 15px; /* Padding for mobile */
        margin-top: 15px;
    }

    .search-container, .custom-dropdown {
        width: 100%; /* Full width for each element */
        margin-bottom: 15px; /* Spacing between controls */
    }

    .dropdown-header {
        height: 50px; /* Larger height for touch devices */
        font-size: 1.1rem; /* Slightly larger font */
    }
}

--- File: static\css\main.css ---
/* main.css */

/* Import Base Styles */
@import url('./base/reset.css');
@import url('./base/variables.css');
@import url('./base/typography.css');

/* Import Layout Styles */
@import url('./layout/navbar.css');
@import url('./layout/footer.css');
@import url('./layout/hero.css');

/* Import Component Styles */
@import url('./components/progress_indicator.css');
@import url('./components/carousel.css');
@import url('./components/filter.css');
@import url('./components/cards.css');
@import url('./components/buttons.css');
@import url('./components/forms.css');
@import url('./components/pagination.css');

/* Import Page-Specific Styles */
@import url('./pages/catalog.css');
@import url('./pages/about.css');
@import url('./pages/contact.css');
@import url('./pages/events.css');

--- File: static\css\base\reset.css ---
/* reset.css */

/* Refined Reset */

*, *::before, *::after {
    margin: 0;
    padding: 0;
    box-sizing: inherit; /* Use inherit to control from a higher element */
}

/* Apply box-sizing globally */
html {
    box-sizing: border-box;
}

/* Normalize link styles but allow color */
a {
    text-decoration: none;
    color: inherit; /* Allow for custom link colors */
}

/* Images should not exceed their container */
img {
    max-width: 100%;
    height: auto; /* Maintain aspect ratio */
}

/* Lists should not have default styles */
ul, ol {
    list-style: none;
    margin-left: 0;
}

/* Prevent overflow issues */
html, body {
    overflow-x: hidden; /* Restrict horizontal overflow */
    font-family: 'Open Sans', sans-serif; /* Set default font */
}

--- File: static\css\base\typography.css ---
/* typography.css */

/* Import Fonts */
@import url('https://fonts.googleapis.com/css2?family=Playfair+Display:wght@400;700&family=Roboto:wght@400;700&display=swap');

/* Typography Styles */
body {
    font-family: var(--font-body);
    color: var(--text-dark);
    background-color: var(--background-light);
    line-height: 1.6;
}

/* Headings */
h1, h2, h3, h4, h5, h6 {
    font-family: var(--font-heading);
    color: var(--primary-color);
    margin-bottom: 15px;
}

/* Paragraphs */
p {
    margin-bottom: 15px;
    color: var(--secondary-text-color);
    font-size: 1.1em;
}

/* Links */
a {
    color: var(--link-color);
    transition: color var(--transition-duration) ease;
}

a:hover {
    color: var(--link-hover-color);
}

/* Buttons inside forms and other components */
button {
    font-family: var(--font-body);
}

--- File: static\css\base\variables.css ---
:root {
    /* Color Variables */
    --primary-color: #000000; /* Solid Black for main backgrounds */
    --secondary-color: #1a1a1a; /* Dark Gray for secondary sections */
    --accent-color: #e7b000; /* Yellow for highlights */
    --background-light: #ffffff; /* White for light backgrounds */
    --background-dark: #1a1a1a; /* Dark gray for sections */
    --text-light: #ffffff; /* White text for dark backgrounds */
    --text-dark: #000000; /* Black text for light backgrounds */
    --secondary-text-color: #bfbfbf; /* Muted Light Gray */
    --link-color: #e7b000; /* Yellow for links */
    --link-hover-color: #ff6a00; /* Orange for link hover states */
    --button-bg: #e7b000; /* Yellow for buttons */
    --button-hover-bg: #ff6a00; /* Orange for button hover background */
    --border-color: #333333; /* Darker Gray for borders */
    --shadow-color: rgba(0, 0, 0, 0.2); /* Subtle shadow color */
    --font-heading: 'Playfair Display', serif; /* Elegant Serif for Headings */
    --font-body: 'Roboto', sans-serif; /* Clean Sans-Serif for Body */
    --transition-duration: 0.3s; /* Consistent transition duration */
}

--- File: static\css\components\buttons.css ---
/* buttons.css */

/* General Button Styles */
.btn {
    background-color: var(--primary-color);
    color: #fff;
    padding: 10px 20px;
    border: none;
    cursor: pointer;
    font-weight: 600;
    border-radius: 8px; /* Increased border-radius for elegance */
    transition: background-color 0.3s ease, transform 0.3s ease;
    font-family: 'Open Sans', sans-serif;
}

.btn:hover {
    background-color: var(--button-hover-color);
    transform: translateY(-2px); /* Subtle lift on hover */
}

/* Primary Button Styling */
.btn-primary {
    background-color: var(--accent-color);
    color: var(--primary-color);
    padding: 12px 24px;
    border-radius: 10px;
    border: none;
    font-size: 1.2em;
    text-transform: uppercase;
    font-weight: bold;
    cursor: pointer;
    transition: background-color 0.3s ease, transform 0.3s ease;
}

.btn-primary:hover {
    background-color: #a98b03;
    transform: translateY(-3px);
}

--- File: static\css\components\cards.css ---
/* static/css/components/cards.css */

/* Import Additional Fonts for Themes */
@import url('https://fonts.googleapis.com/css2?family=Anton&family=Comic+Neue&family=Creepster&family=Great+Vibes&family=Merriweather&family=Orbitron&family=Roboto+Condensed&display=swap');

/* Variables */
:root {
    --primary-bg-color: #252b36; /* Background color for carousel-section same as movie-listings */
    --secondary-bg-color: #333;
    --accent-color: #e74c3c;
    --text-color: #e0e0e0; /* Default text color */
    --link-color: #f1c40f; /* Link color */
    --scrollbar-bg: #333;
    --scrollbar-thumb: #555;
    --hover-bg: #444;
    --placeholder-color: #aaa;
    --transition-duration: 0.3s;
}

/* General Movie Card Container */
.movie-card {
    display: flex;
    flex-direction: column;
    background-color: #1e1e1e;
    color: var(--text-color);
    border-radius: 10px;
    margin: 20px auto;
    overflow: hidden;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
    width: 90%;
    max-width: 1100px;
    transition: transform 0.3s ease, box-shadow 0.3s ease;
    position: relative;
    background-size: cover;
    background-position: center;
}

/* Movie Card Background Image */
.movie-card.poster-background {
    background-repeat: no-repeat;
    background-size: cover;
    background-position: center;
}

/* Overlay for Improved Text Visibility */
.movie-card::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(0, 0, 0, 0.4); /* Semi-transparent overlay */
    opacity: 0;
    transition: opacity 0.3s ease;
    z-index: 1;
}

.movie-card:hover::before {
    opacity: 1;
}

/* Movie Content Wrapper */
.movie-content-wrapper {
    display: grid;
    grid-template-columns: 250px 1fr; /* Poster and content */
    grid-template-areas: 
        "poster metadata"
        "overview overview"; /* Overview spans below */
    gap: 20px;
    background: rgba(30, 30, 30, 0.85);
    z-index: 2;
    border-radius: 10px;
    position: relative;
}

/* Image Container */
.image-container {
    grid-area: poster;
    position: relative;
    align-self: start;
    transition: transform 0.3s ease;
}

.image-container img {
    width: 100%;
    height: auto;
    border-radius: 10px;
}

.movie-card:hover .image-container img {
    transform: scale(1.05); /* Zoom-in effect on hover */
}

/* Info Section */
.info-section {
    grid-area: metadata;
    padding: 20px;
    display: flex;
    flex-direction: column;
    justify-content: flex-start;
    z-index: 2;
}

/* Main Title Styling */
.header-section {
    display: flex;
    justify-content: space-between;
    align-items: center;
}

.header-section h2 {
    margin: 0;
    font-size: 1.8em;
    color: var(--link-color); /* Bright Yellow for headline */
    text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.8);
    font-family: 'Cinzel', serif;
}

/* Metadata Section */
.metadata {
    display: flex;
    flex-direction: column;
    gap: 10px;
}

.metadata p {
    margin: 5px 0;
    color: var(--text-color); /* White text for metadata */
    text-shadow: 1px 1px 3px rgba(0, 0, 0, 0.8);
}

.metadata p strong,
.metadata p span {
    color: var(--text-color); /* Ensure white color for strong and span elements */
    font-size: 1.1em;
    font-weight: bold;
}

/* Inline Metadata */
.inline-meta {
    font-size: 1.1em;
    color: var(--text-color); /* Use white color for inline meta */
    padding-top: 10px;
    border-top: 1px solid #444;
    text-shadow: 1px 1px 3px rgba(0, 0, 0, 0.8);
}

.standort {
    color: var(--text-color); /* Use white text for location */
    margin-top: 10px;
    border-top: 1px solid #444;
    padding-top: 10px;
    text-shadow: 1px 1px 3px rgba(0, 0, 0, 0.8);
}

/* Overview Section */
.overview-section {
    grid-area: overview;
    padding: 15px;
    background-color: rgba(37, 43, 54, 0.8);
    border-radius: 8px;
    color: var(--text-color); /* Use white color */
    line-height: 1.4;
    z-index: 2;
    transition: font-weight 0.3s ease;
    position: relative;
}

/* Enhanced Text Visibility in Overview */
.overview-section p {
    margin: 0;
    color: var(--text-color); /* White text for overview */
    text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.9);
}

.overview-section a {
    color: var(--link-color); /* Bright yellow for links */
    text-decoration: none;
    font-weight: bold;
    text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.9);
}

.overview-section a:hover {
    text-decoration: underline;
}

/* Responsive Styles for Tablet and Mobile */
@media (max-width: 1024px) {
    .movie-card {
        width: 95%;
    }

    .movie-content-wrapper {
        grid-template-columns: 180px 1fr;
        grid-template-areas: 
            "poster metadata"
            "overview overview";
        gap: 15px;
    }

    .info-section {
        padding: 15px;
    }

    .inline-meta,
    .standort {
        font-size: 0.95em;
    }
}

@media (max-width: 768px) {
    .movie-card {
        width: 100%;
        margin: 10px auto;
    }

    .movie-content-wrapper {
        grid-template-columns: 1fr;
        grid-template-areas: 
            "metadata"
            "overview";
        gap: 10px;
        background: none;
    }

    .image-container {
        display: none;
    }

    .info-section,
    .overview-section {
        background: rgba(0, 0, 0, 0.6);
    }
}

@media (max-width: 480px) {
    .movie-card {
        width: 100%;
    }

    .movie-content-wrapper {
        grid-template-columns: 1fr;
        grid-template-areas: 
            "metadata"
            "overview";
        gap: 10px;
    }
}

/* Missing Poster Styling */
.missing-poster {
    border: 2px dashed red;
    opacity: 0.6;
}

/* Desktop Styles */
.desktop-layout {
    display: grid; /* Default structure for desktop */
}

.mobile-layout {
    display: none; /* Hide mobile structure by default */
}

/* Mobile Styles */
@media (max-width: 768px) {
    .desktop-layout {
        display: none; /* Hide desktop layout on mobile */
    }

    .mobile-layout {
        display: grid; /* Show mobile layout on small screens */
    }

    .mobile-layout .info-section,
    .mobile-layout .overview-section {
        padding: 10px;
        margin: 10px;
    }

    .mobile-layout .header-section h2 {
        font-size: 1.2em;
    }

    .mobile-layout .metadata {
        padding: 0;
    }

    .mobile-layout .overview-section {
        font-size: 0.9em;
    }
}

--- File: static\css\components\carousel.css ---
/* carousel.css */

/* Movie Carousel Section */
.movie-carousel-section {
    padding-top: 70px;
    padding-bottom: 20px;
    background-color: var(--primary-bg-color); /* Use defined primary background */
    text-align: center;
    position: relative;
}

.movie-carousel-section h2 {
    font-size: 2em;
    color: var(--text-light); /* Use defined light text color */
    z-index: 1;
    position: relative;
    font-family: var(--font-heading); /* Use defined heading font */
}

/* Swiper Container */
.swiper-container {
    width: 100%;
    padding-bottom: 10px; /* Space for pagination bullets */
}

.swiper-wrapper {
    display: flex;
    align-items: center;
}

/* Swiper Slides */
.swiper-slide {
    display: flex;
    justify-content: center;
    align-items: center;
    padding: 0 5px; /* Half of the desired gap (10px total) */
}

.featured-movie-card {
    position: relative;
    width: 200px; /* Adjust based on desired poster size */
    height: 300px; /* Adjust based on desired poster size */
    overflow: hidden;
    border-radius: 8px;
}

.featured-movie-card img {
    width: 100%;
    height: 100%;
    object-fit: cover; /* Maintains aspect ratio */
    transition: transform var(--transition-duration);
}

.featured-movie-card:hover img {
    transform: scale(1.05); /* Zoom-in effect on hover */
}

.featured-movie-overlay {
    position: absolute;
    bottom: 0;
    left: 0;
    width: 100%;
    background: rgba(0, 0, 0, 0.6); /* Semi-transparent overlay */
    color: var(--text-light);
    padding: 10px;
    box-sizing: border-box;
    opacity: 0;
    transition: opacity var(--transition-duration);
}

.featured-movie-card:hover .featured-movie-overlay {
    opacity: 1;
}

.featured-movie-overlay h3 {
    margin: 0;
    font-size: 1.2em;
}

.featured-movie-overlay .btn-secondary {
    display: inline-block;
    padding: 5px 10px;
    background-color: var(--accent-color); /* Use accent color */
    color: var(--text-light);
    border-radius: 4px;
    text-decoration: none;
    font-size: 0.9em;
    transition: background-color var(--transition-duration);
}

.featured-movie-overlay .btn-secondary:hover {
    background-color: var(--link-hover-color); /* Use hover color */
}

/* Swiper Pagination Adjustment */
.swiper-pagination {
    position: absolute;
    bottom: 10px;
    left: 0;
    width: 100%;
    text-align: center;
    z-index: 10;
}

--- File: static\css\components\filter.css ---
/* Ensure consistent box sizing across all elements */
*, *::before, *::after {
    box-sizing: border-box;
}

/* Catalog Search Section */
.catalog-search {
    background-color: var(--background-dark);
    text-align: center;
}

.search-dropdown-container {
    display: flex;
    flex-wrap: wrap;
    justify-content: center;
    align-items: center;
    width: 100%;
    max-width: 1200px;
    margin: 0 auto;
}

#filter-form {
    display: flex;
    flex-wrap: wrap;
    gap: 15px; /* Increased gap for better spacing */
    width: 100%;
    justify-content: center;
    align-items: center;
}

/* Search Box */
.search-container {
    position: relative;
    flex: 1 1 50%;
    height: 70px; /* Increased height */
    margin-bottom: 10px;
    border: 2px solid var(--border-color);
    border-radius: 10px; /* Softer corners */
    background-color: #fff;
    transition: border 0.3s ease, background-color 0.3s ease;
}

.search-container:hover {
    background-color: var(--primary-color);
    border-color: var(--link-hover-color);
}

.search-container .search-icon {
    position: absolute;
    left: 15px;
    top: 50%;
    transform: translateY(-50%);
    color: var(--link-hover-color);
    pointer-events: none;
    font-size: 1.8em; /* Increased icon size */
}

#search-box {
    width: 100%;
    height: 100%;
    padding: 0 50px 0 50px; /* Increased padding */
    font-size: 1.2em; /* Larger text */
    background: transparent;
    color: var(--text-dark);
    border: none;
    border-radius: 10px;
    box-sizing: border-box;
}

#search-box:focus {
    outline: none;
}

#search-box::placeholder {
    color: var(--placeholder-color);
}

/* Clear Icon for Search Box */
#clear-search {
    position: absolute;
    right: 15px;
    top: 50%;
    transform: translateY(-50%);
    width: 32px; /* Larger size */
    height: 32px;
    font-size: 1.8em;
    line-height: 32px;
    border-radius: 50%;
    background: rgba(68, 68, 68, 0.6);
    color: rgba(255, 255, 255, 0.6);
    cursor: pointer;
    visibility: hidden;
    z-index: 2;
    display: flex;
    align-items: center;
    justify-content: center;
}

.search-container:hover #clear-search,
.search-container .clear-icon.visible {
    visibility: visible;
}

/* Custom Dropdowns */
.custom-dropdown {
    display: flex;
    flex-direction: column;
    position: relative;
    flex: 1 1 50%;
    height: 70px; /* Increased height */
    border-radius: 10px;
    background-color: #fff; /* White by default */
    border: 2px solid var(--border-color);
    transition: border 0.3s ease, background-color 0.3s ease;
}

.custom-dropdown:hover {
    border-color: var(--link-hover-color);
    background-color: var(--background-dark);
}

.dropdown-header {
    display: flex;
    font-size: 1.5em; /* Increased icon size */
    justify-content: space-between;
    align-items: center;
    background: transparent;
    color: var(--text-dark);
    padding: 0 25px; /* Adjusted padding */
    border-radius: 10px;
    cursor: pointer;
    height: 100%;
    transition: background var(--transition-duration), color var(--transition-duration);
    width: 100%;
    box-sizing: border-box;
    padding-right: 60px; /* More space for clear icon */
    border: none;
}

.dropdown-header:hover {
    color: var(--link-hover-color);
}

.header-controls {
    display: flex;
    align-items: center;
    gap: 8px;
}

/* Selection Badge */
.selection-badge {
    background-color: var(--accent-color);
    color: #fff;
    border-radius: 12px;
    padding: 2px 8px;
    font-size: 0.8em;
    margin-left: 8px;
    transition: opacity 0.3s ease;
    display: none;
}

.selection-badge.visible {
    display: inline-block;
}

/* Clear Icon */
.clear-icon {
    width: 32px; /* Larger size */
    height: 32px;
    font-size: 1.8em; /* Larger size */
    color: var(--text-light);
    background: rgba(68, 68, 68, 0.6);
    border-radius: 50%;
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: background var(--transition-duration), color var(--transition-duration);
    margin-left: 8px;
    visibility: hidden;
}

.dropdown-header.has-selection .clear-icon {
    visibility: visible;
}

/* Dropdown List */
.dropdown-list {
    display: none;
    background: #fff; /* White dropdown list */
    color: var(--text-dark); /* Dark text */
    position: absolute;
    top: 100%;
    left: 0;
    width: 100%;
    border-radius: 10px; /* Softer corners */
    box-shadow: 0 4px 12px var(--shadow-color);
    z-index: 1000;
    max-height: 250px;
    overflow-y: auto;
    border: 2px solid var(--border-color); /* Stronger border */
}

.dropdown-list.show {
    display: block;
}

.dropdown-list label {
    display: flex;
    align-items: center;
    padding: 15px 25px; /* Increased padding */
    font-size: 1.1em;
    color: var(--text-dark); /* Dark text */
    font-weight: 500;
    cursor: pointer;
    transition: background var(--transition-duration), color var(--transition-duration);
}

.dropdown-list input[type="checkbox"] {
    margin-right: 12px;
    transform: scale(1.3); /* Larger checkboxes */
}

.dropdown-list label:hover {
    background: var(--hover-bg);
    color: var(--link-hover-color);
}

/* Scrollbar Customization */
.dropdown-list::-webkit-scrollbar {
    width: 12px; /* Slightly wider scrollbar */
}

.dropdown-list::-webkit-scrollbar-track {
    background: var(--scrollbar-bg);
}

.dropdown-list::-webkit-scrollbar-thumb {
    background-color: var(--scrollbar-thumb);
    border-radius: 6px; /* Adjusted border radius */
}

/* Dropdown Arrow Icon */
.dropdown-header::after {
    content: '\f078';
    font-family: 'Font Awesome 5 Free';
    font-weight: 900;
    font-size: 1.8em; /* Increased icon size */
    color: var(--link-hover-color);
    transition: transform var(--transition-duration);
    position: absolute;
    right: 20px; /* Adjusted position */
}

.dropdown-header[aria-expanded="true"]::after {
    transform: rotate(180deg);
}

/* Responsive Adjustments */
@media (max-width: 768px) {
    .search-container,
    .custom-dropdown {
        flex: 1 1 100%;
        margin-bottom: 15px;
    }
}

@media (max-width: 480px) {
    .dropdown-header::after {
        right: 12px;
    }
}

--- File: static\css\components\forms.css ---
/* forms.css */

/* General Form Styles */
input[type="text"],
input[type="email"],
select,
textarea {
    width: 100%;
    padding: 12px 15px;
    border: 1px solid #bdc3c7;
    border-radius: 6px;
    background-color: #fff;
    font-size: 1rem;
    color: var(--text-color);
    transition: border-color 0.3s ease, box-shadow 0.3s ease;
}

input[type="text"]:focus,
input[type="email"]:focus,
select:focus,
textarea:focus {
    outline: none;
    border-color: var(--accent-color);
    box-shadow: 0 0 5px rgba(231, 76, 60, 0.5);
}

label {
    display: block;
    margin-bottom: 8px;
    color: var(--primary-color);
    font-weight: 600;
}

label span.required {
    color: #e74c3c; /* Red color for required fields */
}

.contact-form .form-group {
    margin-bottom: 20px;
}

--- File: static\css\components\pagination.css ---
/* pagination.css */

/* General Pagination Container */
.pagination {
    display: flex;
    justify-content: center;
    align-items: center;
    background-color: var(--primary-color);
    padding: 15px 0; /* Added padding for spacing */
    color: var(--text-light);
}

/* Pagination Navigation List */
.pagination nav ul {
    display: flex;
    justify-content: center;
    align-items: center;
    list-style: none;
    padding: 0;
    margin: 0;
}

/* Pagination Item Styling */
.pagination nav ul li {
    margin: 0 5px; /* Reduced spacing between items */
}

/* Pagination Links and Buttons */
.pagination nav ul li a,
.pagination nav ul li span {
    display: inline-block;
    padding: 8px 12px;
    background-color: var(--primary-color);
    color: var(--text-light);
    border-radius: 4px;
    text-decoration: none;
    transition: background-color var(--transition-duration), transform var(--transition-duration);
    min-width: 32px; /* Consistent button sizing */
    text-align: center;
    font-size: 1rem;
}

/* Hover and Active State */
.pagination nav ul li a:hover,
.pagination nav ul li span:hover {
    background-color: var(--accent-color);
    color: var(--background-dark);
    transform: translateY(-2px); /* Subtle lift effect */
}

/* Active State for Current Page */
.pagination nav ul li.active span {
    background-color: var(--accent-color);
    color: var(--background-dark);
    font-weight: bold;
    cursor: default;
}

/* Disabled State for Non-clickable Items */
.pagination nav ul li.disabled span,
.pagination ul li.disabled a {
    background-color: var(--secondary-color); /* Muted color for disabled state */
    color: var(--secondary-text-color);
    cursor: not-allowed;
    border: 1px solid var(--border-color);
    pointer-events: none; /* Prevent interaction */
}

/* Optional: Ellipsis Styling */
.pagination nav ul li.ellipsis span {
    background: none;
    color: var(--secondary-text-color);
    cursor: default;
}

/* Highlighting for Previous and Next */
.pagination nav ul li a.prev,
.pagination nav ul li a.next {
    font-weight: bold;
    background-color: var(--accent-color);
}

.pagination nav ul li a.prev:hover,
.pagination nav ul li a.next:hover {
    background-color: var(--button-hover-bg);
    color: var(--text-light);
}

/* Responsive Adjustments */
@media (max-width: 768px) {
    .pagination nav ul li {
        margin: 0 3px; /* Reduced spacing on mobile */
    }

    .pagination nav ul li a,
    .pagination nav ul li span {
        padding: 6px 10px;
        font-size: 0.9rem;
    }
}

--- File: static\css\components\progress_indicator.css ---
/* progress-indicator.css */

/* Progress Indicator Styles */
.progress-indicator {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0.6); /* Semi-transparent overlay */
    display: none; /* Hidden by default */
    justify-content: center;
    align-items: center;
    flex-direction: column;
    z-index: 10000; /* Ensure it's on top of other elements */
}

/* Spinner Animation */
.progress-indicator .spinner {
    border: 8px solid #f3f3f3; /* Light grey */
    border-top: 8px solid var(--accent-color); /* Accent color */
    border-radius: 50%;
    width: 60px;
    height: 60px;
    animation: spin 1.5s linear infinite;
}

/* Spinner Animation Keyframes */
@keyframes spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
}

/* Progress Indicator Text */
.progress-indicator p {
    margin-top: 15px;
    color: var(--text-light); /* Use defined text color */
    font-size: 1.2em;
    text-align: center;
}

--- File: static\css\layout\footer.css ---
/* footer.css */

/* Footer Styles */
footer {
    background-color: var(--primary-color);
    color: #fff;
    padding: 40px 20px;
    width: 100%; /* Ensure the footer takes up the full width */
    overflow: hidden;
}

.footer-content {
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 20px;
}

.footer-content p {
    margin: 0;
    font-size: 1rem;
    color: #fff;
}

/* Responsive Styles */
@media (max-width: 768px) {
    footer {
        padding: 30px 15px;
    }

    .footer-content p {
        font-size: 0.9rem;
    }
}

@media (max-width: 480px) {
    footer {
        padding: 20px 10px;
    }

    .footer-content p {
        font-size: 0.8rem;
    }
}

--- File: static\css\layout\hero.css ---
/* hero.css */

/* Hero Section */
.hero {
    position: relative;
    width: 100%;
    height: calc(100vh - 60px); /* Full height minus the navbar */
    display: flex;
    justify-content: center;
    align-items: center;
    overflow: hidden;
    color: #fff;
}

.hero-image img {
    width: 100%;
    height: calc(100vh - 60px); /* Full height minus the navbar */
    object-fit: cover; /* Cover the entire hero area */
    object-position: center top;
    filter: brightness(50%); /* Darken the image for text readability */
    position: absolute;
    top: 0;
    left: 0;
}

.hero-overlay {
    position: relative;
    z-index: 2;
    text-align: center;
    background-color: rgba(61, 61, 59, 0); /* Semi-transparent overlay */
    color: #ffd700; /* Gold text color for contrast */
    border-radius: 8px;
    display: inline-block;
    margin-bottom: 20px; /* Space between overlay and button */
    transition: background-color 0.3s ease, transform 0.3s ease;
}

/* Fade-in and Fade-out Animations */
.fade-in {
    animation: fadeIn var(--transition-duration) ease-in-out;
}

.fade-out {
    animation: fadeOut var(--transition-duration) ease-in-out;
}

@keyframes fadeIn {
    from { opacity: 0; }
    to { opacity: 1; }
}

@keyframes fadeOut {
    from { opacity: 1; }
    to { opacity: 0; }
}

/* Tagline Container at the Bottom of the Hero */
#tagline-container {
    position: absolute;
    bottom: 0;  /* Stick to the bottom of the hero */
    left: 0;
    width: 100%;
    background: rgba(0, 0, 0, 0.6);  /* Semi-transparent dark background */
    padding: 15px 0; /* Vertical padding */
    z-index: 1; /* Place the tagline container below the hero-overlay */
}

/* Text Styling for the Tagline */
#dynamic-tagline {
    font-family: 'Cinzel', serif; /* Cinematic font */
    font-size: 1.6em;  /* Adjust the font size */
    color: #fff;  /* White text color */
    text-align: center;
    text-transform: uppercase;
    text-shadow: 2px 2px 5px rgba(0, 0, 0, 0.7); /* Text shadow for better readability */
    padding: 0 20px; /* Horizontal padding */
    margin: 0;
}

/* Button Styling within Hero */
.hero-overlay .btn-primary {
    margin-top: 20px;
}

/* Responsive adjustments for smaller screens */
@media (max-width: 768px) {
    #dynamic-tagline {
        font-size: 1.6em;
    }

    .hero-overlay {
        padding: 10px 20px;
        font-size: 1em;
    }

    .btn-primary {
        font-size: 1em;
        padding: 10px 20px;
    }
}

@media (max-width: 480px) {
    #dynamic-tagline {
        font-size: 1.2em;
        padding: 0 10px;
    }

    .btn-primary {
        font-size: 0.9em;
        padding: 8px 16px;
    }
}

--- File: static\css\layout\navbar.css ---
/* navbar.css */

/* General Navbar Styles */
.navbar {
    display: flex;
    justify-content: space-between;
    align-items: center;
    background-color: var(--primary-color);  /* Use defined primary color */
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    width: 100%;
    height: 60px;  /* Default height */
    padding: 0 20px;
    z-index: 1000;
    transition: height var(--transition-duration), top var(--transition-duration), box-shadow var(--transition-duration);
    box-shadow: 0 4px 8px var(--shadow-color);  /* Use defined shadow color */
    font-family: var(--font-body);  /* Use body font */
}

/* Shrunk State */
.navbar.shrunk {
    height: 40px;  /* Smaller height when shrunk */
}

/* Hidden State */
.navbar.hidden {
    top: -60px;  /* Move navbar off-screen to hide */
}

/* Navbar Toggle Button for Mobile */
.menu-toggle {
    display: none;  /* Hide by default */
    cursor: pointer;
    transition: transform var(--transition-duration);  /* Smooth rotation animation */
}

.menu-toggle i {
    color: var(--text-light);
    font-size: 1.5em;
}

/* Main Logo Styling */
.logo {
    display: flex;
    align-items: center;
}

.logo span {
    font-size: 2.5rem;  /* Adjust main logo size for better readability */
    color: var(--text-light);  /* Use defined light text color */
    font-family: var(--font-heading);  /* Use heading font */
    text-transform: lowercase;
    margin-right: 5px;
    transition: font-size var(--transition-duration);  /* Smooth logo size transition */
}

.sub-logo span {
    font-size: 1.5rem;  /* Adjust sub-logo size */
    color: var(--accent-color);  /* Use defined accent color */
    text-transform: lowercase;
}

/* Navigation Links */
.nav-links {
    display: flex;
    gap: 20px;
    list-style: none;
    padding: 0;
    margin: 0;
}

.nav-links li {
    margin-left: 20px;
}

/* Navigation Link Styling */
.nav-links li a {
    text-decoration: none;
    color: var(--text-light);  /* Use defined light text color */
    font-size: 1rem;
    transition: color var(--transition-duration), transform var(--transition-duration);
    font-family: var(--font-body);  /* Use body font */
}

.nav-links li a:hover {
    color: var(--link-color);  /* Use defined link hover color */
    transform: translateY(-2px);
}

/* Active Link */
.nav-links li a.active {
    color: var(--link-color);  /* Use defined link color */
    font-weight: bold;
}

/* Responsive Styles */
@media (max-width: 768px) {
    /* Show the toggle button on smaller screens */
    .menu-toggle {
        display: block;
    }

    .nav-links {
        display: none;  /* Hide links by default */
        flex-direction: column;
        align-items: center;
        position: absolute;
        top: 50px;  /* Position below the navbar */
        right: 0;
        width: 100%;
        background-color: var(--primary-color);  /* Use defined primary color */
        z-index: 999;
        box-shadow: 0 4px 8px var(--shadow-color);  /* Use defined shadow color */
        padding: 10px 0;
    }

    .nav-links li {
        margin: 10px 0;
    }

    /* Toggle the display of the navigation menu */
    .nav-links.show {
        display: flex;
    }

    /* Reduce the size of the main and sub-logos */
    .logo span {
        font-size: 2rem;  /* Smaller size for mobile */
    }

    .sub-logo span {
        font-size: 1.4rem;
    }
}

/* Shrinking & Hiding Behavior for Mobile */
@media (max-width: 768px) {
    .navbar {
        height: 50px;  /* Default height for smaller screens */
    }

    .navbar.shrunk {
        height: 35px;  /* Smaller height when shrunk */
    }

    .navbar.hidden {
        top: -50px;  /* Move navbar off-screen */
    }
}

/* Responsive Styles for Very Small Screens */
@media (max-width: 480px) {
    .logo span {
        font-size: 1.6rem;  /* Smaller size for very small screens */
    }

    .sub-logo span {
        font-size: 1.2rem;  /* Adjust sub-logo size */
    }

    .nav-links li a {
        font-size: 1.2rem;  /* Larger link font size for better readability */
    }
}

/* Animation for Navbar Visibility */
.navbar {
    will-change: transform;  /* Optimize for smooth animations */
}

.navbar.show {
    transform: translateY(0);  /* Slide-in animation */
}

.navbar.hide {
    transform: translateY(-100%);  /* Slide-out animation */
}

/* Animation for Menu Toggle Button */
.menu-toggle.active {
    transform: rotate(90deg);  /* Rotate when active */
}

/* Mobile Footer Link Styling */
.mobile-footer-link {
    display: none;  /* Hidden by default */
}

@media (max-width: 768px) {
    .mobile-footer-link {
        display: block;
        background-color: var(--primary-color);  /* Use defined primary color */
        text-align: center;
        padding: 10px 0;
    }

    .mobile-footer-link a {
        color: var(--text-light);  /* Use defined light text color */
        font-size: 1rem;
        text-decoration: none;
    }
}

--- File: static\css\pages\about.css ---
/* about.css */

/* About Us Page Sections */
.about-history,
.about-mission,
.about-team,
.about-testimonials {
    padding: 60px 20px;
    background-color: #f9f9f9;
    text-align: center;
}

.about-history h2,
.about-mission h2,
.about-team h2,
.about-testimonials h2 {
    text-align: center;
    font-family: 'Cinzel', serif;
    margin-bottom: 30px;
    color: var(--primary-color);
}

.about-history p,
.about-mission p {
    max-width: 800px;
    margin: 0 auto 40px auto;
    line-height: 1.8;
    color: var(--secondary-text-color);
    font-size: 1.1rem;
}

.about-team {
    display: flex;
    flex-wrap: wrap;
    gap: 30px;
    justify-content: center;
}

.team-member {
    width: 220px;
    text-align: center;
    transition: transform 0.3s ease, box-shadow 0.3s ease;
}

.team-member:hover {
    transform: translateY(-5px);
    box-shadow: 0 6px 12px rgba(0, 0, 0, 0.2);
}

.team-member img {
    width: 100%;
    height: 220px;
    object-fit: cover;
    border-radius: 50%;
    margin-bottom: 15px;
    border: 3px solid var(--accent-color);
}

.team-member h3 {
    font-family: 'Cinzel', serif;
    margin-bottom: 5px;
    color: var(--primary-color);
    font-size: 1.4rem;
}

.team-member p {
    color: var(--secondary-text-color);
    font-size: 1rem;
}

.about-testimonials blockquote {
    max-width: 800px;
    margin: 40px auto;
    padding: 25px 20px;
    background-color: #fdfdfd;
    border-left: 5px solid var(--accent-color);
    position: relative;
    border-radius: 5px;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
}

.about-testimonials blockquote::before {
    content: "\201C"; /* Left double quotation mark */
    font-size: 3rem;
    position: absolute;
    left: 10px;
    top: -10px;
    color: var(--accent-color);
}

.about-testimonials p {
    margin-bottom: 10px;
    color: var(--secondary-text-color);
    font-size: 1.1rem;
}

.about-testimonials cite {
    display: block;
    text-align: right;
    color: #777;
    font-size: 1rem;
    margin-top: 10px;
}

/* Responsive Styles */
@media (max-width: 768px) {
    .about-history,
    .about-mission,
    .about-team,
    .about-testimonials {
        padding: 40px 15px;
    }

    .team-member {
        width: 180px;
    }

    .team-member img {
        height: 180px;
    }

    .about-testimonials blockquote {
        padding: 20px 15px;
    }
}

@media (max-width: 480px) {
    .about-history,
    .about-mission,
    .about-team,
    .about-testimonials {
        padding: 30px 10px;
    }

    .team-member {
        width: 150px;
    }

    .team-member img {
        height: 150px;
    }

    .about-testimonials blockquote {
        padding: 15px 10px;
    }

    .about-testimonials blockquote::before {
        font-size: 2rem;
        left: 5px;
        top: -5px;
    }

    .about-testimonials p {
        font-size: 1rem;
    }
}

--- File: static\css\pages\catalog.css ---
/* File: static/css/pages/catalog.css */
/* catalog.css */

/* Catalog Search Section */
.catalog-search {
    padding: 80px 20px;
    background-color: #1e1e1e; /* Dark background for contrast */
    text-align: center;
}

.catalog-search form {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
    gap: 20px;
    justify-content: center;
    align-items: center;
    margin-bottom: 30px;
}

/* No longer needed as search-container and custom-dropdown are handled in their respective CSS */

/* Movie Listings Section */
.movie-listings {
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 30px;
    padding: 60px 20px;
    background-color: #252b36; /* Dark background for the movie listing */
}

.movie-listings .no-movies-message {
    color: #fff;
    font-size: 1.2rem;
    margin-top: 20px;
}

/* Swiper Container */
.swiper-container {
    width: 100%;
    padding-bottom: 20px; /* Space for pagination bullets */
}

.swiper-wrapper {
    display: flex;
    align-items: center;
}

.swiper-slide {
    display: flex;
    justify-content: center;
    align-items: center;
    padding: 0 2px; /* Reduced padding for closer slides */
}

/* Responsive Styles for Notebook Resolution */
@media (max-width: 1440px) {
    .movie-listings {
        gap: 25px; /* Adjust gap slightly for larger screens */
    }
}

/* Single Column Layout for Tablet */
@media (max-width: 1024px) {
    .movie-listings {
        gap: 20px; /* Smaller gap for tablet display */
        padding: 40px 40px;
    }
}

/* Full Column Layout for Mobile */
@media (max-width: 768px) {
    .catalog-search {
        padding: 30px 20px;

    }

    .movie-listings {
        gap: 15px; /* Reduced gap for mobile */
        padding: 40px 20px;
    }

    .movie-card {
        width: 90%; /* Make the movie cards narrower on mobile */
    }
}

--- File: static\css\pages\contact.css ---
/* contact.css */

/* Contact Information Section */
.contact-info {
    padding: 60px 20px;
    background-color: #fff;
    text-align: center;
}

.contact-info h2 {
    font-family: 'Cinzel', serif;
    margin-bottom: 30px;
    color: var(--primary-color);
    font-size: 2rem;
}

.contact-details {
    display: flex;
    flex-direction: column;
    gap: 20px;
    align-items: center;
    margin-bottom: 40px;
}

.contact-item {
    display: flex;
    align-items: center;
    gap: 15px;
    color: var(--secondary-text-color);
    font-size: 1.1rem;
}

.contact-item i {
    color: var(--accent-color);
    font-size: 1.8em;
}

.contact-map {
    max-width: 800px;
    margin: 0 auto;
    border: 2px solid #ddd;
    border-radius: 8px;
    overflow: hidden;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
}

/* Contact Form Section */
.contact-form-section {
    padding: 60px 20px;
    background-color: var(--background-color);
    text-align: center;
}

.contact-form-section h2 {
    font-family: 'Cinzel', serif;
    margin-bottom: 30px;
    color: var(--primary-color);
    font-size: 2rem;
}

.contact-form {
    max-width: 600px;
    margin: 0 auto;
    text-align: left;
}

.contact-form .form-group {
    margin-bottom: 25px;
}

.contact-form label {
    display: block;
    margin-bottom: 8px;
    color: var(--primary-color);
    font-weight: 600;
}

.contact-form label span.required {
    color: #e74c3c; /* Red color for required fields */
}

.contact-form input,
.contact-form textarea {
    width: 100%;
    padding: 12px 15px;
    border: 1px solid #bdc3c7;
    border-radius: 6px;
    background-color: #fff;
    font-size: 1rem;
    color: var(--text-color);
    transition: border-color 0.3s ease, box-shadow 0.3s ease;
}

.contact-form input:focus,
.contact-form textarea:focus {
    outline: none;
    border-color: var(--accent-color);
    box-shadow: 0 0 5px rgba(231, 76, 60, 0.5);
}

.contact-form button {
    width: 100%;
    padding: 12px 20px;
    background-color: var(--primary-color);
    color: #fff;
    border: none;
    cursor: pointer;
    font-weight: 600;
    border-radius: 8px;
    transition: background-color 0.3s ease, transform 0.3s ease;
    font-size: 1.1rem;
}

.contact-form button:hover {
    background-color: #555;
    transform: translateY(-2px);
}

--- File: static\css\pages\events.css ---
/* events.css */

/* Events Calendar Section */
.events-calendar {
    padding: 60px 20px;
    background-color: #fff;
}

.events-calendar h2 {
    text-align: center;
    font-family: 'Cinzel', serif;
    margin-bottom: 40px;
    color: var(--primary-color);
    font-size: 2rem;
}

.event {
    border: 1px solid #ddd;
    padding: 25px 20px;
    margin-bottom: 25px;
    border-radius: 8px;
    background-color: #fdfdfd;
    transition: transform 0.3s ease, box-shadow 0.3s ease;
}

.event:hover {
    transform: translateY(-5px);
    box-shadow: 0 6px 12px rgba(0, 0, 0, 0.2);
}

.event h3 {
    margin-bottom: 15px;
    color: var(--primary-color);
    font-family: 'Cinzel', serif;
    font-size: 1.6rem;
}

.event p {
    margin-bottom: 10px;
    color: var(--secondary-text-color);
    font-size: 1.1rem;
}

.event .btn {
    margin-top: 15px;
    background-color: var(--primary-color);
    color: #fff;
    padding: 10px 20px;
    border: none;
    cursor: pointer;
    font-weight: 600;
    border-radius: 6px;
    transition: background-color 0.3s ease, transform 0.3s ease;
    font-size: 1rem;
}

.event .btn:hover {
    background-color: #555;
    transform: translateY(-2px);
}

/* Calendar View Section */
.calendar-view {
    padding: 60px 20px;
    background-color: var(--background-color);
    text-align: center;
}

.calendar-view h2 {
    font-family: 'Cinzel', serif;
    margin-bottom: 30px;
    color: var(--primary-color);
    font-size: 2rem;
}

#calendar {
    background-color: #fff;
    border: 1px solid #ddd;
    padding: 40px;
    border-radius: 8px;
    color: var(--secondary-text-color);
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
}

/* Responsive Styles */
@media (max-width: 768px) {
    .events-calendar {
        padding: 40px 15px;
    }

    .event {
        padding: 20px 15px;
    }

    .calendar-view {
        padding: 40px 15px;
    }

    #calendar {
        padding: 30px;
    }
}

@media (max-width: 480px) {
    .events-calendar {
        padding: 30px 10px;
    }

    .event {
        padding: 15px 10px;
    }

    .calendar-view {
        padding: 30px 10px;
    }

    #calendar {
        padding: 20px;
    }
}

--- File: static\js\filter.js ---
// static/js/filter.js


document.addEventListener('DOMContentLoaded', function () {
    console.log("Filter.js: DOM fully loaded");
    initializeFilterDropdowns();  // Initialize dropdowns on page load
    initializeSwiper(); // Initialize Swiper Carousel
});

/** Cache Elements and Buttons */
const clearSearchBtn = document.getElementById('clear-search');
const searchBox = document.getElementById('search-box');
const movieContainer = document.querySelector('.movie-listings');
const topPaginationContainer = document.querySelector('.top-pagination nav ul');
const bottomPaginationContainer = document.querySelector('.bottom-pagination nav ul');
const progressIndicator = document.getElementById('progress-indicator');
const carouselTitle = document.getElementById('carousel-title');

let debounceTimer;

/** Genre to Font Mapping */
const genreFontMapping = {
    "Action": "'Anton', sans-serif",
    "Drama": "'Playfair Display', serif",
    "Family": "'Baloo 2', cursive",
    "Comedy": "'Comic Sans MS', cursive, sans-serif",
    "Thriller": "'Roboto Slab', serif",
    "Horror": "'Creepster', cursive",
    "Sci-Fi": "'Orbitron', sans-serif",
    "Romance": "'Great Vibes', cursive",
    "Documentary": "'Merriweather', serif",
    "Fantasy": "'Goudy Bookletter 1911', serif"
};

/**
 * Function to initialize dropdowns and attach event listeners
 */
function initializeFilterDropdowns() {
    // Handle filter updates triggered by custom dropdowns
    document.addEventListener('dropdownChange', () => {
        console.log("Filter.js: Detected dropdown change event");
        updateFilters(); // Trigger filter update on dropdown change
    });

    // Search box input event with debouncing
    if (searchBox) { // Check if searchBox exists
        searchBox.addEventListener('input', () => {
            // Toggle visibility of the clear icon
            if (searchBox.value.length > 0) {
                clearSearchBtn.classList.add('visible');
            } else {
                clearSearchBtn.classList.remove('visible');
            }

            clearTimeout(debounceTimer);
            debounceTimer = setTimeout(() => {
                updateFilters(); // Trigger filter update after user stops typing for 300ms
            }, 300);
        });
    } else {
        console.error("initializeFilterDropdowns: searchBox element not found.");
    }

    // Clear search box and trigger update
    if (clearSearchBtn && searchBox) { // Ensure both elements exist
        clearSearchBtn.addEventListener('click', () => {
            searchBox.value = '';
            clearSearchBtn.classList.remove('visible');
            updateFilters();
        });
    } else {
        console.error("initializeFilterDropdowns: clearSearchBtn or searchBox element not found.");
    }

    // Attach event listeners to dropdowns using event delegation
    attachDropdownEventDelegation();

    // Initial filter update
    updateFilters();
}

/**
 * Function to attach event listeners to dropdowns using event delegation
 */
function attachDropdownEventDelegation() {
    const dropdownLists = document.querySelectorAll('.dropdown-list');

    dropdownLists.forEach(dropdownList => {
        // Handle checkbox changes within the dropdown
        dropdownList.addEventListener('change', (event) => {
            const target = event.target;
            if (target && target.matches('input[type="checkbox"]')) {
                const dropdownHeader = dropdownList.previousElementSibling; // Assuming .dropdown-header precedes .dropdown-list
                const clearButton = dropdownHeader.querySelector('.clear-icon');
                const selectedCount = dropdownHeader.querySelector('.selected-count');
                const selectionBadge = dropdownHeader.parentElement.querySelector('.selection-badge');

                // If the Year dropdown, handle Decade-Year relationship
                if (dropdownList.id === 'year-dropdown-list') {
                    handleYearDecadeRelationship(target, dropdownList);
                }

                updateSelectedCount(dropdownList, selectedCount, clearButton, selectionBadge);
                triggerDropdownChangeEvent();

                // Update carousel title based on selected genre
                if (dropdownList.id === 'genre-dropdown-list') {
                    updateCarouselTitle();
                }
            }
        });

        // Handle clear button within the dropdown
        const clearButton = dropdownList.parentElement.querySelector('.clear-icon');
        if (clearButton) {
            clearButton.addEventListener('click', (event) => {
                event.stopPropagation(); // Prevent dropdown toggle
                const checkboxes = dropdownList.querySelectorAll('input[type="checkbox"]');
                checkboxes.forEach(checkbox => (checkbox.checked = false)); // Uncheck all boxes
                const selectedCount = dropdownList.parentElement.querySelector('.selected-count');
                const selectionBadge = dropdownList.parentElement.querySelector('.selection-badge');
                updateSelectedCount(dropdownList, selectedCount, clearButton, selectionBadge); // Update selection count
                triggerDropdownChangeEvent();  // Trigger a custom change event to update filters

                // Update carousel title based on selected genre
                if (dropdownList.id === 'genre-dropdown-list') {
                    updateCarouselTitle();
                }
            });
        }
    });

    // Handle dropdown header clicks to toggle visibility
    const dropdownHeaders = document.querySelectorAll('.dropdown-header');
    dropdownHeaders.forEach(header => {
        header.addEventListener('click', (event) => {
            event.stopPropagation(); // Prevent event from bubbling up
            const dropdownList = header.nextElementSibling; // Assumes .dropdown-list follows .dropdown-header
            toggleDropdown(dropdownList, header);
        });

        // Allow keyboard accessibility
        header.addEventListener('keydown', (event) => {
            if (event.key === 'Enter' || event.key === ' ') {
                event.preventDefault();
                const dropdownList = header.nextElementSibling;
                toggleDropdown(dropdownList, header);
            }
        });
    });

    // Close all dropdowns when clicking outside
    document.addEventListener('click', (event) => {
        dropdownLists.forEach(dropdownList => {
            const header = dropdownList.previousElementSibling;
            if (!dropdownList.contains(event.target) && !header.contains(event.target)) {
                dropdownList.classList.remove('show');
                header.setAttribute('aria-expanded', 'false');
            }
        });
    });
}

/**
 * Function to toggle dropdown visibility
 */
function toggleDropdown(dropdownList, header) {
    const isVisible = dropdownList.classList.contains('show');
    if (isVisible) {
        dropdownList.classList.remove('show');
        header.setAttribute('aria-expanded', 'false');
    } else {
        dropdownList.classList.add('show');
        header.setAttribute('aria-expanded', 'true');
    }
}

/**
 * Function to handle the relationship between Decades and Years in the Year dropdown
 */
function handleYearDecadeRelationship(target, dropdownList) {
    const isDecade = target.value.includes('...'); // Assuming Decades contain '...'
    if (!isDecade && target.checked) {
        // If a specific year is selected, uncheck any selected decades
        const decadeCheckboxes = dropdownList.querySelectorAll('input[type="checkbox"][value*="..."]');
        decadeCheckboxes.forEach(checkbox => {
            if (checkbox.checked) {
                checkbox.checked = false;
                const parentLabel = checkbox.parentElement;
                const header = parentLabel.closest('.custom-dropdown').querySelector('.dropdown-header');
                const selectedCount = header.querySelector('.selected-count');
                const selectionBadge = header.parentElement.querySelector('.selection-badge');
                updateSelectedCount(dropdownList, selectedCount, header.querySelector('.clear-icon'), selectionBadge);
            }
        });
    } else if (isDecade && target.checked) {
        // If a decade is selected, uncheck any specific years within that decade
        const decadePrefix = target.value.split('...')[0]; // e.g., '1980...'
        const yearCheckboxes = dropdownList.querySelectorAll('input[type="checkbox"]:not([value*="..."])');
        yearCheckboxes.forEach(checkbox => {
            if (checkbox.value.startsWith(decadePrefix) && checkbox.checked) {
                checkbox.checked = false;
                const parentLabel = checkbox.parentElement;
                const header = parentLabel.closest('.custom-dropdown').querySelector('.dropdown-header');
                const selectedCount = header.querySelector('.selected-count');
                const selectionBadge = header.parentElement.querySelector('.selection-badge');
                updateSelectedCount(dropdownList, selectedCount, header.querySelector('.clear-icon'), selectionBadge);
            }
        });
    }
}

/**
 * Function to update the selected count display, clear button visibility, and selection badge
 */
function updateSelectedCount(dropdownList, countElement, clearButton, selectionBadge) {
    const selectedItems = Array.from(dropdownList.querySelectorAll('input[type="checkbox"]:checked'));
    const count = selectedItems.length;

    // Show or hide the clear button based on the count
    clearButton.style.visibility = count > 0 ? 'visible' : 'hidden';

    // Update the Selection Badge
    if (selectionBadge) {
        updateSelectionBadge(dropdownList, selectionBadge);
    }

    // Add or remove the .has-selection class based on the count
    const dropdownHeader = dropdownList.previousElementSibling;
    if (dropdownHeader) {
        if (count > 0) {
            dropdownHeader.classList.add('has-selection');
        } else {
            dropdownHeader.classList.remove('has-selection');
        }
    }
}

/**
 * Function to update the Selection Badge based on current selections
 */
function updateSelectionBadge(dropdownList, badgeElement) {
    const selectedItems = Array.from(dropdownList.querySelectorAll('input[type="checkbox"]:checked')).map(cb => cb.value);
    if (selectedItems.length > 0) {
        badgeElement.textContent = selectedItems.join(', ');
        badgeElement.classList.add('visible');
    } else {
        badgeElement.textContent = '';
        badgeElement.classList.remove('visible');
    }
}

/**
 * Function to trigger a custom event to notify filter.js of dropdown changes
 */
function triggerDropdownChangeEvent() {
    const event = new CustomEvent('dropdownChange');
    console.log("Dispatching dropdownChange event");
    document.dispatchEvent(event);
}

/**
 * Function to set the initial carousel title based on selected_theme from backend
 */
function setInitialCarouselTitle() {
    const initialTheme = document.getElementById('initial-selected-theme').value;
    if (initialTheme) {
        carouselTitle.textContent = genreFontMapping[initialTheme] ? `${initialTheme} Filmtitel` : `${initialTheme} Filme`;
        carouselTitle.style.fontFamily = genreFontMapping[initialTheme] || "'Cinzel', serif";
    } else {
        carouselTitle.textContent = "Hervorgehobene Filme";
        carouselTitle.style.fontFamily = "'Cinzel', serif";
    }
}

/**
 * Function to update the carousel title based on selected genre
 */
function updateCarouselTitle(selected_theme) {
    const selectedGenres = getCheckedValues('genre-dropdown-list');
    if (selectedGenres.length === 1) {
        const genre = selectedGenres[0];
        carouselTitle.textContent = genreFontMapping[genre] ? `${genre} Filmtitel` : `${genre} Filme`;
        // Apply the corresponding font
        carouselTitle.style.fontFamily = genreFontMapping[genre] || "'Open Sans', sans-serif";
    } else if (selectedGenres.length > 1) {
        carouselTitle.textContent = "Verschiedene Genres";
        carouselTitle.style.fontFamily = "'Open Sans', sans-serif";
    } else {
        const initialTheme = document.getElementById('initial-selected-theme').value;
        carouselTitle.textContent = initialTheme ? `${initialTheme} Filmtitel` : "Hervorgehobene Filme";
        carouselTitle.style.fontFamily = genreFontMapping[initialTheme] || "'Cinzel', serif";
    }
}   

/**
 * Function to update dropdown values and movie listings based on current selections and search query
 */
function updateFilters(page = 1) {
    const selectedYears = getCheckedValues('year-dropdown-list');
    const selectedGenres = getCheckedValues('genre-dropdown-list');
    const selectedCountries = getCheckedValues('country-dropdown-list');
    const searchQuery = searchBox ? searchBox.value.trim() : '';

    const params = new URLSearchParams();
    if (selectedYears.length) params.append('years', selectedYears.join(','));
    if (selectedGenres.length) params.append('genres', selectedGenres.join(','));
    if (selectedCountries.length) params.append('countries', selectedCountries.join(','));
    if (searchQuery) params.append('search', searchQuery);
    params.append('page', page);

    console.log("Fetching updated filter data with params:", params.toString());

    // Show the progress indicator before starting the fetch
    console.log("showProgressIndicator")
    showProgressIndicator();

    fetch(`/filter_movies?${params.toString()}`)
        .then(response => response.json())
        .then(data => {
            console.log("API Response Data:", data);
            const { years, genres, countries, movies, current_page, total_pages } = data;

            // Populate each dropdown with data
            populateDropdown('year-dropdown-list', years, selectedYears);
            populateDropdown('genre-dropdown-list', genres, selectedGenres);
            populateDropdown('country-dropdown-list', countries, selectedCountries);

            updateMovieListings(movies);
            updatePagination(current_page, total_pages);
        })
        .catch(error => {
            console.error('Error fetching filter data:', error);
            if (movieContainer) {
                movieContainer.innerHTML = `<p class="no-movies-message">Ein Fehler ist aufgetreten. Bitte versuchen Sie es später erneut.</p>`;
            }
        })
        .finally(() => {
            // Hide the progress indicator after fetch completes (success or error)
            hideProgressIndicator();
        });
}

/**
 * Helper to get checked values from a specific dropdown list
 */
function getCheckedValues(dropdownListId) {
    const checkboxes = document.querySelectorAll(`#${dropdownListId} input[type="checkbox"]:checked`);
    return Array.from(checkboxes).map(cb => cb.value);
}

/**
 * Function to populate dropdown lists with options
 * @param {string} dropdownListId - The ID of the dropdown list element
 * @param {Object} options - An object with option labels as keys and counts as values
 * @param {Array} selectedValues - An array of currently selected option values
 */
function populateDropdown(dropdownListId, options, selectedValues = []) {
    const dropdownList = document.getElementById(dropdownListId);
    if (!dropdownList) {
        console.error(`populateDropdown: Element mit ID '${dropdownListId}' nicht gefunden.`);
        return;
    }

    dropdownList.innerHTML = "";  // Bestehende Optionen löschen

    if (typeof options !== 'object' || Array.isArray(options)) {
        console.error(`populateDropdown: 'options' sollte ein Objekt sein. Erhalten:`, options);
        return;
    }

    // Convert the options object into an array of objects with label and count
    const optionsArray = Object.entries(options).map(([label, count]) => ({ label, count }));

    // Sort the options alphabetically
    optionsArray.sort((a, b) => {
        if (a.label < b.label) return -1;
        if (a.label > b.label) return 1;
        return 0;
    });

    // Render the options
    optionsArray.forEach(option => {
        const isChecked = selectedValues.includes(option.label) ? 'checked' : '';
        const label = document.createElement("label");
        label.innerHTML = `<input type="checkbox" value="${option.label}" ${isChecked}> ${option.label} (${option.count})`;
        dropdownList.appendChild(label);
    });

    // Update Selection Badge after populating
    const parentDropdown = dropdownList.parentElement;
    const selectionBadge = parentDropdown.querySelector('.selection-badge');
    if (selectionBadge) {
        updateSelectionBadge(dropdownList, selectionBadge);
    }
}

/**
 * Funktion zur Aktualisierung der Movie Listings basierend auf den Filterergebnissen
 */
function updateMovieListings(movies) {
    console.log("Updating Movie Listings");
    if (!movieContainer) {
        console.error("updateMovieListings: movieContainer Element nicht gefunden.");
        return;
    }

    movieContainer.innerHTML = "";  // Bestehende Einträge löschen

    if (movies.length > 0) {
        movies.forEach(movie => {
            const imagePath = `/movie_images/${encodeURIComponent(movie.folder_name)}/poster/poster_1.jpg`;
            const defaultImagePath = '/static/images/default_movie.png';

            const movieCard = document.createElement('div');
            movieCard.className = 'movie-card poster-background';
            movieCard.style.backgroundImage = `url('${imagePath}')`;

            const maxOverviewLength = window.innerWidth <= 768 ? 150 : 350;
            movieCard.innerHTML = `
                <div class="movie-content-wrapper">
                    <div class="image-container">
                        <img src="${imagePath}" alt="${movie.main_title}" onerror="this.onerror=null; this.src='${defaultImagePath}';">
                    </div>
                    <div class="info-section">
                        <div class="header-section">
                            <h2>${movie.main_title}</h2>
                            <!-- Weitere Elemente wie Buttons oder Icons -->
                        </div>
                        <div class="metadata">
                            <p><strong>Regie:</strong> ${movie.director}</p>
                            <p><strong>Schauspieler:</strong> ${movie.actors}</p>
                            <p class="inline-meta">${movie.runtime} min | ${movie.formats} | FSK ${movie.format_fsk} | &#9733; ${movie.imdb_rating}</p>
                            <p class="standort"><strong>Standort:</strong> ${movie.format_standort || 'N/A'}</p>
                            <p class="countries"><strong>Länder:</strong> ${movie.countries}</p> <!-- Länderinformationen -->
                        </div>
                    </div>
                    <div class="overview-section">
                        ${movie.overview.length > maxOverviewLength
                            ? `<p>${movie.overview.substring(0, maxOverviewLength)}... <a href="/movie/${movie.movie_id}" class="more-link">mehr</a></p>`
                            : `<p>${movie.overview} <a href="/movie/${movie.movie_id}" class="more-link">mehr</a></p>`}
                    </div>
                </div>
            `;
            
            movieContainer.appendChild(movieCard);
            
        });
    } else {
        movieContainer.innerHTML = `<p class="no-movies-message">Keine Filme entsprechen den ausgewählten Filtern.</p>`;
    }
}

/**
 * Function to handle pagination updates for both top and bottom paginations
 */
function updatePagination(currentPage, totalPages) {
    [topPaginationContainer, bottomPaginationContainer].forEach(paginationContainer => {
        if (!paginationContainer) return;

        paginationContainer.innerHTML = "";  // Bestehende Pagination-Buttons löschen

        // Create the "Previous" Button
        let prevDisabledClass = currentPage <= 1 ? 'disabled' : '';
        let prevDisabledAttr = currentPage <= 1 ? 'aria-disabled="true"' : '';
        paginationContainer.innerHTML += `<li class="${prevDisabledClass}"><a href="#" data-page="${currentPage - 1}" ${prevDisabledAttr}>&laquo; Previous</a></li>`;

        // Add first page and ellipsis if needed
        if (currentPage > 3) {
            paginationContainer.innerHTML += `<li><a href="#" data-page="1">1</a></li>`;
            paginationContainer.innerHTML += `<li class="ellipsis"><span>...</span></li>`;
        }

        // Generate page numbers around the current page
        let startPage = Math.max(1, currentPage - 2);
        let endPage = Math.min(totalPages, currentPage + 2);
        for (let p = startPage; p <= endPage; p++) {
            let activeClass = (p === currentPage) ? 'active' : '';
            paginationContainer.innerHTML += `<li class="${activeClass}"><a href="#" data-page="${p}">${p}</a></li>`;
        }

        // Add ellipsis and last page if needed
        if (currentPage < totalPages - 2) {
            paginationContainer.innerHTML += `<li class="ellipsis"><span>...</span></li>`;
            paginationContainer.innerHTML += `<li><a href="#" data-page="${totalPages}">${totalPages}</a></li>`;
        }

        // Create the "Next" Button
        let nextDisabledClass = currentPage >= totalPages ? 'disabled' : '';
        let nextDisabledAttr = currentPage >= totalPages ? 'aria-disabled="true"' : '';
        paginationContainer.innerHTML += `<li class="${nextDisabledClass}"><a href="#" data-page="${currentPage + 1}" ${nextDisabledAttr}>Next &raquo;</a></li>`;
    });

    attachPaginationEventListeners();
}

/**
 * Function to attach click event listeners for pagination buttons
 */
function attachPaginationEventListeners() {
    const paginationLinks = document.querySelectorAll('.pagination nav ul li a[data-page]');
    paginationLinks.forEach(link => {
        link.addEventListener('click', function (event) {
            event.preventDefault();
            if (this.parentElement.classList.contains('disabled')) {
                return;  // Klicks auf deaktivierte Buttons ignorieren
            }
            const page = parseInt(this.getAttribute('data-page'));
            if (!isNaN(page)) updateFilters(page);  // Filterung mit ausgewählter Seite auslösen
        });
    });
}

/**
 * Function to show the progress indicator
 */
function showProgressIndicator() {
    console.log("showProgressIndicator aufgerufen");
    if (progressIndicator) {
        progressIndicator.style.display = 'flex'; // Progress Indicator anzeigen
        progressIndicator.setAttribute('aria-hidden', 'false');
        console.log("Progress Indicator angezeigt:", progressIndicator.style.display);
    } else {
        console.error("showProgressIndicator: Progress Indicator Element nicht gefunden.");
    }
}

/**
 * Function to hide the progress indicator
 */
function hideProgressIndicator() {
    console.log("hideProgressIndicator aufgerufen");
    if (progressIndicator) {
        progressIndicator.style.display = 'none'; // Progress Indicator ausblenden
        progressIndicator.setAttribute('aria-hidden', 'true');
        console.log("Progress Indicator ausgeblendet:", progressIndicator.style.display);
    } else {
        console.error("hideProgressIndicator: Progress Indicator Element nicht gefunden.");
    }
}

/**
 * Function to initialize the Swiper carousel without pagination bullets
 */
function initializeSwiper() {
    const swiperContainer = document.querySelector('.swiper-container');
    if (!swiperContainer) {
        console.error("initializeSwiper: Swiper container nicht gefunden.");
        return;
    }

    const totalSlides = swiperContainer.querySelectorAll('.swiper-slide').length;
    const slidesPerViewDesktop = 4; // Base number for desktop

    const swiper = new Swiper('.swiper-container', {
        loop: totalSlides > slidesPerViewDesktop,
        autoplay: {
            delay: 5000,
            disableOnInteraction: false,
        },
        navigation: {
            nextEl: '.swiper-button-next',
            prevEl: '.swiper-button-prev',
        },
        slidesPerView: 'auto', // Allows Swiper to adjust based on slide width
        spaceBetween: 10,
        watchOverflow: true, // Disable Swiper if not enough slides

        // Responsive breakpoints
        breakpoints: {
            // When window width is >= 1400px
            2200: {
                slidesPerView: 13,
                spaceBetween: 10
            },
            2000: {
                slidesPerView: 10,
                spaceBetween: 10
            },
            1800: {
                slidesPerView: 9,
                spaceBetween: 10
            },
            1600: {
                slidesPerView: 8,
                spaceBetween: 10
            },
        
            1400: {
                slidesPerView: 6.5,
                spaceBetween: 10
            },
            // When window width is >= 1200px
            1200: {
                slidesPerView: 6,
                spaceBetween: 6
            },
            // When window width is >= 1024px
            1024: {
                slidesPerView: 5,
                spaceBetween: 8
            },
            // When window width is >= 900px
            900: {
                slidesPerView: 4,
                spaceBetween: 10
            },
            // When window width is >= 768px
            768: {
                slidesPerView: 3,
                spaceBetween: 12
            },
            // When window width is >= 640px
            640: {
                slidesPerView: 2.5,
                spaceBetween: 14
            },
            // When window width is < 640px
            0: { // Mobile-first
                slidesPerView: 2.5,
                spaceBetween: 16
            }
        },

        // Adjust to handle slides dynamically
        on: {
            resize: function () {
                this.update(); // Update Swiper on window resize
            },
            init: function () {
                if (totalSlides <= this.params.slidesPerView) {
                    this.loopDestroy(); // Disable loop if not enough slides
                }
            }
        }
    });
}


--- File: static\js\navbar.js ---
document.addEventListener('DOMContentLoaded', function () {
    const navbar = document.querySelector('.navbar'); // Select the navbar element
    let lastScrollTop = 0; // Track the previous scroll position

    // Function to handle scroll events
    function handleScroll() {
        const currentScroll = window.pageYOffset || document.documentElement.scrollTop;

        // Show navbar at the top of the page
        if (currentScroll <= 20) {
            navbar.classList.remove('hide');
            navbar.classList.add('show');
        }
        // Hide navbar on scroll down
        else if (currentScroll > lastScrollTop) {
            navbar.classList.add('hide');
            navbar.classList.remove('show');
        }
        // Show navbar on scroll up
        else {
            navbar.classList.remove('hide');
            navbar.classList.add('show');
        }

        lastScrollTop = currentScroll <= 0 ? 0 : currentScroll; // Update lastScrollTop
    }

    // Listen to scroll events
    window.addEventListener('scroll', handleScroll);
});

--- File: static\js\scripts.js ---
document.addEventListener('DOMContentLoaded', function () {
 
    // Call the wrapper function after the DOM content is fully loaded
    initializeHeroSectionIfPresent();

    // Call truncateText function for overview sections
    truncateText('.info-section.overview p', 500);

    // Call the function on initial load and resize
    adjustTitleFontSize();
    window.addEventListener('resize', adjustTitleFontSize);

    // Call the function on initial load and window resize
    adjustMetadataWidth();
    window.addEventListener('resize', adjustMetadataWidth);

    // Call the function on initial load and window resize
    updateMovieCardBackground();
    window.addEventListener('resize', updateMovieCardBackground);

});


// Wrapper function to check the presence of hero section before initializing
function initializeHeroSectionIfPresent() {
    function manageHeroAndTaglines() {
        // Taglines array for the hero section
        const taglines = [
            "Entdecke unsere Sammlung von fast 20.000 Filmen.",
            "Finde deine Lieblingsfilme und entdecke neue Perlen.",
            "Tauche ein in cineastische Meisterwerke.",
            "Erlebe das Beste aus Arthouse- und klassischem Kino.",
            "Dein Zugang zu zeitlosen Filmen.",
            "Die Filmsammlung des FORMAT Filmkunst-Verleihs.",
            "Für eine Handvoll Dollar kannst du von den Möglichkeiten profitieren.",
            "Über 19.000 Filme - die größte private Filmsammlung Mitteldeutschlands.",
            "Independent- und Arthouse-Filme auf DVD, Blu-ray und 3D-Blu-ray.",
            "'Unendliche Weiten' an Informationen zu den Filmen.",
            "Cineastische Raritäten, Arthouse und Blockbuster - alles unter einem Dach.",
            "FILMKUNST-Verleih seit über 18 Jahren."
        ];
    
        // Hero images array
        const heroImages = [
            '/static/images/backdrop_1.jpg',
            '/static/images/backdrop_2.jpg',
            '/static/images/backdrop_3.jpg',
            '/static/images/backdrop_4.jpg'
        ];
    
        // Elements for the hero section
        const taglineElement = document.getElementById('dynamic-tagline');
        const heroImageElement = document.querySelector('.hero-image img');
        const logoElement = document.querySelector('.logo span');
    
        // Check for the presence of critical elements before proceeding
        if (!taglineElement || !heroImageElement || !logoElement) {
            console.info("Hero elements not found on this page. Skipping hero section initialization.");
            return; // Exit the function if elements are not found
        }
    
        // Initial setup for tagline and hero image
        let currentTaglineIndex = Math.floor(Math.random() * taglines.length);
        taglineElement.textContent = taglines[currentTaglineIndex];
        taglineElement.classList.add('fade-in');
    
        // Set a random hero image
        const randomImage = heroImages[Math.floor(Math.random() * heroImages.length)];
        heroImageElement.src = randomImage;
    
        // Change taglines periodically
        setInterval(() => {
            taglineElement.classList.remove('fade-in');
            taglineElement.classList.add('fade-out');
    
            setTimeout(() => {
                currentTaglineIndex = (currentTaglineIndex + 1) % taglines.length;
                taglineElement.textContent = taglines[currentTaglineIndex];
                taglineElement.classList.remove('fade-out');
                taglineElement.classList.add('fade-in');
    
                // Randomly change logo color
                const randomChance = Math.random();
                logoElement.style.color = randomChance < 0.3 ? 'red' : 'white';
            }, 1000); // Matches transition duration
        }, 5000);
    }    
    // Run the hero management code only if the relevant elements exist on the page
    const heroSectionExists = document.querySelector('.hero-image img') && document.getElementById('dynamic-tagline') && document.querySelector('.logo span');
    
    if (heroSectionExists) {
        manageHeroAndTaglines(); // Initialize only if hero section elements are present
    } else {
        console.info("Hero section elements not found on this page. Skipping hero management.");
    }
}

// Truncate text for overview sections
function truncateText(selector, maxLength) {
    const elements = document.querySelectorAll(selector);
    elements.forEach(element => {
        const originalText = element.textContent;
        if (originalText.length > maxLength) {
            const truncatedText = originalText.substring(0, maxLength).trim() + '...';
            element.textContent = truncatedText;
        }
    });
}
// Adjust title font size dynamically based on overflow
function adjustTitleFontSize() {
    const movieCards = document.querySelectorAll('.movie-card');
    movieCards.forEach(card => {
        const titleContainer = card.querySelector('.titles');
        if (titleContainer) {
            const mainTitle = titleContainer.querySelector('.main-title');
            const releaseYear = titleContainer.querySelector('.release-year');
            
            if (mainTitle && releaseYear) {
                // Reset to default size
                mainTitle.style.fontSize = '1.6em';
                releaseYear.style.fontSize = '0.8em';
                
                // Check if the title overflows
                if (titleContainer.scrollWidth > titleContainer.clientWidth) {
                    let fontSize = parseFloat(window.getComputedStyle(mainTitle).fontSize);
                    while (titleContainer.scrollWidth > titleContainer.clientWidth && fontSize > 0.8) {
                        fontSize -= 0.1;
                        mainTitle.style.fontSize = fontSize + 'em';
                        releaseYear.style.fontSize = (fontSize * 0.7) + 'em';  // Adjust year proportionally
                    }
                }
            }
        }
    });
}

// Adjust the width of metadata elements dynamically
function adjustMetadataWidth() {
    const metadataElements = document.querySelectorAll('.movie-metadata');
    metadataElements.forEach(metadata => {
        const parentWidth = metadata.parentElement.clientWidth;
        metadata.style.maxWidth = parentWidth + 'px';
    });
}


// Function to update movie card background images based on screen size
function updateMovieCardBackground() {
const movieCards = document.querySelectorAll('.movie-card.poster-background');
movieCards.forEach(card => {
    const mobileImage = card.getAttribute('data-mobile-image');
    const desktopImage = card.getAttribute('data-desktop-image');

    // Set the correct background based on the screen size
    if (window.innerWidth >= 1024) {
        if (desktopImage) {
            card.style.backgroundImage = `url(${desktopImage})`;
        }
    } else {
        if (mobileImage) {
            card.style.backgroundImage = `url(${mobileImage})`;
        }
    }
});
}
--- File: templates\catalog.html ---
<!-- File: templates/catalog.html -->
<!-- templates/catalog.html -->
<!DOCTYPE html>
<html lang="de">
<head>
    <meta charset="UTF-8">
    <title>Catalog - FORMAT Filmkunst-Verleih</title>
    <link href="https://fonts.googleapis.com/css2?family=Cinzel:wght@400;700&family=Open+Sans&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="{{ url_for('static', filename='css/main.css') }}?v=1.0">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" crossorigin="anonymous">
    <!-- Swiper.js CSS for Carousel -->
    <link rel="stylesheet" href="https://unpkg.com/swiper/swiper-bundle.min.css" />
    <!-- Filter CSS -->
</head>
<body>
    <header>
        <nav class="navbar">
            <div class="logo">
                <a href="{{ url_for('index') }}"><span>FORMAT</span></a>
                <a href="{{ url_for('catalog') }}" class="sub-logo"><span>Katalog</span></a>
            </div>
            <div class="menu-toggle" aria-label="Toggle navigation menu" aria-expanded="false" role="button" tabindex="0">
                <i class="fas fa-bars"></i>
            </div>
            <ul class="nav-links">
                <li><a href="https://verein.format-filmkunstverleih.de/">filmkunst-verleih</a></li>
                <!-- Additional menu links can be placed here -->
            </ul>
        </nav>
        <!-- Separate link for mobile users -->
        <div class="mobile-footer-link">
            <a href="https://verein.format-filmkunstverleih.de/">filmkunst-verleih</a>
        </div>
    </header>
  <main>
        <!-- Movie Carousel Section -->
        <section class="movie-carousel-section">
            <h2 id="carousel-title">
                {% if selected_theme %}
                    A Taste of... {{ selected_theme }}
                {% else %}
                    Hervorgehobene Filme
                {% endif %}
            </h2>
            <!-- Swiper.js Carousel -->
            <div class="swiper-container">
                <div class="swiper-wrapper">
                    {% for featured_movie in featured_movies %}
                    <div class="swiper-slide">
                        <div class="featured-movie-card">
                            <img src="{{ url_for('movie_images', filename=featured_movie['folder_name'] + '/poster/poster_1.jpg') }}" alt="{{ featured_movie['main_title'] }}" onerror="this.onerror=null; this.src='{{ url_for('static', filename='images/default_movie.png') }}';" loading="lazy">
                            <div class="featured-movie-overlay">
                                <h3>{{ featured_movie['main_title'] }}</h3>
                                <a href="{{ url_for('movie_details', movie_id=featured_movie['movie_id']) }}" class="btn btn-secondary">Mehr erfahren</a>
                            </div>
                        </div>
                    </div>
                    {% endfor %}
                </div>
                <!-- Add Pagination -->
                <div class="swiper-pagination"></div>
                <!-- Add Navigation -->
                <div class="swiper-button-prev"></div>
                <div class="swiper-button-next"></div>
            </div>
        </section>
        

        <div id="progress-indicator" class="progress-indicator" role="status" aria-live="polite" aria-hidden="true">
            <div class="spinner" aria-hidden="true"></div>
            <p>Loading movies...</p>
        </div>          

        <!-- Catalog Search Section -->
        <section class="catalog-search">
            <div class="search-dropdown-container">
                    <!-- Search Box Container -->
                <div class="search-container">
                    <i class="fas fa-search search-icon" aria-hidden="true"></i>
                    <input id="search-box" type="text" placeholder="Suche...">
                    <span id="clear-search" class="clear-icon" role="button" tabindex="0" aria-label="Clear search">&times;</span>
                </div>                
                <form id="filter-form">


                    <!-- Custom Dropdowns for Filters -->
                    <div class="custom-dropdown">
                        <div class="dropdown-header" aria-label="Jahr" role="button" tabindex="0" aria-haspopup="true" aria-expanded="false">
                            <i class="fas fa-calendar-alt" aria-hidden="true"></i>
                            <div class="header-controls">
                                <span class="selection-badge" aria-label="Selected Year"></span> <!-- Selection Badge hinzugefügt -->
                                <span class="clear-icon" role="button" tabindex="0" aria-label="Clear year filter">&times;</span>
                            </div>
                        </div>
                        <div class="dropdown-list" id="year-dropdown-list">
                            <!-- Dropdown options will be populated dynamically via JavaScript -->
                        </div>
                    </div>
                    
                    <!-- Genre Dropdown -->
                    <div class="custom-dropdown">
                        <div class="dropdown-header" aria-label="Genre" role="button" tabindex="0" aria-haspopup="true" aria-expanded="false">
                            <i class="fas fa-film" aria-hidden="true"></i>
                            <div class="header-controls">
                                <span class="selection-badge" aria-label="Selected Genre"></span> <!-- Selection Badge hinzugefügt -->
                                <span class="clear-icon" role="button" tabindex="0" aria-label="Clear genre filter">&times;</span>
                            </div>
                        </div>
                        <div class="dropdown-list" id="genre-dropdown-list">
                            <!-- Dropdown options will be populated dynamically via JavaScript -->
                        </div>
                    </div>

                    <!-- Country Dropdown -->
                    <div class="custom-dropdown">
                        <div class="dropdown-header" aria-label="Land" role="button" tabindex="0" aria-haspopup="true" aria-expanded="false">
                            <i class="fas fa-globe" aria-hidden="true"></i>
                            <div class="header-controls">
                                <span class="selection-badge" aria-label="Selected Country"></span> <!-- Selection Badge hinzugefügt -->
                                <span class="clear-icon" role="button" tabindex="0" aria-label="Clear country filter">&times;</span>
                            </div>
                        </div>
                        <div class="dropdown-list" id="country-dropdown-list">
                            <!-- Dropdown options will be populated dynamically via JavaScript -->
                        </div>
                    </div>
                    
                </form>
            </div>
        </section>

        <!-- Top Pagination Section -->
        <section class="pagination top-pagination">
            <nav>
                <ul>
                    <!-- Pagination will be populated dynamically here -->
                </ul>
            </nav>
        </section>

        <!-- Movie Listings Container -->
        <section class="movie-listings-container" style="position: relative; background-color: var(--primary-bg-color);">

            <!-- Movie Listings Section -->
            <section class="movie-listings">
                {% if movies %}
                    {% for movie in movies %}
                    <div class="movie-card">
                        <div class="movie-content-wrapper">
                            <div class="image-container">
                                <img src="{{ url_for('movie_images', filename=movie['folder_name'] + '/poster/poster_1.jpg') }}" 
                                    alt="{{ movie['main_title'] }}" 
                                    onerror="this.onerror=null; this.src='{{ url_for('static', filename='images/default_movie.png') }}';"
                                    loading="lazy">
                            </div>
                            <div class="info-section">
                                <h2>{{ movie['main_title'] }}</h2>
                                <p><strong>Original: {{ movie['original_title'] }}</strong> ({{ movie['release_date'] }})</p>
                                <p class="inline-meta">{{ movie['runtime'] }} min | {{ movie['formats'] }} | FSK {{ movie['format_fsk'] }} | &#9733; {{ movie['imdb_rating'] }}</p>
                                <p><strong>Regie:</strong> {{ movie['director'] }}</p>
                                <p><strong>Schauspieler:</strong> {{ movie['actors'] }}</p>
                                {% if movie['format_standort'] %}
                                <p class="standort"><strong>Standort:</strong> {{ movie['format_standort'] }}</p>
                                {% endif %}
                                <p class="countries"><strong>Länder:</strong> {{ movie['countries'] }}</p> <!-- Länderinformationen -->
                                <div class="links">
                                    <a href="https://www.imdb.com/title/{{ movie['imdb_id'] }}" target="_blank" aria-label="IMDb"><i class="fab fa-imdb"></i></a>
                                    <a href="{{ movie['trailer_url'] }}" target="_blank" aria-label="Trailer"><i class="fas fa-play-circle"></i></a>
                                    <a href="{{ movie['review_url'] }}" target="_blank" aria-label="Review"><i class="fas fa-comments"></i></a>
                                </div>
                            </div>
                            <div class="overview-section">
                                <p><a href="/movie/{{ movie['format_filmId'] }}" class="more-link">mehr</a></p>
                            </div>
                        </div>
                    </div>
                    {% endfor %}
                {% else %}
                    <p class="no-movies-message">Keine Filme entsprechen den ausgewählten Filtern.</p>
                {% endif %}
            </section>
        </section>

        <!-- Bottom Pagination Section -->
        <section class="pagination bottom-pagination">
            <nav>
                <ul>
                    <!-- Pagination will be populated dynamically here -->
                </ul>
            </nav>
        </section>
    </main>

    <footer>
        <div class="footer-content">
            <p>&copy; 2024 FORMAT Filmkunst-Verleih e.V.</p>
        </div>
    </footer>

    <!-- Swiper.js JS für das Karussell -->
    <script src="https://unpkg.com/swiper/swiper-bundle.min.js"></script>
    <!-- Scripts -->
    <script src="{{ url_for('static', filename='js/filter.js') }}?v=1.4"></script> 
    <script src="{{ url_for('static', filename='js/navbar.js') }}"></script>
</body>
</html>

--- File: templates\index.html ---
<!DOCTYPE html>
<html lang="de">
<head>
    <meta charset="UTF-8">
    <title>FORMAT Filmkunst-Verleih - Home</title>
    <!-- Responsive Meta Tag -->
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <!-- Google Fonts -->
    <link href="https://fonts.googleapis.com/css2?family=Cinzel:wght@400;700&family=Open+Sans&display=swap" rel="stylesheet">
    <!-- Font Awesome for Icons -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" crossorigin="anonymous" referrerpolicy="no-referrer" />
    <!-- Main CSS -->
    <link rel="stylesheet" href="{{ url_for('static', filename='css/main.css') }}">
</head>
<body>
    <header>
        <nav class="navbar">
            <div class="logo">
                <a href="{{ url_for('index') }}"><span>FORMAT</span></a>
                <a href="{{ url_for('catalog') }}" class="sub-logo"><span>Katalog</span></a>
            </div>
            <div class="menu-toggle" aria-label="Toggle navigation menu" aria-expanded="false" role="button" tabindex="0">
                <i class="fas fa-bars"></i>
            </div>
            <ul class="nav-links">
                <li><a href="https://verein.format-filmkunstverleih.de/">filmkunst-verleih</a></li>
                <!-- Additional menu links can be placed here -->
            </ul>
        </nav>
        <!-- Separate link for mobile users -->
        <div class="mobile-footer-link">
            <a href="https://verein.format-filmkunstverleih.de/">filmkunst-verleih</a>
        </div>
    </header>
    

    <main>
        <!-- Hero Section -->
        <section class="hero">
            <div class="hero-image">
                <img src="images/backdrop_1.jpg" alt="Hero Image">
            </div>
            <div class="hero-overlay">
                <h1 id="dynamic-tagline">Für eine Handvoll Dollar kannst du von den Möglichkeiten profitieren.</h1>
            <!-- Place the button outside of the hero-overlay div -->
                <a href="{{ url_for('catalog') }}" class="btn btn-primary">Katalog</a>
            </div>

        </section>
        


    </main>

    <footer>
        <div class="footer-content">
            <p>&copy; 2024 FORMAT Filmkunst-Verleih e.V. Alle Rechte vorbehalten.</p>
        </div>
    </footer>

    <!-- Scripts -->
    <script src="{{ url_for('static', filename='js/scripts.js') }}" type="module"></script>
</body>
</html>

