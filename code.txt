=== Code Summary Generated at 2024-10-10 20:29:49 ===

=== Project Folder Structure ===

Format/
    static/
        assets/
            custom_controls/
                custom_dropdown.js
                search_container.css
            fonts/
                Spacia Heavy.ttf
        css/
            main.css
            base/
                reset.css
                typography.css
                variables.css
            components/
                buttons.css
                cards.css
                carousel.css
                filter.css
                forms.css
                pagination.css
                progress_indicator.css
            layout/
                footer.css
                hero.css
                navbar.css
            pages/
                about.css
                catalog.css
                contact.css
                events.css
        images/
            backdrop_1.jpg
            backdrop_2.jpg
            backdrop_3.jpg
            backdrop_4.jpg
            default_movie.png
            event1.jpg
            event2.jpg
            event3.jpg
            logo.png
            movie1.jpg
            movie2.jpg
            team1.jpg
            team2.jpg
        js/
            carousel.js
            catalog.js
            entry.js
            filter.js
            hero.js
            main.js
            navbar.js
            pagination.js
    templates/
        catalog.html
        index.html

=== File Contents ===

--- File: static\assets\custom_controls\custom_dropdown.js ---
document.addEventListener('DOMContentLoaded', function () {
    console.log("Custom Dropdowns: DOM fully loaded");
    initializeCustomDropdowns(); // Initialize custom dropdowns when DOM is loaded
    initializeSearchBox();
});

// Function to initialize the search box clear button and its behavior
function initializeSearchBox() {
    const searchBox = document.getElementById('search-box');
    const clearSearchButton = document.getElementById('clear-search');

    if (!searchBox || !clearSearchButton) {
        console.error("Search box or clear button not found.");
        return;
    }

    console.log("Initializing search box listeners...");
    
    // Show/hide the clear button based on input value
    searchBox.addEventListener('input', () => {
        if (searchBox.value.length > 0) {
            clearSearchButton.style.visibility = 'visible';  // Show the clear button
        } else {
            clearSearchButton.style.visibility = 'hidden';   // Hide the clear button
        }
    });

    // Clear the search box when the clear button is clicked
    clearSearchButton.addEventListener('click', () => {
        searchBox.value = '';
        clearSearchButton.style.visibility = 'hidden';
        console.log("Search box cleared.");
        // Optionally trigger any search box reset logic here
    });

    console.log("Search box listeners attached successfully.");
}

// Stellen Sie sicher, dass beim Initialisieren der Dropdowns das Selection Badge ebenfalls aktualisiert wird
function initializeCustomDropdowns() {
    console.log("Initializing Custom Dropdowns...");

    // Retrieve the custom dropdown elements by their header and list classes
    const dropdownHeaders = document.querySelectorAll('.dropdown-header');
    const dropdownLists = document.querySelectorAll('.dropdown-list');
    const clearButtons = document.querySelectorAll('.clear-icon');

    // Check if all required elements are present
    if (dropdownHeaders.length !== dropdownLists.length) {
        console.error("Mismatch in dropdown elements. Headers, lists, or clear buttons are not matching in count.");
        console.log("Headers found: ", dropdownHeaders.length);
        console.log("Dropdown lists found: ", dropdownLists.length);
        console.log("Clear buttons found: ", clearButtons.length);
        return; // Exit initialization if element counts don't match
    }

    console.log("Attaching event listeners to custom dropdowns...");
    // Attach event listeners for each dropdown and clear button
    dropdownHeaders.forEach((header, index) => {
        const dropdownList = dropdownLists[index];
        const clearButton = header.querySelector('.clear-icon');
        const countElement = header.querySelector('.selected-count');
        const badgeElement = header.querySelector('.selection-badge');

        // Initial Update
        updateSelectedCount(dropdownList, countElement, clearButton);

        attachDropdownListeners(header, dropdownList, clearButton);
    });
}
// Function to attach listeners to dropdown header, checkboxes, and clear button
/**
 * Function to attach event listeners to dropdown headers and clear buttons
 */
function attachDropdownListeners() {
    const dropdownHeaders = document.querySelectorAll('.dropdown-header');

    dropdownHeaders.forEach(header => {
        const dropdownList = header.nextElementSibling; // Assumes .dropdown-list follows .dropdown-header
        const clearButton = header.querySelector('.clear-icon');
        const selectedCount = header.querySelector('.selected-count');

        if (!dropdownList) {
            console.error("attachDropdownEventListeners: Dropdown list not found for a header.");
            return;
        }

        if (!selectedCount) {
            console.error("attachDropdownEventListeners: Selected count element not found in a header.");
            return;
        }

        // Toggle dropdown visibility on header click
        header.addEventListener('click', (event) => {
            event.stopPropagation(); // Prevent event from bubbling up
            toggleDropdown(dropdownList, header);
        });

        // Close dropdown when clicking outside
        document.addEventListener('click', (event) => {
            if (!header.contains(event.target) && !dropdownList.contains(event.target)) {
                dropdownList.classList.remove('show');
                header.setAttribute('aria-expanded', 'false');
            }
        });

        // Clear all selections when the clear button is clicked
        clearButton.addEventListener('click', (event) => {
            event.stopPropagation(); // Prevent header dropdown toggle
            const checkboxes = dropdownList.querySelectorAll('input[type="checkbox"]');
            checkboxes.forEach(checkbox => (checkbox.checked = false)); // Uncheck all boxes
            updateSelectedCount(checkboxes, selectedCount, clearButton); // Update selection count
            triggerDropdownChangeEvent();  // Trigger a custom change event to update filters
        });
    });

    // Attach a single event listener for all dropdown lists (event delegation)
    const dropdownLists = document.querySelectorAll('.dropdown-list');
    dropdownLists.forEach(list => {
        list.addEventListener('change', (event) => {
            if (event.target && event.target.matches('input[type="checkbox"]')) {
                const dropdownList = event.currentTarget;
                const header = dropdownList.previousElementSibling; // Assumes .dropdown-header precedes .dropdown-list
                const selectedCount = header.querySelector('.selected-count');
                const clearButton = header.querySelector('.clear-icon');
                updateSelectedCount(dropdownList.querySelectorAll('input[type="checkbox"]'), selectedCount, clearButton);
                triggerDropdownChangeEvent();
            }
        });
    });
}


// Function to attach checkbox listeners
function attachCheckboxListeners(dropdownList, selectedCount, clearButton) {
    const checkboxes = dropdownList.querySelectorAll('input[type="checkbox"]');
    console.log(`Attaching checkbox listeners to ${dropdownList.id}...`);
    console.log("Checkboxes found:", checkboxes.length);

    checkboxes.forEach(checkbox => {
        checkbox.addEventListener('change', () => {
            console.log("Checkbox change detected in", dropdownList.id);
            updateSelectedCount(checkboxes, selectedCount, clearButton); // Update the selected count
            triggerDropdownChangeEvent();  // Trigger a custom change event to update filters
        });
    });
    console.log(`Checkbox listeners successfully attached to ${dropdownList.id}`);
}

// Function to populate dropdowns dynamically and attach checkbox listeners
function populateDropdown(dropdownListId, options, selectedValues = []) {
    const dropdownList = document.getElementById(dropdownListId);
    dropdownList.innerHTML = "";  // Clear any existing options

    // Separate Decades and Years
    const decades = [];
    const years = [];

    // Iterate through options and separate into decades and years
    Object.entries(options).forEach(([key, count]) => {
        if (key.includes("...")) {
            decades.push({ label: key, count: count });
        } else {
            years.push({ label: key, count: count });
        }
    });

    console.log("Decades:", decades);
    console.log("Years:", years);

    // Sort Decades in Ascending Order (e.g., 1910...1919, 1920...1929)
    decades.sort((a, b) => parseInt(a.label.split("...")[0]) - parseInt(b.label.split("...")[0]));

    // Sort Years in Descending Order (e.g., 2023, 2022, 2021)
    years.sort((a, b) => parseInt(b.label) - parseInt(a.label));

    // Combine Decades First and Years Below
    const sortedOptions = [...decades, ...years];

    // Render Sorted Options to the Dropdown
    sortedOptions.forEach(option => {
        const isChecked = selectedValues.includes(option.label) ? 'checked' : '';
        const label = document.createElement('label');
        label.innerHTML = `<input type="checkbox" value="${option.label}" ${isChecked}> ${option.label} (${option.count})`;
        dropdownList.appendChild(label);
    });



    // Attach Checkbox Listeners after the dropdown is populated
    const header = document.querySelector(`#${dropdownListId}-header`);
    console.log(`Dropdown ${dropdownListId} header: `, header);
    if (header) {
        const selectedCount = header.querySelector('.selected-count');
        const clearButton = header.querySelector('.clear-icon');

        // Attach checkbox listeners to handle selections and updates
        if (selectedCount && clearButton) {
            attachCheckboxListeners(dropdownList, selectedCount, clearButton);
        } else {
            console.error(`Dropdown ${dropdownListId}: Could not find header elements for attaching checkbox listeners.`);
        }
    } else {
        console.error(`Dropdown header not found for ${dropdownListId}`);
    }
}


// Function to show/hide dropdown
function toggleDropdown(dropdownList) {
    const isVisible = dropdownList.style.display === 'block';
    dropdownList.style.display = isVisible ? 'none' : 'block';
}


// Function to trigger a custom event to notify filter.js of dropdown changes
// Trigger a custom change event to update filters
function triggerDropdownChangeEvent() {
    const event = new CustomEvent('dropdownChange');
    console.log("Dispatching dropdownChange event");

    // Dispatch the custom dropdownChange event
    document.dispatchEvent(event);

    // Call the function to update the movie list and pagination
    updateMovieListAndPagination();
}

const searchBox = document.getElementById('search-box');
const clearSearchButton = document.getElementById('clear-search');

// Show/hide the clear button based on input value
searchBox.addEventListener('input', () => {
    if (searchBox.value.length > 0) {
        clearSearchButton.style.visibility = 'visible';  // Show the clear button
    } else {
        clearSearchButton.style.visibility = 'hidden';   // Hide the clear button
    }
});

// Clear the search box when the clear button is clicked
clearSearchButton.addEventListener('click', () => {
    searchBox.value = '';
    clearSearchButton.style.visibility = 'hidden';
    // Optionally trigger any search box reset logic here
});


--- File: static\js\carousel.js ---
import {carouselTitle, genreFontMapping, toggleFiltersButton, searchDropdownContainer, clearAllFiltersButton,showAllResultsButton, movieContainer } from './entry.js';  // Example import
import {getSelectedValues } from './filter.js';  // Example import




export function initializeSwiper() {
    const swiperContainer = document.querySelector('.swiper-container');
    if (!swiperContainer) {
        console.error("initializeSwiper: Swiper container nicht gefunden.");
        return;
    }

    const totalSlides = swiperContainer.querySelectorAll('.swiper-slide').length;
    const slidesPerViewDesktop = 4; // Base number for desktop

    const swiper = new Swiper('.swiper-container', {
        loop: totalSlides > slidesPerViewDesktop,
        autoplay: {
            delay: 5000,
            disableOnInteraction: false,
        },
        navigation: {
            nextEl: '.swiper-button-next',
            prevEl: '.swiper-button-prev',
        },
        slidesPerView: 'auto', // Allows Swiper to adjust based on slide width
        spaceBetween: 10,
        watchOverflow: true, // Disable Swiper if not enough slides

        // Responsive breakpoints
        breakpoints: {
            // When window width is >= 1400px
            2200: {
                slidesPerView: 13,
                spaceBetween: 10
            },
            2000: {
                slidesPerView: 10,
                spaceBetween: 10
            },
            1800: {
                slidesPerView: 9,
                spaceBetween: 10
            },
            1600: {
                slidesPerView: 8,
                spaceBetween: 10
            },
        
            1400: {
                slidesPerView: 6.5,
                spaceBetween: 10
            },
            // When window width is >= 1200px
            1200: {
                slidesPerView: 6,
                spaceBetween: 6
            },
            // When window width is >= 1024px
            1024: {
                slidesPerView: 5,
                spaceBetween: 8
            },
            // When window width is >= 900px
            900: {
                slidesPerView: 4,
                spaceBetween: 10
            },
            // When window width is >= 768px
            768: {
                slidesPerView: 3,
                spaceBetween: 12
            },
            // When window width is >= 640px
            640: {
                slidesPerView: 2.5,
                spaceBetween: 14
            },
            // When window width is < 640px
            0: { // Mobile-first
                slidesPerView: 2.5,
                spaceBetween: 16
            }
        },

        // Adjust to handle slides dynamically
        on: {
            resize: function () {
                this.update(); // Update Swiper on window resize
            },
            init: function () {
                if (totalSlides <= this.params.slidesPerView) {
                    this.loopDestroy(); // Disable loop if not enough slides
                }
            }
        }
    });
}
/**
 * Function to update the carousel title based on selected genre
 */
export function updateCarouselTitle() {
    const selectedGenres = getSelectedValues('genre-dropdown-list');
    if (selectedGenres.length === 1) {
        const genre = selectedGenres[0];
        carouselTitle.textContent = genreFontMapping[genre] ? `${genre} Filmtitel` : `${genre} Filme`;
        // Apply the corresponding font
        carouselTitle.style.fontFamily = genreFontMapping[genre] || "'Open Sans', sans-serif";
    } else if (selectedGenres.length > 1) {
        carouselTitle.textContent = "Verschiedene Genres";
        carouselTitle.style.fontFamily = "'Open Sans', sans-serif";
    } else {
        carouselTitle.textContent = "Hervorgehobene Filme";
        carouselTitle.style.fontFamily = "'Cinzel', serif";
    }
}
--- File: static\js\catalog.js ---
// Import any dependencies (if necessary)
import { movieContainer } from './entry.js';  // Example import

/**
 * Funktion zur Aktualisierung der Movie Listings basierend auf den Filterergebnissen
 */
function updateMovieListings(movies) {
    console.log("Updating Movie Listings");
    if (!movieContainer) {
        console.error("updateMovieListings: movieContainer Element nicht gefunden.");
        return;
    }

    movieContainer.innerHTML = "";  // Bestehende Einträge löschen

    if (movies.length > 0) {
        movies.forEach(movie => {
            const imagePath = `/movie_images/${encodeURIComponent(movie.folder_name)}/poster/poster_1.jpg`;
            const defaultImagePath = '/static/images/default_movie.png';

            const movieCard = document.createElement('div');
            movieCard.className = 'movie-card poster-background';
            movieCard.style.backgroundImage = `url('${imagePath}')`;

            const maxOverviewLength = window.innerWidth <= 768 ? 150 : 350;
            movieCard.innerHTML = `
                <div class="movie-content-wrapper">
                    <div class="image-container">
                        <img src="${imagePath}" alt="${movie.main_title}" onerror="this.onerror=null; this.src='${defaultImagePath}';">
                    </div>
                    <div class="info-section">
                        <div class="header-section">
                            <h2>${movie.main_title}</h2>
                            <!-- Weitere Elemente wie Buttons oder Icons -->
                        </div>
                        <div class="metadata">
                            <p><strong>Regie:</strong> ${movie.director}</p>
                            <p><strong>Schauspieler:</strong> ${movie.actors}</p>
                            <p class="inline-meta">${movie.runtime} min | ${movie.formats} | FSK ${movie.format_fsk} | &#9733; ${movie.imdb_rating}</p>
                            <p class="standort"><strong>Standort:</strong> ${movie.format_standort || 'N/A'}</p>
                            <p class="countries"><strong>Länder:</strong> ${movie.countries}</p> <!-- Länderinformationen -->
                        </div>
                    </div>
                    <div class="overview-section">
                        ${movie.overview.length > maxOverviewLength
                            ? `<p>${movie.overview.substring(0, maxOverviewLength)}... <a href="/movie/${movie.movie_id}" class="more-link">mehr</a></p>`
                            : `<p>${movie.overview} <a href="/movie/${movie.movie_id}" class="more-link">mehr</a></p>`}
                    </div>
                </div>
            `;

            movieContainer.appendChild(movieCard);
        });
    } else {
        movieContainer.innerHTML = `<p class="no-movies-message">Keine Filme entsprechen den ausgewählten Filtern.</p>`;
    }
}

--- File: static\js\entry.js ---
import { initializeSwiper } from './carousel.js';  // Example import
import { initializeFilterDropdowns } from './filter.js';  // Example import
import { initializeFilterPanelToggle } from './filter.js';  // Example import
import { initializeFilterActionButtons } from './filter.js';  // Example import

document.addEventListener('DOMContentLoaded', function () {
    console.log("Filter.js: DOM fully loaded");
    initializeFilterDropdowns();  // Initialize dropdowns on page load
    initializeSwiper(); // Initialize Swiper Carousel
    initializeFilterPanelToggle(); // Initialize filter panel toggle
    initializeFilterActionButtons(); // Initialize "Clear All" and "Show All Results" buttons
});

/** Cache Elements and Buttons */
export const clearSearchBtn = document.getElementById('clear-search');
export const searchBox = document.getElementById('search-box');
export const movieContainer = document.querySelector('.movie-listings');
export const topPaginationContainer = document.querySelector('.top-pagination nav ul');
export const bottomPaginationContainer = document.querySelector('.bottom-pagination nav ul');
export const progressIndicator = document.getElementById('progress-indicator');
export const carouselTitle = document.getElementById('carousel-title');
export const toggleFiltersButton = document.getElementById('toggle-filters-button');
export const searchDropdownContainer = document.querySelector('.search-dropdown-container');
export const clearAllFiltersButton = document.getElementById('clear-all-filters-button');
export const showAllResultsButton = document.getElementById('show-all-results-button');

export let debounceTimer = null;

/** Genre to Font Mapping */
export const genreFontMapping = {
    "Action": "'Anton', sans-serif",
    "Drama": "'Playfair Display', serif",
    "Family": "'Baloo 2', cursive",
    "Comedy": "'Comic Sans MS', cursive, sans-serif",
    "Thriller": "'Roboto Slab', serif",
    "Horror": "'Creepster', cursive",
    "Sci-Fi": "'Orbitron', sans-serif",
    "Romance": "'Great Vibes', cursive",
    "Documentary": "'Merriweather', serif",
    "Fantasy": "'Goudy Bookletter 1911', serif"
};

/**
 * Function to show the progress indicator
 */
export function showProgressIndicator() {
    console.log("showProgressIndicator aufgerufen");
    if (progressIndicator) {
        progressIndicator.style.display = 'flex'; // Progress Indicator anzeigen
        progressIndicator.setAttribute('aria-hidden', 'false');
        console.log("Progress Indicator angezeigt:", progressIndicator.style.display);
    } else {
        console.error("showProgressIndicator: Progress Indicator Element nicht gefunden.");
    }
}

/**
 * Function to hide the progress indicator
 */
export function hideProgressIndicator() {
    console.log("hideProgressIndicator aufgerufen");
    if (progressIndicator) {
        progressIndicator.style.display = 'none'; // Progress Indicator ausblenden
        progressIndicator.setAttribute('aria-hidden', 'true');
        console.log("Progress Indicator ausgeblendet:", progressIndicator.style.display);
    } else {
        console.error("hideProgressIndicator: Progress Indicator Element nicht gefunden.");
    }
}

--- File: static\js\filter.js ---

import { searchBox, debounceTimer, clearSearchBtn, toggleFiltersButton, searchDropdownContainer, clearAllFiltersButton,showAllResultsButton, movieContainer } from './entry.js';  // Example import
import { updateCarouselTitle } from './carousel.js';  // Example import

/**
 * Function to initialize filter panel toggle
 */
export function initializeFilterPanelToggle() {
    if (toggleFiltersButton && searchDropdownContainer) {
        toggleFiltersButton.addEventListener('click', () => {
            searchDropdownContainer.classList.toggle('hidden');
            toggleFiltersButton.classList.toggle('rotate');
        });
    }
}

/**
 * Function to initialize "Clear All" and "Show All Results" buttons
 */
export function initializeFilterActionButtons() {
    if (clearAllFiltersButton) {
        clearAllFiltersButton.addEventListener('click', () => {
            clearAllFilters();
            updateFilters();
        });
    }

    if (showAllResultsButton) {
        showAllResultsButton.addEventListener('click', () => {
            clearAllFilters();
            searchBox.value = '';
            updateFilters();
        });
    }
}

/**
 * Function to clear all filters
 */
export function clearAllFilters() {
    // Clear selections in all dropdowns
    const filterButtons = document.querySelectorAll('.dropdown-list .filter-button.selected');
    filterButtons.forEach(button => button.classList.remove('selected'));

    // Reset include/exclude toggles
    const includeExcludeCheckboxes = document.querySelectorAll('.include-exclude-checkbox');
    includeExcludeCheckboxes.forEach(checkbox => {
        checkbox.checked = true; // Set to include
    });

    // Hide clear icons and reset selection badges
    const clearIcons = document.querySelectorAll('.clear-icon');
    clearIcons.forEach(icon => {
        icon.style.visibility = 'hidden';
    });

    const selectionBadges = document.querySelectorAll('.selection-badge');
    selectionBadges.forEach(badge => {
        badge.textContent = '';
        badge.classList.remove('visible');
    });
}
/**
 * Function to initialize dropdowns and attach event listeners
 */
export function initializeFilterDropdowns() {
    // Handle filter updates triggered by custom dropdowns
    document.addEventListener('dropdownChange', () => {
        console.log("Filter.js: Detected dropdown change event");
        updateFilters(); // Trigger filter update on dropdown change
    });

    // Search box input event with debouncing
    if (searchBox) { // Check if searchBox exists
        searchBox.addEventListener('input', () => {
            // Toggle visibility of the clear icon
            if (searchBox.value.length > 0) {
                clearSearchBtn.classList.add('visible');
            } else {
                clearSearchBtn.classList.remove('visible');
            }

            clearTimeout(debounceTimer);
            debounceTimer = setTimeout(() => {
                updateFilters(); // Trigger filter update after user stops typing for 300ms
            }, 300);
        });
    } else {
        console.error("initializeFilterDropdowns: searchBox element not found.");
    }

    // Clear search box and trigger update
    if (clearSearchBtn && searchBox) { // Ensure both elements exist
        clearSearchBtn.addEventListener('click', () => {
            searchBox.value = '';
            clearSearchBtn.classList.remove('visible');
            updateFilters();
        });
    } else {
        console.error("initializeFilterDropdowns: clearSearchBtn or searchBox element not found.");
    }

    // Attach event listeners to dropdowns using event delegation
    attachDropdownEventDelegation();

    // Initial filter update
    updateFilters();
}
/**
 * Function to attach event listeners to dropdowns using event delegation
 */
export function attachDropdownEventDelegation() {
    const dropdownLists = document.querySelectorAll('.dropdown-list');

    dropdownLists.forEach(dropdownList => {
        // Handle button clicks within the dropdown
        dropdownList.addEventListener('click', (event) => {
            const target = event.target;
            if (target && target.classList.contains('filter-button')) {
                event.preventDefault();
                const value = target.dataset.value;
                target.classList.toggle('selected');

                // Update the selected values
                const selectedButtons = dropdownList.querySelectorAll('.filter-button.selected');
                const selectedValues = Array.from(selectedButtons).map(btn => btn.dataset.value);

                // Update the selection badge and clear button
                const dropdownHeader = dropdownList.previousElementSibling;
                const clearButton = dropdownHeader.querySelector('.clear-icon');
                const selectionBadge = dropdownHeader.querySelector('.selection-badge');
                updateSelectionBadge(selectedValues, selectionBadge);
                clearButton.style.visibility = selectedValues.length > 0 ? 'visible' : 'hidden';

                // Trigger filter update
                triggerDropdownChangeEvent();

                // Update carousel title based on selected genre
                if (dropdownList.id === 'genre-dropdown-list') {
                    updateCarouselTitle();
                }
            }
        });

        // Handle clear button
        const clearButton = dropdownList.parentElement.querySelector('.clear-icon');
        if (clearButton) {
            clearButton.addEventListener('click', (event) => {
                event.stopPropagation();
                const buttons = dropdownList.querySelectorAll('.filter-button.selected');
                buttons.forEach(button => button.classList.remove('selected'));
                const dropdownHeader = dropdownList.previousElementSibling;
                const selectionBadge = dropdownHeader.querySelector('.selection-badge');
                updateSelectionBadge([], selectionBadge);
                clearButton.style.visibility = 'hidden';
                triggerDropdownChangeEvent();

                // Update carousel title based on selected genre
                if (dropdownList.id === 'genre-dropdown-list') {
                    updateCarouselTitle();
                }
            });
        }
    });

    // Handle dropdown header clicks
    const dropdownHeaders = document.querySelectorAll('.dropdown-header');
    dropdownHeaders.forEach(header => {
        header.addEventListener('click', (event) => {
            event.stopPropagation();
            const dropdownList = header.nextElementSibling;
            toggleDropdown(dropdownList, header);
        });

        // Allow keyboard accessibility
        header.addEventListener('keydown', (event) => {
            if (event.key === 'Enter' || event.key === ' ') {
                event.preventDefault();
                const dropdownList = header.nextElementSibling;
                toggleDropdown(dropdownList, header);
            }
        });
    });

    // Close dropdowns when clicking outside
    document.addEventListener('click', (event) => {
        dropdownLists.forEach(dropdownList => {
            const header = dropdownList.previousElementSibling;
            if (!dropdownList.contains(event.target) && !header.contains(event.target)) {
                dropdownList.classList.remove('show');
                header.setAttribute('aria-expanded', 'false');
            }
        });
    });
}

/**
 * Function to toggle dropdown visibility
 */
export function toggleDropdown(dropdownList, header) {
    const isVisible = dropdownList.classList.contains('show');
    if (isVisible) {
        dropdownList.classList.remove('show');
        header.setAttribute('aria-expanded', 'false');
    } else {
        dropdownList.classList.add('show');
        header.setAttribute('aria-expanded', 'true');
    }
}

/**
 * Function to update the Selection Badge based on current selections
 */
export function updateSelectionBadge(selectedValues, badgeElement) {
    if (selectedValues.length > 0) {
        badgeElement.textContent = selectedValues.join(', ');
        badgeElement.classList.add('visible');
    } else {
        badgeElement.textContent = '';
        badgeElement.classList.remove('visible');
    }
}

/**
 * Function to trigger a custom event to notify filter.js of dropdown changes
 */
export function triggerDropdownChangeEvent() {
    const event = new CustomEvent('dropdownChange');
    console.log("Dispatching dropdownChange event");
    document.dispatchEvent(event);
}


/**
 * Function to update dropdown values and movie listings based on current selections and search query
 */
export function updateFilters(page = 1) {
    const selectedYears = getSelectedValues('year-dropdown-list');
    const selectedGenres = getSelectedValues('genre-dropdown-list');
    const selectedCountries = getSelectedValues('country-dropdown-list');
    const searchQuery = searchBox ? searchBox.value.trim() : '';

    // Get include/exclude status
    const yearInclude = document.querySelector('.include-exclude-checkbox[data-filter="year"]').checked;
    const genreInclude = document.querySelector('.include-exclude-checkbox[data-filter="genre"]').checked;
    const countryInclude = document.querySelector('.include-exclude-checkbox[data-filter="country"]').checked;

    const params = new URLSearchParams();
    if (selectedYears.length) {
        params.append('years', selectedYears.join(','));
        params.append('years_include', yearInclude ? '1' : '0');
    }
    if (selectedGenres.length) {
        params.append('genres', selectedGenres.join(','));
        params.append('genres_include', genreInclude ? '1' : '0');
    }
    if (selectedCountries.length) {
        params.append('countries', selectedCountries.join(','));
        params.append('countries_include', countryInclude ? '1' : '0');
    }
    if (searchQuery) params.append('search', searchQuery);
    params.append('page', page);

    console.log("Fetching updated filter data with params:", params.toString());

    // Show the progress indicator before starting the fetch
    showProgressIndicator();

    fetch(`/filter_movies?${params.toString()}`)
        .then(response => response.json())
        .then(data => {
            console.log("API Response Data:", data);
            const { years, genres, countries, movies, current_page, total_pages } = data;

            // Populate each dropdown with data
            populateDropdown('year-dropdown-list', years, selectedYears);
            populateDropdown('genre-dropdown-list', genres, selectedGenres);
            populateDropdown('country-dropdown-list', countries, selectedCountries);

            updateMovieListings(movies);//in carousel.js
            updatePagination(current_page, total_pages);
        })
        .catch(error => {
            console.error('Error fetching filter data:', error);
            if (movieContainer) {
                movieContainer.innerHTML = `<p class="no-movies-message">Ein Fehler ist aufgetreten. Bitte versuchen Sie es später erneut.</p>`;
            }
        })
        .finally(() => {
            // Hide the progress indicator after fetch completes (success or error)
            hideProgressIndicator();
        });
}
/**
 * Helper to get selected values from a specific dropdown list
 */
export function getSelectedValues(dropdownListId) {
    const buttons = document.querySelectorAll(`#${dropdownListId} .filter-button.selected`);
    return Array.from(buttons).map(btn => btn.dataset.value);
}

/**
 * Function to populate dropdown lists with options
 * @param {string} dropdownListId - The ID of the dropdown list element
 * @param {Object} options - An object with option labels as keys and counts as values
 * @param {Array} selectedValues - An array of currently selected option values
 */
export function populateDropdown(dropdownListId, options, selectedValues = []) {
    const dropdownList = document.getElementById(dropdownListId);
    if (!dropdownList) {
        console.error(`populateDropdown: Element mit ID '${dropdownListId}' nicht gefunden.`);
        return;
    }

    dropdownList.innerHTML = "";  // Bestehende Optionen löschen

    if (typeof options !== 'object' || Array.isArray(options)) {
        console.error(`populateDropdown: 'options' sollte ein Objekt sein. Erhalten:`, options);
        return;
    }

    // Convert options object to array and sort
    const optionsArray = Object.entries(options).map(([label, count]) => ({ label, count }));

    // Sort options as needed (e.g., alphabetically)
    optionsArray.sort((a, b) => a.label.localeCompare(b.label));

    // Render buttons
    optionsArray.forEach(option => {
        const button = document.createElement("button");
        button.type = "button";
        button.className = "filter-button";
        button.textContent = `${option.label} (${option.count})`;
        button.dataset.value = option.label;

        if (selectedValues.includes(option.label)) {
            button.classList.add('selected');
        }

        dropdownList.appendChild(button);
    });

    // Update Selection Badge after populating
    const parentDropdown = dropdownList.parentElement;
    const selectionBadge = parentDropdown.querySelector('.selection-badge');
    const selectedButtons = dropdownList.querySelectorAll('.filter-button.selected');
    const selectedValuesUpdated = Array.from(selectedButtons).map(btn => btn.dataset.value);
    updateSelectionBadge(selectedValuesUpdated, selectionBadge);
}

--- File: static\js\hero.js ---
document.addEventListener('DOMContentLoaded', function () {
 
    // Call the wrapper function after the DOM content is fully loaded
    initializeHeroSectionIfPresent();

    // Call truncateText function for overview sections
    truncateText('.info-section.overview p', 500);

    // Call the function on initial load and resize
    adjustTitleFontSize();
    window.addEventListener('resize', adjustTitleFontSize);

    // Call the function on initial load and window resize
    adjustMetadataWidth();
    window.addEventListener('resize', adjustMetadataWidth);

    // Call the function on initial load and window resize
    updateMovieCardBackground();
    window.addEventListener('resize', updateMovieCardBackground);

});


// Wrapper function to check the presence of hero section before initializing
function initializeHeroSectionIfPresent() {
    function manageHeroAndTaglines() {
        // Taglines array for the hero section
        const taglines = [
            "Entdecke unsere Sammlung von fast 20.000 Filmen.",
            "Finde deine Lieblingsfilme und entdecke neue Perlen.",
            "Tauche ein in cineastische Meisterwerke.",
            "Erlebe das Beste aus Arthouse- und klassischem Kino.",
            "Dein Zugang zu zeitlosen Filmen.",
            "Die Filmsammlung des FORMAT Filmkunst-Verleihs.",
            "Für eine Handvoll Dollar kannst du von den Möglichkeiten profitieren.",
            "Über 19.000 Filme - die größte private Filmsammlung Mitteldeutschlands.",
            "Independent- und Arthouse-Filme auf DVD, Blu-ray und 3D-Blu-ray.",
            "'Unendliche Weiten' an Informationen zu den Filmen.",
            "Cineastische Raritäten, Arthouse und Blockbuster - alles unter einem Dach.",
            "FILMKUNST-Verleih seit über 18 Jahren."
        ];
    
        // Hero images array
        const heroImages = [
            '/static/images/backdrop_1.jpg',
            '/static/images/backdrop_2.jpg',
            '/static/images/backdrop_3.jpg',
            '/static/images/backdrop_4.jpg'
        ];
    
        // Elements for the hero section
        const taglineElement = document.getElementById('dynamic-tagline');
        const heroImageElement = document.querySelector('.hero-image img');
        const logoElement = document.querySelector('.logo span');
    
        // Check for the presence of critical elements before proceeding
        if (!taglineElement || !heroImageElement || !logoElement) {
            console.info("Hero elements not found on this page. Skipping hero section initialization.");
            return; // Exit the function if elements are not found
        }
    
        // Initial setup for tagline and hero image
        let currentTaglineIndex = Math.floor(Math.random() * taglines.length);
        taglineElement.textContent = taglines[currentTaglineIndex];
        taglineElement.classList.add('fade-in');
    
        // Set a random hero image
        const randomImage = heroImages[Math.floor(Math.random() * heroImages.length)];
        heroImageElement.src = randomImage;
    
        // Change taglines periodically
        setInterval(() => {
            taglineElement.classList.remove('fade-in');
            taglineElement.classList.add('fade-out');
    
            setTimeout(() => {
                currentTaglineIndex = (currentTaglineIndex + 1) % taglines.length;
                taglineElement.textContent = taglines[currentTaglineIndex];
                taglineElement.classList.remove('fade-out');
                taglineElement.classList.add('fade-in');
    
                // Randomly change logo color
                const randomChance = Math.random();
                logoElement.style.color = randomChance < 0.3 ? 'red' : 'white';
            }, 1000); // Matches transition duration
        }, 5000);
    }    
    // Run the hero management code only if the relevant elements exist on the page
    const heroSectionExists = document.querySelector('.hero-image img') && document.getElementById('dynamic-tagline') && document.querySelector('.logo span');
    
    if (heroSectionExists) {
        manageHeroAndTaglines(); // Initialize only if hero section elements are present
    } else {
        console.info("Hero section elements not found on this page. Skipping hero management.");
    }
}

// Truncate text for overview sections
function truncateText(selector, maxLength) {
    const elements = document.querySelectorAll(selector);
    elements.forEach(element => {
        const originalText = element.textContent;
        if (originalText.length > maxLength) {
            const truncatedText = originalText.substring(0, maxLength).trim() + '...';
            element.textContent = truncatedText;
        }
    });
}
// Adjust title font size dynamically based on overflow
function adjustTitleFontSize() {
    const movieCards = document.querySelectorAll('.movie-card');
    movieCards.forEach(card => {
        const titleContainer = card.querySelector('.titles');
        if (titleContainer) {
            const mainTitle = titleContainer.querySelector('.main-title');
            const releaseYear = titleContainer.querySelector('.release-year');
            
            if (mainTitle && releaseYear) {
                // Reset to default size
                mainTitle.style.fontSize = '1.6em';
                releaseYear.style.fontSize = '0.8em';
                
                // Check if the title overflows
                if (titleContainer.scrollWidth > titleContainer.clientWidth) {
                    let fontSize = parseFloat(window.getComputedStyle(mainTitle).fontSize);
                    while (titleContainer.scrollWidth > titleContainer.clientWidth && fontSize > 0.8) {
                        fontSize -= 0.1;
                        mainTitle.style.fontSize = fontSize + 'em';
                        releaseYear.style.fontSize = (fontSize * 0.7) + 'em';  // Adjust year proportionally
                    }
                }
            }
        }
    });
}

// Adjust the width of metadata elements dynamically
function adjustMetadataWidth() {
    const metadataElements = document.querySelectorAll('.movie-metadata');
    metadataElements.forEach(metadata => {
        const parentWidth = metadata.parentElement.clientWidth;
        metadata.style.maxWidth = parentWidth + 'px';
    });
}


// Function to update movie card background images based on screen size
function updateMovieCardBackground() {
const movieCards = document.querySelectorAll('.movie-card.poster-background');
movieCards.forEach(card => {
    const mobileImage = card.getAttribute('data-mobile-image');
    const desktopImage = card.getAttribute('data-desktop-image');

    // Set the correct background based on the screen size
    if (window.innerWidth >= 1024) {
        if (desktopImage) {
            card.style.backgroundImage = `url(${desktopImage})`;
        }
    } else {
        if (mobileImage) {
            card.style.backgroundImage = `url(${mobileImage})`;
        }
    }
});
}
--- File: static\js\main.js ---





import { initializeSwiper, updateCarouselTitle } from './carousel.js';
--- File: static\js\navbar.js ---
document.addEventListener('DOMContentLoaded', function () {
    const navbar = document.querySelector('.navbar'); // Select the navbar element
    let lastScrollTop = 0; // Track the previous scroll position
    let debounceTimer = null; // Timer for debounce to limit function calls

    // Function to handle scroll events
    function handleScroll() {
        const currentScroll = window.pageYOffset || document.documentElement.scrollTop;

        // Show navbar at the top of the page
        if (currentScroll <= 20) {
            navbar.classList.remove('hide');
            navbar.classList.add('show');
        }
        // Hide navbar on scroll down
        else if (currentScroll > lastScrollTop) {
            navbar.classList.add('hide');
            navbar.classList.remove('show');
        }
        // Show navbar on scroll up
        else {
            navbar.classList.remove('hide');
            navbar.classList.add('show');
        }

        lastScrollTop = currentScroll <= 0 ? 0 : currentScroll; // Update lastScrollTop
    }

    // Debounce function to limit the number of scroll events fired
    function debounce(func, delay) {
        return function (...args) {
            clearTimeout(debounceTimer); // Clear the previous timer
            debounceTimer = setTimeout(() => func.apply(this, args), delay); // Set a new timer
        };
    }

    // Listen to scroll events with debounce applied
    window.addEventListener('scroll', debounce(handleScroll, 100));
});

--- File: static\js\pagination.js ---
import { topPaginationContainer, bottomPaginationContainer } from './entry.js';  // Example import
import { updateFilters } from './filter.js';  // Example import

/**
 * Function to handle pagination updates for both top and bottom paginations
 */
export function updatePagination(currentPage, totalPages) {
    [topPaginationContainer, bottomPaginationContainer].forEach(paginationContainer => {
        if (!paginationContainer) return;

        paginationContainer.innerHTML = "";  // Bestehende Pagination-Buttons löschen

        // Create the "Previous" Button
        let prevDisabledClass = currentPage <= 1 ? 'disabled' : '';
        let prevDisabledAttr = currentPage <= 1 ? 'aria-disabled="true"' : '';
        paginationContainer.innerHTML += `<li class="${prevDisabledClass}"><a href="#" data-page="${currentPage - 1}" ${prevDisabledAttr}>&laquo; Previous</a></li>`;

        // Add first page and ellipsis if needed
        if (currentPage > 3) {
            paginationContainer.innerHTML += `<li><a href="#" data-page="1">1</a></li>`;
            paginationContainer.innerHTML += `<li class="ellipsis"><span>...</span></li>`;
        }

        // Generate page numbers around the current page
        let startPage = Math.max(1, currentPage - 2);
        let endPage = Math.min(totalPages, currentPage + 2);
        for (let p = startPage; p <= endPage; p++) {
            let activeClass = (p === currentPage) ? 'active' : '';
            paginationContainer.innerHTML += `<li class="${activeClass}"><a href="#" data-page="${p}">${p}</a></li>`;
        }

        // Add ellipsis and last page if needed
        if (currentPage < totalPages - 2) {
            paginationContainer.innerHTML += `<li class="ellipsis"><span>...</span></li>`;
            paginationContainer.innerHTML += `<li><a href="#" data-page="${totalPages}">${totalPages}</a></li>`;
        }

        // Create the "Next" Button
        let nextDisabledClass = currentPage >= totalPages ? 'disabled' : '';
        let nextDisabledAttr = currentPage >= totalPages ? 'aria-disabled="true"' : '';
        paginationContainer.innerHTML += `<li class="${nextDisabledClass}"><a href="#" data-page="${currentPage + 1}" ${nextDisabledAttr}>Next &raquo;</a></li>`;
    });

    attachPaginationEventListeners();
}

/**
 * Function to attach click event listeners for pagination buttons
 */
export function attachPaginationEventListeners() {
    const paginationLinks = document.querySelectorAll('.pagination nav ul li a[data-page]');
    paginationLinks.forEach(link => {
        link.addEventListener('click', function (event) {
            event.preventDefault();
            if (this.parentElement.classList.contains('disabled')) {
                return;  // Klicks auf deaktivierte Buttons ignorieren
            }
            const page = parseInt(this.getAttribute('data-page'));
            if (!isNaN(page)) updateFilters(page);  // Filterung mit ausgewählter Seite auslösen
        });
    });
}

